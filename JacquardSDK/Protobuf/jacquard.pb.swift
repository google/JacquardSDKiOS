// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: jacquard.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Google_Jacquard_Protocol_Status: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case ok // = 0
  case errorUnsupported // = 1
  case errorBadparam // = 2
  case errorBattery // = 3
  case errorHardware // = 4
  case errorAuth // = 5
  case errorDeviceTypeInfo // = 6
  case errorInvalidState // = 7
  case errorFlashAccess // = 8
  case errorChecksum // = 9
  case errorBusy // = 10
  case errorAppTimeout // = 253
  case errorAppUnknown // = 254
  case errorUnknown // = 255

  init() {
    self = .ok
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ok
    case 1: self = .errorUnsupported
    case 2: self = .errorBadparam
    case 3: self = .errorBattery
    case 4: self = .errorHardware
    case 5: self = .errorAuth
    case 6: self = .errorDeviceTypeInfo
    case 7: self = .errorInvalidState
    case 8: self = .errorFlashAccess
    case 9: self = .errorChecksum
    case 10: self = .errorBusy
    case 253: self = .errorAppTimeout
    case 254: self = .errorAppUnknown
    case 255: self = .errorUnknown
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .ok: return 0
    case .errorUnsupported: return 1
    case .errorBadparam: return 2
    case .errorBattery: return 3
    case .errorHardware: return 4
    case .errorAuth: return 5
    case .errorDeviceTypeInfo: return 6
    case .errorInvalidState: return 7
    case .errorFlashAccess: return 8
    case .errorChecksum: return 9
    case .errorBusy: return 10
    case .errorAppTimeout: return 253
    case .errorAppUnknown: return 254
    case .errorUnknown: return 255
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_Status: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_Domain: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case base // = 0
  case dfu // = 1
  case bounceback // = 5
  case developer // = 6
  case gear // = 8
  case dataCollection // = 9
  case module // = 10

  init() {
    self = .base
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .base
    case 1: self = .dfu
    case 5: self = .bounceback
    case 6: self = .developer
    case 8: self = .gear
    case 9: self = .dataCollection
    case 10: self = .module
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .base: return 0
    case .dfu: return 1
    case .bounceback: return 5
    case .developer: return 6
    case .gear: return 8
    case .dataCollection: return 9
    case .module: return 10
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_Domain: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_PatternType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case none // = 0
  case solid // = 1
  case breathing // = 2
  case pulsing // = 3
  case singleBlink // = 4
  case doubleBlink // = 5
  case trippleBlink // = 6
  case custom // = 7

  init() {
    self = .none
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .solid
    case 2: self = .breathing
    case 3: self = .pulsing
    case 4: self = .singleBlink
    case 5: self = .doubleBlink
    case 6: self = .trippleBlink
    case 7: self = .custom
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .none: return 0
    case .solid: return 1
    case .breathing: return 2
    case .pulsing: return 3
    case .singleBlink: return 4
    case .doubleBlink: return 5
    case .trippleBlink: return 6
    case .custom: return 7
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_PatternType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_LogLevel: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case logVerboseLevel_Off // = 0
  case logVerboseLevel_Debug // = 1
  case logVerboseLevel_Error // = 2
  case logVerboseLevel_Important // = 3
  case logVerboseLevel_Info // = 4
  case logVerboseLevel_Data // = 5
  case logVerboseLevel_All // = 6

  init() {
    self = .logVerboseLevel_Off
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .logVerboseLevel_Off
    case 1: self = .logVerboseLevel_Debug
    case 2: self = .logVerboseLevel_Error
    case 3: self = .logVerboseLevel_Important
    case 4: self = .logVerboseLevel_Info
    case 5: self = .logVerboseLevel_Data
    case 6: self = .logVerboseLevel_All
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .logVerboseLevel_Off: return 0
    case .logVerboseLevel_Debug: return 1
    case .logVerboseLevel_Error: return 2
    case .logVerboseLevel_Important: return 3
    case .logVerboseLevel_Info: return 4
    case .logVerboseLevel_Data: return 5
    case .logVerboseLevel_All: return 6
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_LogLevel: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_Opcode: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case supported // = 0
  case hello // = 1
  case begin // = 2
  case disconnect // = 3
  case deviceinfo // = 4
  case gesture // = 5
  case activity // = 6
  case wearstate // = 7
  case pattern // = 8
  case attached // = 9
  case configRead // = 10
  case configWrite // = 11
  case metrics // = 14
  case metricsNotify // = 15
  case error // = 16
  case ledPattern // = 17
  case loadModule // = 18
  case unloadModule // = 19
  case listModules // = 20
  case deleteModule // = 21
  case batteryStatus // = 23
  case configGet // = 24
  case configSet // = 25
  case configGetIndex // = 26
  case requestDisconnect // = 27
  case requestReboot // = 28
  case faultlogGet // = 29
  case faultlogClear // = 30
  case hidKeyPattern // = 31
  static let dfuStatus = hello
  static let dfuPrepare = begin
  static let dfuWrite = disconnect
  static let dfuExecute = deviceinfo
  static let consoleOutput = hello
  static let consoleInput = begin
  static let consoleOptions = disconnect
  static let gearInfo = deviceinfo
  static let gearTest = disconnect
  static let gearHwchar = begin
  static let gearLed = gesture
  static let gearHaptic = activity
  static let gearData = wearstate
  static let gearBuffer = pattern
  static let gearPower = attached
  static let gearAlwaysTogetherConfig = configRead
  static let dataCollectionStart = hello
  static let dataCollectionStop = begin
  static let dataCollectionStatus = disconnect
  static let dataCollectionTrialList = deviceinfo
  static let dataCollectionTrialData = gesture
  static let dataCollectionTrialDataErase = activity
  static let dataCollectionDataErase = wearstate

  init() {
    self = .supported
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .supported
    case 1: self = .hello
    case 2: self = .begin
    case 3: self = .disconnect
    case 4: self = .deviceinfo
    case 5: self = .gesture
    case 6: self = .activity
    case 7: self = .wearstate
    case 8: self = .pattern
    case 9: self = .attached
    case 10: self = .configRead
    case 11: self = .configWrite
    case 14: self = .metrics
    case 15: self = .metricsNotify
    case 16: self = .error
    case 17: self = .ledPattern
    case 18: self = .loadModule
    case 19: self = .unloadModule
    case 20: self = .listModules
    case 21: self = .deleteModule
    case 23: self = .batteryStatus
    case 24: self = .configGet
    case 25: self = .configSet
    case 26: self = .configGetIndex
    case 27: self = .requestDisconnect
    case 28: self = .requestReboot
    case 29: self = .faultlogGet
    case 30: self = .faultlogClear
    case 31: self = .hidKeyPattern
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .supported: return 0
    case .hello: return 1
    case .begin: return 2
    case .disconnect: return 3
    case .deviceinfo: return 4
    case .gesture: return 5
    case .activity: return 6
    case .wearstate: return 7
    case .pattern: return 8
    case .attached: return 9
    case .configRead: return 10
    case .configWrite: return 11
    case .metrics: return 14
    case .metricsNotify: return 15
    case .error: return 16
    case .ledPattern: return 17
    case .loadModule: return 18
    case .unloadModule: return 19
    case .listModules: return 20
    case .deleteModule: return 21
    case .batteryStatus: return 23
    case .configGet: return 24
    case .configSet: return 25
    case .configGetIndex: return 26
    case .requestDisconnect: return 27
    case .requestReboot: return 28
    case .faultlogGet: return 29
    case .faultlogClear: return 30
    case .hidKeyPattern: return 31
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_Opcode: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_PatternPlayType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case play // = 0
  case toggle // = 1

  init() {
    self = .play
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .play
    case 1: self = .toggle
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .play: return 0
    case .toggle: return 1
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_PatternPlayType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_HapticSymbolType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case hapticSymbolHalted // = 0
  case hapticSymbolSineIncrease // = 1
  case hapticSymbolSineDecrease // = 2
  case hapticSymbolLinearIncrease // = 3
  case hapticSymbolLinearDecrease // = 4
  case hapticSymbolParabolicIncrease // = 5
  case hapticSymbolParabolicDecrease // = 6
  case hapticSymbolConstOn // = 7

  init() {
    self = .hapticSymbolHalted
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .hapticSymbolHalted
    case 1: self = .hapticSymbolSineIncrease
    case 2: self = .hapticSymbolSineDecrease
    case 3: self = .hapticSymbolLinearIncrease
    case 4: self = .hapticSymbolLinearDecrease
    case 5: self = .hapticSymbolParabolicIncrease
    case 6: self = .hapticSymbolParabolicDecrease
    case 7: self = .hapticSymbolConstOn
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .hapticSymbolHalted: return 0
    case .hapticSymbolSineIncrease: return 1
    case .hapticSymbolSineDecrease: return 2
    case .hapticSymbolLinearIncrease: return 3
    case .hapticSymbolLinearDecrease: return 4
    case .hapticSymbolParabolicIncrease: return 5
    case .hapticSymbolParabolicDecrease: return 6
    case .hapticSymbolConstOn: return 7
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_HapticSymbolType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_DataStreamState: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case dataStreamDisable // = 0
  case dataStreamEnable // = 1
  case dataStreamNotSupported // = 2
  case dataStreamEnableDetailed // = 3

  init() {
    self = .dataStreamDisable
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .dataStreamDisable
    case 1: self = .dataStreamEnable
    case 2: self = .dataStreamNotSupported
    case 3: self = .dataStreamEnableDetailed
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .dataStreamDisable: return 0
    case .dataStreamEnable: return 1
    case .dataStreamNotSupported: return 2
    case .dataStreamEnableDetailed: return 3
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_DataStreamState: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_SKUMaterial: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case ribbon // = 0
  case ripstop // = 1
  case thread // = 2

  init() {
    self = .ribbon
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ribbon
    case 1: self = .ripstop
    case 2: self = .thread
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .ribbon: return 0
    case .ripstop: return 1
    case .thread: return 2
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_SKUMaterial: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_LEDType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case rgb // = 0
  case singleColor // = 1

  init() {
    self = .rgb
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .rgb
    case 1: self = .singleColor
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .rgb: return 0
    case .singleColor: return 1
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_LEDType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_LEDGeometry: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case linear // = 0
  case circular // = 2
  case ringAndCenter // = 3

  init() {
    self = .linear
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .linear
    case 2: self = .circular
    case 3: self = .ringAndCenter
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .linear: return 0
    case .circular: return 2
    case .ringAndCenter: return 3
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_LEDGeometry: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_ConnectorType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case cClip // = 0
  case oTub // = 1
  case yTub // = 2

  init() {
    self = .cClip
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .cClip
    case 1: self = .oTub
    case 2: self = .yTub
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .cClip: return 0
    case .oTub: return 1
    case .yTub: return 2
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_ConnectorType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_OrientationType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case normal // = 0
  case flipped // = 1

  init() {
    self = .normal
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .normal
    case 1: self = .flipped
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .normal: return 0
    case .flipped: return 1
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_OrientationType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_HapticType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case halted // = 0
  case sineIncrease // = 1
  case sineDecrease // = 2
  case linearIncrease // = 3
  case linearDecrease // = 4
  case parabolicIncrease // = 5
  case parabolicDecrease // = 6
  case constOn // = 7

  init() {
    self = .halted
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .halted
    case 1: self = .sineIncrease
    case 2: self = .sineDecrease
    case 3: self = .linearIncrease
    case 4: self = .linearDecrease
    case 5: self = .parabolicIncrease
    case 6: self = .parabolicDecrease
    case 7: self = .constOn
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .halted: return 0
    case .sineIncrease: return 1
    case .sineDecrease: return 2
    case .linearIncrease: return 3
    case .linearDecrease: return 4
    case .parabolicIncrease: return 5
    case .parabolicDecrease: return 6
    case .constOn: return 7
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_HapticType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_UpdateSchedule: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case updateNow // = 0
  case updateLater // = 1
  case updateWhenAttached // = 2

  init() {
    self = .updateNow
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .updateNow
    case 1: self = .updateLater
    case 2: self = .updateWhenAttached
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .updateNow: return 0
    case .updateLater: return 1
    case .updateWhenAttached: return 2
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_UpdateSchedule: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_GenericBlobMsgType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case genericMsgtypeAncsDs // = 0
  case genericMsgtypeAncsNs // = 1
  case genericMsgtypeAmsEu // = 2
  case genericMsgtypeAmsEa // = 3

  init() {
    self = .genericMsgtypeAncsDs
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .genericMsgtypeAncsDs
    case 1: self = .genericMsgtypeAncsNs
    case 2: self = .genericMsgtypeAmsEu
    case 3: self = .genericMsgtypeAmsEa
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .genericMsgtypeAncsDs: return 0
    case .genericMsgtypeAncsNs: return 1
    case .genericMsgtypeAmsEu: return 2
    case .genericMsgtypeAmsEa: return 3
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_GenericBlobMsgType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_DataCollectionStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case dataCollectionIdle // = 0
  case dataCollectionLogging // = 1
  case dataCollectionXferData // = 2
  case dataCollectionErasingData // = 3
  case dataCollectionErrorState // = 4
  case dataCollectionInvalidState // = 5
  case dataCollectionLowStorage // = 6
  case dataCollectionLowBattery // = 7
  case dataCollectionImuConfigReadError // = 8
  case dataCollectionImuConfigWriteError // = 9
  case dataCollectionImuSetCallbackError // = 10
  case dataCollectionImuOnError // = 11
  case dataCollectionImuOffError // = 12
  case dataCollectionMkdirError // = 13
  case dataCollectionChdirError // = 14
  case dataCollectionOpendirError // = 15
  case dataCollectionReaddirError // = 16
  case dataCollectionGetcwdError // = 17
  case dataCollectionFopenError // = 18
  case dataCollectionFwriteError // = 19
  case dataCollectionFreadError // = 20
  case dataCollectionFseekError // = 21
  case dataCollectionFunlinkError // = 22
  case dataCollectionFgetfreeError // = 23
  case dataCollectionBadFileFormat // = 24
  case dataCollectionPbencodeError // = 25
  case dataCollectionPbdecodeError // = 26
  case dataCollectionRawTxError // = 27
  case dataCollectionGearSetCallbackError // = 28
  case dataCollectionAppSchedEvent // = 29
  case dataCollectionUnknown // = 30

  init() {
    self = .dataCollectionIdle
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .dataCollectionIdle
    case 1: self = .dataCollectionLogging
    case 2: self = .dataCollectionXferData
    case 3: self = .dataCollectionErasingData
    case 4: self = .dataCollectionErrorState
    case 5: self = .dataCollectionInvalidState
    case 6: self = .dataCollectionLowStorage
    case 7: self = .dataCollectionLowBattery
    case 8: self = .dataCollectionImuConfigReadError
    case 9: self = .dataCollectionImuConfigWriteError
    case 10: self = .dataCollectionImuSetCallbackError
    case 11: self = .dataCollectionImuOnError
    case 12: self = .dataCollectionImuOffError
    case 13: self = .dataCollectionMkdirError
    case 14: self = .dataCollectionChdirError
    case 15: self = .dataCollectionOpendirError
    case 16: self = .dataCollectionReaddirError
    case 17: self = .dataCollectionGetcwdError
    case 18: self = .dataCollectionFopenError
    case 19: self = .dataCollectionFwriteError
    case 20: self = .dataCollectionFreadError
    case 21: self = .dataCollectionFseekError
    case 22: self = .dataCollectionFunlinkError
    case 23: self = .dataCollectionFgetfreeError
    case 24: self = .dataCollectionBadFileFormat
    case 25: self = .dataCollectionPbencodeError
    case 26: self = .dataCollectionPbdecodeError
    case 27: self = .dataCollectionRawTxError
    case 28: self = .dataCollectionGearSetCallbackError
    case 29: self = .dataCollectionAppSchedEvent
    case 30: self = .dataCollectionUnknown
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .dataCollectionIdle: return 0
    case .dataCollectionLogging: return 1
    case .dataCollectionXferData: return 2
    case .dataCollectionErasingData: return 3
    case .dataCollectionErrorState: return 4
    case .dataCollectionInvalidState: return 5
    case .dataCollectionLowStorage: return 6
    case .dataCollectionLowBattery: return 7
    case .dataCollectionImuConfigReadError: return 8
    case .dataCollectionImuConfigWriteError: return 9
    case .dataCollectionImuSetCallbackError: return 10
    case .dataCollectionImuOnError: return 11
    case .dataCollectionImuOffError: return 12
    case .dataCollectionMkdirError: return 13
    case .dataCollectionChdirError: return 14
    case .dataCollectionOpendirError: return 15
    case .dataCollectionReaddirError: return 16
    case .dataCollectionGetcwdError: return 17
    case .dataCollectionFopenError: return 18
    case .dataCollectionFwriteError: return 19
    case .dataCollectionFreadError: return 20
    case .dataCollectionFseekError: return 21
    case .dataCollectionFunlinkError: return 22
    case .dataCollectionFgetfreeError: return 23
    case .dataCollectionBadFileFormat: return 24
    case .dataCollectionPbencodeError: return 25
    case .dataCollectionPbdecodeError: return 26
    case .dataCollectionRawTxError: return 27
    case .dataCollectionGearSetCallbackError: return 28
    case .dataCollectionAppSchedEvent: return 29
    case .dataCollectionUnknown: return 30
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_DataCollectionStatus: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_DataCollectionMode: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case streaming // = 0
  case store // = 1
  case storeForward // = 2

  init() {
    self = .streaming
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .streaming
    case 1: self = .store
    case 2: self = .storeForward
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .streaming: return 0
    case .store: return 1
    case .storeForward: return 2
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_DataCollectionMode: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_ImuFilterMode: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case imuFilterOsr4 // = 0
  case imuFilterOsr2 // = 1
  case imuFilterNormal // = 2

  init() {
    self = .imuFilterOsr4
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .imuFilterOsr4
    case 1: self = .imuFilterOsr2
    case 2: self = .imuFilterNormal
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .imuFilterOsr4: return 0
    case .imuFilterOsr2: return 1
    case .imuFilterNormal: return 2
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_ImuFilterMode: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_ImuAccelSampleRate: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case accelOdr078Hz // = 0
  case accelOdr156Hz // = 1
  case accelOdr312Hz // = 2
  case accelOdr625Hz // = 3
  case accelOdr125Hz // = 4
  case accelOdr25Hz // = 5
  case accelOdr50Hz // = 6
  case accelOdr100Hz // = 7
  case accelOdr200Hz // = 8
  case accelOdr400Hz // = 9
  case accelOdr800Hz // = 10
  case accelOdr1600Hz // = 11

  init() {
    self = .accelOdr078Hz
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .accelOdr078Hz
    case 1: self = .accelOdr156Hz
    case 2: self = .accelOdr312Hz
    case 3: self = .accelOdr625Hz
    case 4: self = .accelOdr125Hz
    case 5: self = .accelOdr25Hz
    case 6: self = .accelOdr50Hz
    case 7: self = .accelOdr100Hz
    case 8: self = .accelOdr200Hz
    case 9: self = .accelOdr400Hz
    case 10: self = .accelOdr800Hz
    case 11: self = .accelOdr1600Hz
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .accelOdr078Hz: return 0
    case .accelOdr156Hz: return 1
    case .accelOdr312Hz: return 2
    case .accelOdr625Hz: return 3
    case .accelOdr125Hz: return 4
    case .accelOdr25Hz: return 5
    case .accelOdr50Hz: return 6
    case .accelOdr100Hz: return 7
    case .accelOdr200Hz: return 8
    case .accelOdr400Hz: return 9
    case .accelOdr800Hz: return 10
    case .accelOdr1600Hz: return 11
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_ImuAccelSampleRate: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_ImuGyroSampleRate: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case gyroOdr25Hz // = 0
  case gyroOdr50Hz // = 1
  case gyroOdr100Hz // = 2
  case gyroOdr200Hz // = 3
  case gyroOdr400Hz // = 4
  case gyroOdr800Hz // = 5
  case gyroOdr1600Hz // = 6
  case gyroOdr3200Hz // = 7

  init() {
    self = .gyroOdr25Hz
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .gyroOdr25Hz
    case 1: self = .gyroOdr50Hz
    case 2: self = .gyroOdr100Hz
    case 3: self = .gyroOdr200Hz
    case 4: self = .gyroOdr400Hz
    case 5: self = .gyroOdr800Hz
    case 6: self = .gyroOdr1600Hz
    case 7: self = .gyroOdr3200Hz
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .gyroOdr25Hz: return 0
    case .gyroOdr50Hz: return 1
    case .gyroOdr100Hz: return 2
    case .gyroOdr200Hz: return 3
    case .gyroOdr400Hz: return 4
    case .gyroOdr800Hz: return 5
    case .gyroOdr1600Hz: return 6
    case .gyroOdr3200Hz: return 7
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_ImuGyroSampleRate: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_ImuAccelRange: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case imuAccelRange2G // = 0
  case imuAccelRange4G // = 1
  case imuAccelRange8G // = 2
  case imuAccelRange16G // = 3

  init() {
    self = .imuAccelRange2G
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .imuAccelRange2G
    case 1: self = .imuAccelRange4G
    case 2: self = .imuAccelRange8G
    case 3: self = .imuAccelRange16G
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .imuAccelRange2G: return 0
    case .imuAccelRange4G: return 1
    case .imuAccelRange8G: return 2
    case .imuAccelRange16G: return 3
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_ImuAccelRange: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_ImuGyroRange: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case imuGyroRange125Dps // = 0
  case imuGyroRange250Dps // = 1
  case imuGyroRange500Dps // = 2
  case imuGyroRange1000Dps // = 3
  case imuGyroRange2000Dps // = 4

  init() {
    self = .imuGyroRange125Dps
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .imuGyroRange125Dps
    case 1: self = .imuGyroRange250Dps
    case 2: self = .imuGyroRange500Dps
    case 3: self = .imuGyroRange1000Dps
    case 4: self = .imuGyroRange2000Dps
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .imuGyroRange125Dps: return 0
    case .imuGyroRange250Dps: return 1
    case .imuGyroRange500Dps: return 2
    case .imuGyroRange1000Dps: return 3
    case .imuGyroRange2000Dps: return 4
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_ImuGyroRange: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_WomGearPowerControlPolicy: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case womMaintainGearPowerAsIs // = 0
  case womMaintainGearPowerAtLowPowerMode // = 1
  case womTurnOffGearPowerCompletely // = 2

  init() {
    self = .womMaintainGearPowerAsIs
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .womMaintainGearPowerAsIs
    case 1: self = .womMaintainGearPowerAtLowPowerMode
    case 2: self = .womTurnOffGearPowerCompletely
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .womMaintainGearPowerAsIs: return 0
    case .womMaintainGearPowerAtLowPowerMode: return 1
    case .womTurnOffGearPowerCompletely: return 2
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_WomGearPowerControlPolicy: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_WomBleConnectionPolicy: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case womMaintainBleConnectionAsIs // = 0
  case womMaintainBleConnectionAtLowPowerMode // = 1
  case womTurnOffBleCompletely // = 2

  init() {
    self = .womMaintainBleConnectionAsIs
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .womMaintainBleConnectionAsIs
    case 1: self = .womMaintainBleConnectionAtLowPowerMode
    case 2: self = .womTurnOffBleCompletely
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .womMaintainBleConnectionAsIs: return 0
    case .womMaintainBleConnectionAtLowPowerMode: return 1
    case .womTurnOffBleCompletely: return 2
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_WomBleConnectionPolicy: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum Google_Jacquard_Protocol_ChargingStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case charging // = 1
  case notCharging // = 2

  init() {
    self = .charging
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .charging
    case 2: self = .notCharging
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .charging: return 1
    case .notCharging: return 2
    }
  }

}

#if swift(>=4.2)

extension Google_Jacquard_Protocol_ChargingStatus: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct Google_Jacquard_Protocol_Request: SwiftProtobuf.ExtensibleMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var domain: Google_Jacquard_Protocol_Domain {
    get {return _domain ?? .base}
    set {_domain = newValue}
  }
  /// Returns true if `domain` has been explicitly set.
  var hasDomain: Bool {return self._domain != nil}
  /// Clears the value of `domain`. Subsequent reads from it will return its default value.
  mutating func clearDomain() {self._domain = nil}

  var opcode: Google_Jacquard_Protocol_Opcode {
    get {return _opcode ?? .supported}
    set {_opcode = newValue}
  }
  /// Returns true if `opcode` has been explicitly set.
  var hasOpcode: Bool {return self._opcode != nil}
  /// Clears the value of `opcode`. Subsequent reads from it will return its default value.
  mutating func clearOpcode() {self._opcode = nil}

  var id: UInt32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var componentID: UInt32 {
    get {return _componentID ?? 0}
    set {_componentID = newValue}
  }
  /// Returns true if `componentID` has been explicitly set.
  var hasComponentID: Bool {return self._componentID != nil}
  /// Clears the value of `componentID`. Subsequent reads from it will return its default value.
  mutating func clearComponentID() {self._componentID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _domain: Google_Jacquard_Protocol_Domain? = nil
  fileprivate var _opcode: Google_Jacquard_Protocol_Opcode? = nil
  fileprivate var _id: UInt32? = nil
  fileprivate var _componentID: UInt32? = nil
}

struct Google_Jacquard_Protocol_Response: SwiftProtobuf.ExtensibleMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var status: Google_Jacquard_Protocol_Status {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var componentID: UInt32 {
    get {return _componentID ?? 0}
    set {_componentID = newValue}
  }
  /// Returns true if `componentID` has been explicitly set.
  var hasComponentID: Bool {return self._componentID != nil}
  /// Clears the value of `componentID`. Subsequent reads from it will return its default value.
  mutating func clearComponentID() {self._componentID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _id: UInt32? = nil
  fileprivate var _status: Google_Jacquard_Protocol_Status? = nil
  fileprivate var _componentID: UInt32? = nil
}

struct Google_Jacquard_Protocol_Notification: SwiftProtobuf.ExtensibleMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var domain: Google_Jacquard_Protocol_Domain {
    get {return _domain ?? .base}
    set {_domain = newValue}
  }
  /// Returns true if `domain` has been explicitly set.
  var hasDomain: Bool {return self._domain != nil}
  /// Clears the value of `domain`. Subsequent reads from it will return its default value.
  mutating func clearDomain() {self._domain = nil}

  var opcode: Google_Jacquard_Protocol_Opcode {
    get {return _opcode ?? .supported}
    set {_opcode = newValue}
  }
  /// Returns true if `opcode` has been explicitly set.
  var hasOpcode: Bool {return self._opcode != nil}
  /// Clears the value of `opcode`. Subsequent reads from it will return its default value.
  mutating func clearOpcode() {self._opcode = nil}

  var componentID: UInt32 {
    get {return _componentID ?? 0}
    set {_componentID = newValue}
  }
  /// Returns true if `componentID` has been explicitly set.
  var hasComponentID: Bool {return self._componentID != nil}
  /// Clears the value of `componentID`. Subsequent reads from it will return its default value.
  mutating func clearComponentID() {self._componentID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _domain: Google_Jacquard_Protocol_Domain? = nil
  fileprivate var _opcode: Google_Jacquard_Protocol_Opcode? = nil
  fileprivate var _componentID: UInt32? = nil
}

struct Google_Jacquard_Protocol_SupportedRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var opcode: Google_Jacquard_Protocol_Opcode {
    get {return _opcode ?? .supported}
    set {_opcode = newValue}
  }
  /// Returns true if `opcode` has been explicitly set.
  var hasOpcode: Bool {return self._opcode != nil}
  /// Clears the value of `opcode`. Subsequent reads from it will return its default value.
  mutating func clearOpcode() {self._opcode = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _opcode: Google_Jacquard_Protocol_Opcode? = nil
}

struct Google_Jacquard_Protocol_DeviceInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var component: UInt32 {
    get {return _component ?? 0}
    set {_component = newValue}
  }
  /// Returns true if `component` has been explicitly set.
  var hasComponent: Bool {return self._component != nil}
  /// Clears the value of `component`. Subsequent reads from it will return its default value.
  mutating func clearComponent() {self._component = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _component: UInt32? = nil
}

struct Google_Jacquard_Protocol_DeviceInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var vendor: String {
    get {return _vendor ?? String()}
    set {_vendor = newValue}
  }
  /// Returns true if `vendor` has been explicitly set.
  var hasVendor: Bool {return self._vendor != nil}
  /// Clears the value of `vendor`. Subsequent reads from it will return its default value.
  mutating func clearVendor() {self._vendor = nil}

  var model: String {
    get {return _model ?? String()}
    set {_model = newValue}
  }
  /// Returns true if `model` has been explicitly set.
  var hasModel: Bool {return self._model != nil}
  /// Clears the value of `model`. Subsequent reads from it will return its default value.
  mutating func clearModel() {self._model = nil}

  var revision: UInt32 {
    get {return _revision ?? 1}
    set {_revision = newValue}
  }
  /// Returns true if `revision` has been explicitly set.
  var hasRevision: Bool {return self._revision != nil}
  /// Clears the value of `revision`. Subsequent reads from it will return its default value.
  mutating func clearRevision() {self._revision = nil}

  var uuid: String {
    get {return _uuid ?? String()}
    set {_uuid = newValue}
  }
  /// Returns true if `uuid` has been explicitly set.
  var hasUuid: Bool {return self._uuid != nil}
  /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
  mutating func clearUuid() {self._uuid = nil}

  var firmwareMajor: UInt32 {
    get {return _firmwareMajor ?? 0}
    set {_firmwareMajor = newValue}
  }
  /// Returns true if `firmwareMajor` has been explicitly set.
  var hasFirmwareMajor: Bool {return self._firmwareMajor != nil}
  /// Clears the value of `firmwareMajor`. Subsequent reads from it will return its default value.
  mutating func clearFirmwareMajor() {self._firmwareMajor = nil}

  var firmwareMinor: UInt32 {
    get {return _firmwareMinor ?? 0}
    set {_firmwareMinor = newValue}
  }
  /// Returns true if `firmwareMinor` has been explicitly set.
  var hasFirmwareMinor: Bool {return self._firmwareMinor != nil}
  /// Clears the value of `firmwareMinor`. Subsequent reads from it will return its default value.
  mutating func clearFirmwareMinor() {self._firmwareMinor = nil}

  var firmwarePoint: UInt32 {
    get {return _firmwarePoint ?? 0}
    set {_firmwarePoint = newValue}
  }
  /// Returns true if `firmwarePoint` has been explicitly set.
  var hasFirmwarePoint: Bool {return self._firmwarePoint != nil}
  /// Clears the value of `firmwarePoint`. Subsequent reads from it will return its default value.
  mutating func clearFirmwarePoint() {self._firmwarePoint = nil}

  var bootloaderMajor: UInt32 {
    get {return _bootloaderMajor ?? 0}
    set {_bootloaderMajor = newValue}
  }
  /// Returns true if `bootloaderMajor` has been explicitly set.
  var hasBootloaderMajor: Bool {return self._bootloaderMajor != nil}
  /// Clears the value of `bootloaderMajor`. Subsequent reads from it will return its default value.
  mutating func clearBootloaderMajor() {self._bootloaderMajor = nil}

  var bootloaderMinor: UInt32 {
    get {return _bootloaderMinor ?? 0}
    set {_bootloaderMinor = newValue}
  }
  /// Returns true if `bootloaderMinor` has been explicitly set.
  var hasBootloaderMinor: Bool {return self._bootloaderMinor != nil}
  /// Clears the value of `bootloaderMinor`. Subsequent reads from it will return its default value.
  mutating func clearBootloaderMinor() {self._bootloaderMinor = nil}

  var bootloaderPoint: UInt32 {
    get {return _bootloaderPoint ?? 0}
    set {_bootloaderPoint = newValue}
  }
  /// Returns true if `bootloaderPoint` has been explicitly set.
  var hasBootloaderPoint: Bool {return self._bootloaderPoint != nil}
  /// Clears the value of `bootloaderPoint`. Subsequent reads from it will return its default value.
  mutating func clearBootloaderPoint() {self._bootloaderPoint = nil}

  var vendorID: UInt32 {
    get {return _vendorID ?? 0}
    set {_vendorID = newValue}
  }
  /// Returns true if `vendorID` has been explicitly set.
  var hasVendorID: Bool {return self._vendorID != nil}
  /// Clears the value of `vendorID`. Subsequent reads from it will return its default value.
  mutating func clearVendorID() {self._vendorID = nil}

  var productID: UInt32 {
    get {return _productID ?? 0}
    set {_productID = newValue}
  }
  /// Returns true if `productID` has been explicitly set.
  var hasProductID: Bool {return self._productID != nil}
  /// Clears the value of `productID`. Subsequent reads from it will return its default value.
  mutating func clearProductID() {self._productID = nil}

  var gearID: String {
    get {return _gearID ?? String()}
    set {_gearID = newValue}
  }
  /// Returns true if `gearID` has been explicitly set.
  var hasGearID: Bool {return self._gearID != nil}
  /// Clears the value of `gearID`. Subsequent reads from it will return its default value.
  mutating func clearGearID() {self._gearID = nil}

  var skuID: String {
    get {return _skuID ?? String()}
    set {_skuID = newValue}
  }
  /// Returns true if `skuID` has been explicitly set.
  var hasSkuID: Bool {return self._skuID != nil}
  /// Clears the value of `skuID`. Subsequent reads from it will return its default value.
  mutating func clearSkuID() {self._skuID = nil}

  var mlVersion: String {
    get {return _mlVersion ?? String()}
    set {_mlVersion = newValue}
  }
  /// Returns true if `mlVersion` has been explicitly set.
  var hasMlVersion: Bool {return self._mlVersion != nil}
  /// Clears the value of `mlVersion`. Subsequent reads from it will return its default value.
  mutating func clearMlVersion() {self._mlVersion = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _vendor: String? = nil
  fileprivate var _model: String? = nil
  fileprivate var _revision: UInt32? = nil
  fileprivate var _uuid: String? = nil
  fileprivate var _firmwareMajor: UInt32? = nil
  fileprivate var _firmwareMinor: UInt32? = nil
  fileprivate var _firmwarePoint: UInt32? = nil
  fileprivate var _bootloaderMajor: UInt32? = nil
  fileprivate var _bootloaderMinor: UInt32? = nil
  fileprivate var _bootloaderPoint: UInt32? = nil
  fileprivate var _vendorID: UInt32? = nil
  fileprivate var _productID: UInt32? = nil
  fileprivate var _gearID: String? = nil
  fileprivate var _skuID: String? = nil
  fileprivate var _mlVersion: String? = nil
}

struct Google_Jacquard_Protocol_Color {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var red: UInt32 {
    get {return _red ?? 0}
    set {_red = newValue}
  }
  /// Returns true if `red` has been explicitly set.
  var hasRed: Bool {return self._red != nil}
  /// Clears the value of `red`. Subsequent reads from it will return its default value.
  mutating func clearRed() {self._red = nil}

  var green: UInt32 {
    get {return _green ?? 0}
    set {_green = newValue}
  }
  /// Returns true if `green` has been explicitly set.
  var hasGreen: Bool {return self._green != nil}
  /// Clears the value of `green`. Subsequent reads from it will return its default value.
  mutating func clearGreen() {self._green = nil}

  var blue: UInt32 {
    get {return _blue ?? 0}
    set {_blue = newValue}
  }
  /// Returns true if `blue` has been explicitly set.
  var hasBlue: Bool {return self._blue != nil}
  /// Clears the value of `blue`. Subsequent reads from it will return its default value.
  mutating func clearBlue() {self._blue = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _red: UInt32? = nil
  fileprivate var _green: UInt32? = nil
  fileprivate var _blue: UInt32? = nil
}

struct Google_Jacquard_Protocol_LedPatternFrames {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var color: Google_Jacquard_Protocol_Color {
    get {return _color ?? Google_Jacquard_Protocol_Color()}
    set {_color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  var hasColor: Bool {return self._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  mutating func clearColor() {self._color = nil}

  var lengthMs: UInt32 {
    get {return _lengthMs ?? 0}
    set {_lengthMs = newValue}
  }
  /// Returns true if `lengthMs` has been explicitly set.
  var hasLengthMs: Bool {return self._lengthMs != nil}
  /// Clears the value of `lengthMs`. Subsequent reads from it will return its default value.
  mutating func clearLengthMs() {self._lengthMs = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _color: Google_Jacquard_Protocol_Color? = nil
  fileprivate var _lengthMs: UInt32? = nil
}

struct Google_Jacquard_Protocol_LedPatternRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var patternUid: UInt32 {
    get {return _patternUid ?? 0}
    set {_patternUid = newValue}
  }
  /// Returns true if `patternUid` has been explicitly set.
  var hasPatternUid: Bool {return self._patternUid != nil}
  /// Clears the value of `patternUid`. Subsequent reads from it will return its default value.
  mutating func clearPatternUid() {self._patternUid = nil}

  var patternType: Google_Jacquard_Protocol_PatternType {
    get {return _patternType ?? .none}
    set {_patternType = newValue}
  }
  /// Returns true if `patternType` has been explicitly set.
  var hasPatternType: Bool {return self._patternType != nil}
  /// Clears the value of `patternType`. Subsequent reads from it will return its default value.
  mutating func clearPatternType() {self._patternType = nil}

  var frames: [Google_Jacquard_Protocol_LedPatternFrames] = []

  var pauseBetweenCyclesMs: UInt32 {
    get {return _pauseBetweenCyclesMs ?? 0}
    set {_pauseBetweenCyclesMs = newValue}
  }
  /// Returns true if `pauseBetweenCyclesMs` has been explicitly set.
  var hasPauseBetweenCyclesMs: Bool {return self._pauseBetweenCyclesMs != nil}
  /// Clears the value of `pauseBetweenCyclesMs`. Subsequent reads from it will return its default value.
  mutating func clearPauseBetweenCyclesMs() {self._pauseBetweenCyclesMs = nil}

  var durationMs: UInt32 {
    get {return _durationMs ?? 0}
    set {_durationMs = newValue}
  }
  /// Returns true if `durationMs` has been explicitly set.
  var hasDurationMs: Bool {return self._durationMs != nil}
  /// Clears the value of `durationMs`. Subsequent reads from it will return its default value.
  mutating func clearDurationMs() {self._durationMs = nil}

  var intensityLevel: UInt32 {
    get {return _intensityLevel ?? 0}
    set {_intensityLevel = newValue}
  }
  /// Returns true if `intensityLevel` has been explicitly set.
  var hasIntensityLevel: Bool {return self._intensityLevel != nil}
  /// Clears the value of `intensityLevel`. Subsequent reads from it will return its default value.
  mutating func clearIntensityLevel() {self._intensityLevel = nil}

  var priorityLevel: UInt32 {
    get {return _priorityLevel ?? 0}
    set {_priorityLevel = newValue}
  }
  /// Returns true if `priorityLevel` has been explicitly set.
  var hasPriorityLevel: Bool {return self._priorityLevel != nil}
  /// Clears the value of `priorityLevel`. Subsequent reads from it will return its default value.
  mutating func clearPriorityLevel() {self._priorityLevel = nil}

  var playPauseToggle: Google_Jacquard_Protocol_PatternPlayType {
    get {return _playPauseToggle ?? .play}
    set {_playPauseToggle = newValue}
  }
  /// Returns true if `playPauseToggle` has been explicitly set.
  var hasPlayPauseToggle: Bool {return self._playPauseToggle != nil}
  /// Clears the value of `playPauseToggle`. Subsequent reads from it will return its default value.
  mutating func clearPlayPauseToggle() {self._playPauseToggle = nil}

  var resumable: Bool {
    get {return _resumable ?? false}
    set {_resumable = newValue}
  }
  /// Returns true if `resumable` has been explicitly set.
  var hasResumable: Bool {return self._resumable != nil}
  /// Clears the value of `resumable`. Subsequent reads from it will return its default value.
  mutating func clearResumable() {self._resumable = nil}

  var haltAll: Bool {
    get {return _haltAll ?? false}
    set {_haltAll = newValue}
  }
  /// Returns true if `haltAll` has been explicitly set.
  var hasHaltAll: Bool {return self._haltAll != nil}
  /// Clears the value of `haltAll`. Subsequent reads from it will return its default value.
  mutating func clearHaltAll() {self._haltAll = nil}

  var numberOfCycles: UInt32 {
    get {return _numberOfCycles ?? 0}
    set {_numberOfCycles = newValue}
  }
  /// Returns true if `numberOfCycles` has been explicitly set.
  var hasNumberOfCycles: Bool {return self._numberOfCycles != nil}
  /// Clears the value of `numberOfCycles`. Subsequent reads from it will return its default value.
  mutating func clearNumberOfCycles() {self._numberOfCycles = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _patternUid: UInt32? = nil
  fileprivate var _patternType: Google_Jacquard_Protocol_PatternType? = nil
  fileprivate var _pauseBetweenCyclesMs: UInt32? = nil
  fileprivate var _durationMs: UInt32? = nil
  fileprivate var _intensityLevel: UInt32? = nil
  fileprivate var _priorityLevel: UInt32? = nil
  fileprivate var _playPauseToggle: Google_Jacquard_Protocol_PatternPlayType? = nil
  fileprivate var _resumable: Bool? = nil
  fileprivate var _haltAll: Bool? = nil
  fileprivate var _numberOfCycles: UInt32? = nil
}

struct Google_Jacquard_Protocol_LedPatternNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var patternUid: UInt32 {
    get {return _patternUid ?? 0}
    set {_patternUid = newValue}
  }
  /// Returns true if `patternUid` has been explicitly set.
  var hasPatternUid: Bool {return self._patternUid != nil}
  /// Clears the value of `patternUid`. Subsequent reads from it will return its default value.
  mutating func clearPatternUid() {self._patternUid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _patternUid: UInt32? = nil
}

struct Google_Jacquard_Protocol_ConfigElement {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: String {
    get {return _key ?? String()}
    set {_key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  mutating func clearKey() {self._key = nil}

  var boolVal: Bool {
    get {return _boolVal ?? false}
    set {_boolVal = newValue}
  }
  /// Returns true if `boolVal` has been explicitly set.
  var hasBoolVal: Bool {return self._boolVal != nil}
  /// Clears the value of `boolVal`. Subsequent reads from it will return its default value.
  mutating func clearBoolVal() {self._boolVal = nil}

  var uint32Val: UInt32 {
    get {return _uint32Val ?? 0}
    set {_uint32Val = newValue}
  }
  /// Returns true if `uint32Val` has been explicitly set.
  var hasUint32Val: Bool {return self._uint32Val != nil}
  /// Clears the value of `uint32Val`. Subsequent reads from it will return its default value.
  mutating func clearUint32Val() {self._uint32Val = nil}

  var uint64Val: UInt64 {
    get {return _uint64Val ?? 0}
    set {_uint64Val = newValue}
  }
  /// Returns true if `uint64Val` has been explicitly set.
  var hasUint64Val: Bool {return self._uint64Val != nil}
  /// Clears the value of `uint64Val`. Subsequent reads from it will return its default value.
  mutating func clearUint64Val() {self._uint64Val = nil}

  var int32Val: Int32 {
    get {return _int32Val ?? 0}
    set {_int32Val = newValue}
  }
  /// Returns true if `int32Val` has been explicitly set.
  var hasInt32Val: Bool {return self._int32Val != nil}
  /// Clears the value of `int32Val`. Subsequent reads from it will return its default value.
  mutating func clearInt32Val() {self._int32Val = nil}

  var int64Val: Int64 {
    get {return _int64Val ?? 0}
    set {_int64Val = newValue}
  }
  /// Returns true if `int64Val` has been explicitly set.
  var hasInt64Val: Bool {return self._int64Val != nil}
  /// Clears the value of `int64Val`. Subsequent reads from it will return its default value.
  mutating func clearInt64Val() {self._int64Val = nil}

  var floatVal: Float {
    get {return _floatVal ?? 0}
    set {_floatVal = newValue}
  }
  /// Returns true if `floatVal` has been explicitly set.
  var hasFloatVal: Bool {return self._floatVal != nil}
  /// Clears the value of `floatVal`. Subsequent reads from it will return its default value.
  mutating func clearFloatVal() {self._floatVal = nil}

  var doubleVal: Double {
    get {return _doubleVal ?? 0}
    set {_doubleVal = newValue}
  }
  /// Returns true if `doubleVal` has been explicitly set.
  var hasDoubleVal: Bool {return self._doubleVal != nil}
  /// Clears the value of `doubleVal`. Subsequent reads from it will return its default value.
  mutating func clearDoubleVal() {self._doubleVal = nil}

  var stringVal: String {
    get {return _stringVal ?? String()}
    set {_stringVal = newValue}
  }
  /// Returns true if `stringVal` has been explicitly set.
  var hasStringVal: Bool {return self._stringVal != nil}
  /// Clears the value of `stringVal`. Subsequent reads from it will return its default value.
  mutating func clearStringVal() {self._stringVal = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _key: String? = nil
  fileprivate var _boolVal: Bool? = nil
  fileprivate var _uint32Val: UInt32? = nil
  fileprivate var _uint64Val: UInt64? = nil
  fileprivate var _int32Val: Int32? = nil
  fileprivate var _int64Val: Int64? = nil
  fileprivate var _floatVal: Float? = nil
  fileprivate var _doubleVal: Double? = nil
  fileprivate var _stringVal: String? = nil
}

struct Google_Jacquard_Protocol_ConfigSetRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var vid: UInt32 {
    get {return _vid ?? 0}
    set {_vid = newValue}
  }
  /// Returns true if `vid` has been explicitly set.
  var hasVid: Bool {return self._vid != nil}
  /// Clears the value of `vid`. Subsequent reads from it will return its default value.
  mutating func clearVid() {self._vid = nil}

  var pid: UInt32 {
    get {return _pid ?? 0}
    set {_pid = newValue}
  }
  /// Returns true if `pid` has been explicitly set.
  var hasPid: Bool {return self._pid != nil}
  /// Clears the value of `pid`. Subsequent reads from it will return its default value.
  mutating func clearPid() {self._pid = nil}

  var config: Google_Jacquard_Protocol_ConfigElement {
    get {return _config ?? Google_Jacquard_Protocol_ConfigElement()}
    set {_config = newValue}
  }
  /// Returns true if `config` has been explicitly set.
  var hasConfig: Bool {return self._config != nil}
  /// Clears the value of `config`. Subsequent reads from it will return its default value.
  mutating func clearConfig() {self._config = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _vid: UInt32? = nil
  fileprivate var _pid: UInt32? = nil
  fileprivate var _config: Google_Jacquard_Protocol_ConfigElement? = nil
}

struct Google_Jacquard_Protocol_ConfigGetRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var vid: UInt32 {
    get {return _vid ?? 0}
    set {_vid = newValue}
  }
  /// Returns true if `vid` has been explicitly set.
  var hasVid: Bool {return self._vid != nil}
  /// Clears the value of `vid`. Subsequent reads from it will return its default value.
  mutating func clearVid() {self._vid = nil}

  var pid: UInt32 {
    get {return _pid ?? 0}
    set {_pid = newValue}
  }
  /// Returns true if `pid` has been explicitly set.
  var hasPid: Bool {return self._pid != nil}
  /// Clears the value of `pid`. Subsequent reads from it will return its default value.
  mutating func clearPid() {self._pid = nil}

  var key: String {
    get {return _key ?? String()}
    set {_key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  mutating func clearKey() {self._key = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _vid: UInt32? = nil
  fileprivate var _pid: UInt32? = nil
  fileprivate var _key: String? = nil
}

struct Google_Jacquard_Protocol_ConfigGetResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var config: Google_Jacquard_Protocol_ConfigElement {
    get {return _config ?? Google_Jacquard_Protocol_ConfigElement()}
    set {_config = newValue}
  }
  /// Returns true if `config` has been explicitly set.
  var hasConfig: Bool {return self._config != nil}
  /// Clears the value of `config`. Subsequent reads from it will return its default value.
  mutating func clearConfig() {self._config = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _config: Google_Jacquard_Protocol_ConfigElement? = nil
}

struct Google_Jacquard_Protocol_ConfigGetIndexRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var vid: UInt32 {
    get {return _vid ?? 0}
    set {_vid = newValue}
  }
  /// Returns true if `vid` has been explicitly set.
  var hasVid: Bool {return self._vid != nil}
  /// Clears the value of `vid`. Subsequent reads from it will return its default value.
  mutating func clearVid() {self._vid = nil}

  var pid: UInt32 {
    get {return _pid ?? 0}
    set {_pid = newValue}
  }
  /// Returns true if `pid` has been explicitly set.
  var hasPid: Bool {return self._pid != nil}
  /// Clears the value of `pid`. Subsequent reads from it will return its default value.
  mutating func clearPid() {self._pid = nil}

  var index: UInt32 {
    get {return _index ?? 0}
    set {_index = newValue}
  }
  /// Returns true if `index` has been explicitly set.
  var hasIndex: Bool {return self._index != nil}
  /// Clears the value of `index`. Subsequent reads from it will return its default value.
  mutating func clearIndex() {self._index = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _vid: UInt32? = nil
  fileprivate var _pid: UInt32? = nil
  fileprivate var _index: UInt32? = nil
}

struct Google_Jacquard_Protocol_HapticSymbol {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var onMs: UInt32 {
    get {return _onMs ?? 0}
    set {_onMs = newValue}
  }
  /// Returns true if `onMs` has been explicitly set.
  var hasOnMs: Bool {return self._onMs != nil}
  /// Clears the value of `onMs`. Subsequent reads from it will return its default value.
  mutating func clearOnMs() {self._onMs = nil}

  var offMs: UInt32 {
    get {return _offMs ?? 0}
    set {_offMs = newValue}
  }
  /// Returns true if `offMs` has been explicitly set.
  var hasOffMs: Bool {return self._offMs != nil}
  /// Clears the value of `offMs`. Subsequent reads from it will return its default value.
  mutating func clearOffMs() {self._offMs = nil}

  var pattern: Google_Jacquard_Protocol_HapticSymbolType {
    get {return _pattern ?? .hapticSymbolHalted}
    set {_pattern = newValue}
  }
  /// Returns true if `pattern` has been explicitly set.
  var hasPattern: Bool {return self._pattern != nil}
  /// Clears the value of `pattern`. Subsequent reads from it will return its default value.
  mutating func clearPattern() {self._pattern = nil}

  var maxAmplitudePercent: UInt32 {
    get {return _maxAmplitudePercent ?? 0}
    set {_maxAmplitudePercent = newValue}
  }
  /// Returns true if `maxAmplitudePercent` has been explicitly set.
  var hasMaxAmplitudePercent: Bool {return self._maxAmplitudePercent != nil}
  /// Clears the value of `maxAmplitudePercent`. Subsequent reads from it will return its default value.
  mutating func clearMaxAmplitudePercent() {self._maxAmplitudePercent = nil}

  var repeatNMinusOne: UInt32 {
    get {return _repeatNMinusOne ?? 0}
    set {_repeatNMinusOne = newValue}
  }
  /// Returns true if `repeatNMinusOne` has been explicitly set.
  var hasRepeatNMinusOne: Bool {return self._repeatNMinusOne != nil}
  /// Clears the value of `repeatNMinusOne`. Subsequent reads from it will return its default value.
  mutating func clearRepeatNMinusOne() {self._repeatNMinusOne = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _onMs: UInt32? = nil
  fileprivate var _offMs: UInt32? = nil
  fileprivate var _pattern: Google_Jacquard_Protocol_HapticSymbolType? = nil
  fileprivate var _maxAmplitudePercent: UInt32? = nil
  fileprivate var _repeatNMinusOne: UInt32? = nil
}

struct Google_Jacquard_Protocol_InferenceData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var event: UInt32 {
    get {return _event ?? 0}
    set {_event = newValue}
  }
  /// Returns true if `event` has been explicitly set.
  var hasEvent: Bool {return self._event != nil}
  /// Clears the value of `event`. Subsequent reads from it will return its default value.
  mutating func clearEvent() {self._event = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _event: UInt32? = nil
}

struct Google_Jacquard_Protocol_TouchData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var diffProximity: UInt32 {
    get {return _diffProximity ?? 0}
    set {_diffProximity = newValue}
  }
  /// Returns true if `diffProximity` has been explicitly set.
  var hasDiffProximity: Bool {return self._diffProximity != nil}
  /// Clears the value of `diffProximity`. Subsequent reads from it will return its default value.
  mutating func clearDiffProximity() {self._diffProximity = nil}

  var diffTouch: Data {
    get {return _diffTouch ?? Data()}
    set {_diffTouch = newValue}
  }
  /// Returns true if `diffTouch` has been explicitly set.
  var hasDiffTouch: Bool {return self._diffTouch != nil}
  /// Clears the value of `diffTouch`. Subsequent reads from it will return its default value.
  mutating func clearDiffTouch() {self._diffTouch = nil}

  var inferenceResult: UInt32 {
    get {return _inferenceResult ?? 0}
    set {_inferenceResult = newValue}
  }
  /// Returns true if `inferenceResult` has been explicitly set.
  var hasInferenceResult: Bool {return self._inferenceResult != nil}
  /// Clears the value of `inferenceResult`. Subsequent reads from it will return its default value.
  mutating func clearInferenceResult() {self._inferenceResult = nil}

  var sequence: UInt32 {
    get {return _sequence ?? 0}
    set {_sequence = newValue}
  }
  /// Returns true if `sequence` has been explicitly set.
  var hasSequence: Bool {return self._sequence != nil}
  /// Clears the value of `sequence`. Subsequent reads from it will return its default value.
  mutating func clearSequence() {self._sequence = nil}

  var crc16: UInt32 {
    get {return _crc16 ?? 0}
    set {_crc16 = newValue}
  }
  /// Returns true if `crc16` has been explicitly set.
  var hasCrc16: Bool {return self._crc16 != nil}
  /// Clears the value of `crc16`. Subsequent reads from it will return its default value.
  mutating func clearCrc16() {self._crc16 = nil}

  var confidenceArray: Data {
    get {return _confidenceArray ?? Data()}
    set {_confidenceArray = newValue}
  }
  /// Returns true if `confidenceArray` has been explicitly set.
  var hasConfidenceArray: Bool {return self._confidenceArray != nil}
  /// Clears the value of `confidenceArray`. Subsequent reads from it will return its default value.
  mutating func clearConfidenceArray() {self._confidenceArray = nil}

  var diffDataScaled: Data {
    get {return _diffDataScaled ?? Data()}
    set {_diffDataScaled = newValue}
  }
  /// Returns true if `diffDataScaled` has been explicitly set.
  var hasDiffDataScaled: Bool {return self._diffDataScaled != nil}
  /// Clears the value of `diffDataScaled`. Subsequent reads from it will return its default value.
  mutating func clearDiffDataScaled() {self._diffDataScaled = nil}

  var rawData: Data {
    get {return _rawData ?? Data()}
    set {_rawData = newValue}
  }
  /// Returns true if `rawData` has been explicitly set.
  var hasRawData: Bool {return self._rawData != nil}
  /// Clears the value of `rawData`. Subsequent reads from it will return its default value.
  mutating func clearRawData() {self._rawData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _diffProximity: UInt32? = nil
  fileprivate var _diffTouch: Data? = nil
  fileprivate var _inferenceResult: UInt32? = nil
  fileprivate var _sequence: UInt32? = nil
  fileprivate var _crc16: UInt32? = nil
  fileprivate var _confidenceArray: Data? = nil
  fileprivate var _diffDataScaled: Data? = nil
  fileprivate var _rawData: Data? = nil
}

struct Google_Jacquard_Protocol_TouchWidgetConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var resolution: UInt32 {
    get {return _resolution ?? 0}
    set {_resolution = newValue}
  }
  /// Returns true if `resolution` has been explicitly set.
  var hasResolution: Bool {return self._resolution != nil}
  /// Clears the value of `resolution`. Subsequent reads from it will return its default value.
  mutating func clearResolution() {self._resolution = nil}

  var sensorClkFreqDivisor: UInt32 {
    get {return _sensorClkFreqDivisor ?? 0}
    set {_sensorClkFreqDivisor = newValue}
  }
  /// Returns true if `sensorClkFreqDivisor` has been explicitly set.
  var hasSensorClkFreqDivisor: Bool {return self._sensorClkFreqDivisor != nil}
  /// Clears the value of `sensorClkFreqDivisor`. Subsequent reads from it will return its default value.
  mutating func clearSensorClkFreqDivisor() {self._sensorClkFreqDivisor = nil}

  var idacModValue: UInt32 {
    get {return _idacModValue ?? 0}
    set {_idacModValue = newValue}
  }
  /// Returns true if `idacModValue` has been explicitly set.
  var hasIdacModValue: Bool {return self._idacModValue != nil}
  /// Clears the value of `idacModValue`. Subsequent reads from it will return its default value.
  mutating func clearIdacModValue() {self._idacModValue = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _resolution: UInt32? = nil
  fileprivate var _sensorClkFreqDivisor: UInt32? = nil
  fileprivate var _idacModValue: UInt32? = nil
}

struct Google_Jacquard_Protocol_TouchConfigData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var config: [Google_Jacquard_Protocol_TouchWidgetConfig] = []

  var compensationIdacValues: Data {
    get {return _compensationIdacValues ?? Data()}
    set {_compensationIdacValues = newValue}
  }
  /// Returns true if `compensationIdacValues` has been explicitly set.
  var hasCompensationIdacValues: Bool {return self._compensationIdacValues != nil}
  /// Clears the value of `compensationIdacValues`. Subsequent reads from it will return its default value.
  mutating func clearCompensationIdacValues() {self._compensationIdacValues = nil}

  var modCsdClkDivisor: UInt32 {
    get {return _modCsdClkDivisor ?? 0}
    set {_modCsdClkDivisor = newValue}
  }
  /// Returns true if `modCsdClkDivisor` has been explicitly set.
  var hasModCsdClkDivisor: Bool {return self._modCsdClkDivisor != nil}
  /// Clears the value of `modCsdClkDivisor`. Subsequent reads from it will return its default value.
  mutating func clearModCsdClkDivisor() {self._modCsdClkDivisor = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _compensationIdacValues: Data? = nil
  fileprivate var _modCsdClkDivisor: UInt32? = nil
}

struct Google_Jacquard_Protocol_HWGearRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Google_Jacquard_Protocol_HWGearResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var characteristics: Google_Jacquard_Protocol_GearChar {
    get {return _characteristics ?? Google_Jacquard_Protocol_GearChar()}
    set {_characteristics = newValue}
  }
  /// Returns true if `characteristics` has been explicitly set.
  var hasCharacteristics: Bool {return self._characteristics != nil}
  /// Clears the value of `characteristics`. Subsequent reads from it will return its default value.
  mutating func clearCharacteristics() {self._characteristics = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _characteristics: Google_Jacquard_Protocol_GearChar? = nil
}

struct Google_Jacquard_Protocol_HapticRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var frames: Google_Jacquard_Protocol_HapticSymbol {
    get {return _frames ?? Google_Jacquard_Protocol_HapticSymbol()}
    set {_frames = newValue}
  }
  /// Returns true if `frames` has been explicitly set.
  var hasFrames: Bool {return self._frames != nil}
  /// Clears the value of `frames`. Subsequent reads from it will return its default value.
  mutating func clearFrames() {self._frames = nil}

  var pauseBetweenCyclesMs: UInt32 {
    get {return _pauseBetweenCyclesMs ?? 0}
    set {_pauseBetweenCyclesMs = newValue}
  }
  /// Returns true if `pauseBetweenCyclesMs` has been explicitly set.
  var hasPauseBetweenCyclesMs: Bool {return self._pauseBetweenCyclesMs != nil}
  /// Clears the value of `pauseBetweenCyclesMs`. Subsequent reads from it will return its default value.
  mutating func clearPauseBetweenCyclesMs() {self._pauseBetweenCyclesMs = nil}

  var repeatFullPattern: UInt32 {
    get {return _repeatFullPattern ?? 0}
    set {_repeatFullPattern = newValue}
  }
  /// Returns true if `repeatFullPattern` has been explicitly set.
  var hasRepeatFullPattern: Bool {return self._repeatFullPattern != nil}
  /// Clears the value of `repeatFullPattern`. Subsequent reads from it will return its default value.
  mutating func clearRepeatFullPattern() {self._repeatFullPattern = nil}

  var intensityLevel: UInt32 {
    get {return _intensityLevel ?? 0}
    set {_intensityLevel = newValue}
  }
  /// Returns true if `intensityLevel` has been explicitly set.
  var hasIntensityLevel: Bool {return self._intensityLevel != nil}
  /// Clears the value of `intensityLevel`. Subsequent reads from it will return its default value.
  mutating func clearIntensityLevel() {self._intensityLevel = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _frames: Google_Jacquard_Protocol_HapticSymbol? = nil
  fileprivate var _pauseBetweenCyclesMs: UInt32? = nil
  fileprivate var _repeatFullPattern: UInt32? = nil
  fileprivate var _intensityLevel: UInt32? = nil
}

struct Google_Jacquard_Protocol_HapticResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Google_Jacquard_Protocol_HapticNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Google_Jacquard_Protocol_DataChannelRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var inference: Google_Jacquard_Protocol_DataStreamState {
    get {return _inference ?? .dataStreamDisable}
    set {_inference = newValue}
  }
  /// Returns true if `inference` has been explicitly set.
  var hasInference: Bool {return self._inference != nil}
  /// Clears the value of `inference`. Subsequent reads from it will return its default value.
  mutating func clearInference() {self._inference = nil}

  var touch: Google_Jacquard_Protocol_DataStreamState {
    get {return _touch ?? .dataStreamDisable}
    set {_touch = newValue}
  }
  /// Returns true if `touch` has been explicitly set.
  var hasTouch: Bool {return self._touch != nil}
  /// Clears the value of `touch`. Subsequent reads from it will return its default value.
  mutating func clearTouch() {self._touch = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _inference: Google_Jacquard_Protocol_DataStreamState? = nil
  fileprivate var _touch: Google_Jacquard_Protocol_DataStreamState? = nil
}

struct Google_Jacquard_Protocol_DataChannelResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var inference: Google_Jacquard_Protocol_DataStreamState {
    get {return _inference ?? .dataStreamDisable}
    set {_inference = newValue}
  }
  /// Returns true if `inference` has been explicitly set.
  var hasInference: Bool {return self._inference != nil}
  /// Clears the value of `inference`. Subsequent reads from it will return its default value.
  mutating func clearInference() {self._inference = nil}

  var touch: Google_Jacquard_Protocol_DataStreamState {
    get {return _touch ?? .dataStreamDisable}
    set {_touch = newValue}
  }
  /// Returns true if `touch` has been explicitly set.
  var hasTouch: Bool {return self._touch != nil}
  /// Clears the value of `touch`. Subsequent reads from it will return its default value.
  mutating func clearTouch() {self._touch = nil}

  var touchConfig: Google_Jacquard_Protocol_TouchConfigData {
    get {return _touchConfig ?? Google_Jacquard_Protocol_TouchConfigData()}
    set {_touchConfig = newValue}
  }
  /// Returns true if `touchConfig` has been explicitly set.
  var hasTouchConfig: Bool {return self._touchConfig != nil}
  /// Clears the value of `touchConfig`. Subsequent reads from it will return its default value.
  mutating func clearTouchConfig() {self._touchConfig = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _inference: Google_Jacquard_Protocol_DataStreamState? = nil
  fileprivate var _touch: Google_Jacquard_Protocol_DataStreamState? = nil
  fileprivate var _touchConfig: Google_Jacquard_Protocol_TouchConfigData? = nil
}

struct Google_Jacquard_Protocol_DataChannelNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var inferenceData: Google_Jacquard_Protocol_InferenceData {
    get {return _inferenceData ?? Google_Jacquard_Protocol_InferenceData()}
    set {_inferenceData = newValue}
  }
  /// Returns true if `inferenceData` has been explicitly set.
  var hasInferenceData: Bool {return self._inferenceData != nil}
  /// Clears the value of `inferenceData`. Subsequent reads from it will return its default value.
  mutating func clearInferenceData() {self._inferenceData = nil}

  var touchData: Google_Jacquard_Protocol_TouchData {
    get {return _touchData ?? Google_Jacquard_Protocol_TouchData()}
    set {_touchData = newValue}
  }
  /// Returns true if `touchData` has been explicitly set.
  var hasTouchData: Bool {return self._touchData != nil}
  /// Clears the value of `touchData`. Subsequent reads from it will return its default value.
  mutating func clearTouchData() {self._touchData = nil}

  var timestampTicks: UInt32 {
    get {return _timestampTicks ?? 0}
    set {_timestampTicks = newValue}
  }
  /// Returns true if `timestampTicks` has been explicitly set.
  var hasTimestampTicks: Bool {return self._timestampTicks != nil}
  /// Clears the value of `timestampTicks`. Subsequent reads from it will return its default value.
  mutating func clearTimestampTicks() {self._timestampTicks = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _inferenceData: Google_Jacquard_Protocol_InferenceData? = nil
  fileprivate var _touchData: Google_Jacquard_Protocol_TouchData? = nil
  fileprivate var _timestampTicks: UInt32? = nil
}

struct Google_Jacquard_Protocol_HapticNotificationDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hapticType: Google_Jacquard_Protocol_HapticType {
    get {return _hapticType ?? .halted}
    set {_hapticType = newValue}
  }
  /// Returns true if `hapticType` has been explicitly set.
  var hasHapticType: Bool {return self._hapticType != nil}
  /// Clears the value of `hapticType`. Subsequent reads from it will return its default value.
  mutating func clearHapticType() {self._hapticType = nil}

  var strengthPercent: UInt32 {
    get {return _strengthPercent ?? 0}
    set {_strengthPercent = newValue}
  }
  /// Returns true if `strengthPercent` has been explicitly set.
  var hasStrengthPercent: Bool {return self._strengthPercent != nil}
  /// Clears the value of `strengthPercent`. Subsequent reads from it will return its default value.
  mutating func clearStrengthPercent() {self._strengthPercent = nil}

  var symbolDurationMs: UInt32 {
    get {return _symbolDurationMs ?? 0}
    set {_symbolDurationMs = newValue}
  }
  /// Returns true if `symbolDurationMs` has been explicitly set.
  var hasSymbolDurationMs: Bool {return self._symbolDurationMs != nil}
  /// Clears the value of `symbolDurationMs`. Subsequent reads from it will return its default value.
  mutating func clearSymbolDurationMs() {self._symbolDurationMs = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _hapticType: Google_Jacquard_Protocol_HapticType? = nil
  fileprivate var _strengthPercent: UInt32? = nil
  fileprivate var _symbolDurationMs: UInt32? = nil
}

struct Google_Jacquard_Protocol_VibeMotorChar {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var motorNum: UInt32 {
    get {return _motorNum ?? 0}
    set {_motorNum = newValue}
  }
  /// Returns true if `motorNum` has been explicitly set.
  var hasMotorNum: Bool {return self._motorNum != nil}
  /// Clears the value of `motorNum`. Subsequent reads from it will return its default value.
  mutating func clearMotorNum() {self._motorNum = nil}

  var attachNotification: Google_Jacquard_Protocol_HapticNotificationDetails {
    get {return _attachNotification ?? Google_Jacquard_Protocol_HapticNotificationDetails()}
    set {_attachNotification = newValue}
  }
  /// Returns true if `attachNotification` has been explicitly set.
  var hasAttachNotification: Bool {return self._attachNotification != nil}
  /// Clears the value of `attachNotification`. Subsequent reads from it will return its default value.
  mutating func clearAttachNotification() {self._attachNotification = nil}

  var gestureRecognitionNotification: Google_Jacquard_Protocol_HapticNotificationDetails {
    get {return _gestureRecognitionNotification ?? Google_Jacquard_Protocol_HapticNotificationDetails()}
    set {_gestureRecognitionNotification = newValue}
  }
  /// Returns true if `gestureRecognitionNotification` has been explicitly set.
  var hasGestureRecognitionNotification: Bool {return self._gestureRecognitionNotification != nil}
  /// Clears the value of `gestureRecognitionNotification`. Subsequent reads from it will return its default value.
  mutating func clearGestureRecognitionNotification() {self._gestureRecognitionNotification = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _motorNum: UInt32? = nil
  fileprivate var _attachNotification: Google_Jacquard_Protocol_HapticNotificationDetails? = nil
  fileprivate var _gestureRecognitionNotification: Google_Jacquard_Protocol_HapticNotificationDetails? = nil
}

struct Google_Jacquard_Protocol_CapacitiveTouchpadChar {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var material: Google_Jacquard_Protocol_SKUMaterial {
    get {return _material ?? .ribbon}
    set {_material = newValue}
  }
  /// Returns true if `material` has been explicitly set.
  var hasMaterial: Bool {return self._material != nil}
  /// Clears the value of `material`. Subsequent reads from it will return its default value.
  mutating func clearMaterial() {self._material = nil}

  var pitchMm: UInt32 {
    get {return _pitchMm ?? 0}
    set {_pitchMm = newValue}
  }
  /// Returns true if `pitchMm` has been explicitly set.
  var hasPitchMm: Bool {return self._pitchMm != nil}
  /// Clears the value of `pitchMm`. Subsequent reads from it will return its default value.
  mutating func clearPitchMm() {self._pitchMm = nil}

  var electrodeLinesNum: UInt32 {
    get {return _electrodeLinesNum ?? 0}
    set {_electrodeLinesNum = newValue}
  }
  /// Returns true if `electrodeLinesNum` has been explicitly set.
  var hasElectrodeLinesNum: Bool {return self._electrodeLinesNum != nil}
  /// Clears the value of `electrodeLinesNum`. Subsequent reads from it will return its default value.
  mutating func clearElectrodeLinesNum() {self._electrodeLinesNum = nil}

  var electrodeLinesLengthCm: UInt32 {
    get {return _electrodeLinesLengthCm ?? 0}
    set {_electrodeLinesLengthCm = newValue}
  }
  /// Returns true if `electrodeLinesLengthCm` has been explicitly set.
  var hasElectrodeLinesLengthCm: Bool {return self._electrodeLinesLengthCm != nil}
  /// Clears the value of `electrodeLinesLengthCm`. Subsequent reads from it will return its default value.
  mutating func clearElectrodeLinesLengthCm() {self._electrodeLinesLengthCm = nil}

  var pitchUm: UInt32 {
    get {return _pitchUm ?? 0}
    set {_pitchUm = newValue}
  }
  /// Returns true if `pitchUm` has been explicitly set.
  var hasPitchUm: Bool {return self._pitchUm != nil}
  /// Clears the value of `pitchUm`. Subsequent reads from it will return its default value.
  mutating func clearPitchUm() {self._pitchUm = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _material: Google_Jacquard_Protocol_SKUMaterial? = nil
  fileprivate var _pitchMm: UInt32? = nil
  fileprivate var _electrodeLinesNum: UInt32? = nil
  fileprivate var _electrodeLinesLengthCm: UInt32? = nil
  fileprivate var _pitchUm: UInt32? = nil
}

struct Google_Jacquard_Protocol_LedsArrayChar {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: Google_Jacquard_Protocol_LEDType {
    get {return _type ?? .rgb}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var ledNum: UInt32 {
    get {return _ledNum ?? 0}
    set {_ledNum = newValue}
  }
  /// Returns true if `ledNum` has been explicitly set.
  var hasLedNum: Bool {return self._ledNum != nil}
  /// Clears the value of `ledNum`. Subsequent reads from it will return its default value.
  mutating func clearLedNum() {self._ledNum = nil}

  var format: Google_Jacquard_Protocol_LEDGeometry {
    get {return _format ?? .linear}
    set {_format = newValue}
  }
  /// Returns true if `format` has been explicitly set.
  var hasFormat: Bool {return self._format != nil}
  /// Clears the value of `format`. Subsequent reads from it will return its default value.
  mutating func clearFormat() {self._format = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _type: Google_Jacquard_Protocol_LEDType? = nil
  fileprivate var _ledNum: UInt32? = nil
  fileprivate var _format: Google_Jacquard_Protocol_LEDGeometry? = nil
}

struct Google_Jacquard_Protocol_GearChar {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt32 {
    get {return _storage._id ?? 0}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_uniqueStorage()._id = nil}

  var motor1: Google_Jacquard_Protocol_VibeMotorChar {
    get {return _storage._motor1 ?? Google_Jacquard_Protocol_VibeMotorChar()}
    set {_uniqueStorage()._motor1 = newValue}
  }
  /// Returns true if `motor1` has been explicitly set.
  var hasMotor1: Bool {return _storage._motor1 != nil}
  /// Clears the value of `motor1`. Subsequent reads from it will return its default value.
  mutating func clearMotor1() {_uniqueStorage()._motor1 = nil}

  var motor2: Google_Jacquard_Protocol_VibeMotorChar {
    get {return _storage._motor2 ?? Google_Jacquard_Protocol_VibeMotorChar()}
    set {_uniqueStorage()._motor2 = newValue}
  }
  /// Returns true if `motor2` has been explicitly set.
  var hasMotor2: Bool {return _storage._motor2 != nil}
  /// Clears the value of `motor2`. Subsequent reads from it will return its default value.
  mutating func clearMotor2() {_uniqueStorage()._motor2 = nil}

  var capTouchpad1: Google_Jacquard_Protocol_CapacitiveTouchpadChar {
    get {return _storage._capTouchpad1 ?? Google_Jacquard_Protocol_CapacitiveTouchpadChar()}
    set {_uniqueStorage()._capTouchpad1 = newValue}
  }
  /// Returns true if `capTouchpad1` has been explicitly set.
  var hasCapTouchpad1: Bool {return _storage._capTouchpad1 != nil}
  /// Clears the value of `capTouchpad1`. Subsequent reads from it will return its default value.
  mutating func clearCapTouchpad1() {_uniqueStorage()._capTouchpad1 = nil}

  var capTouchpad2: Google_Jacquard_Protocol_CapacitiveTouchpadChar {
    get {return _storage._capTouchpad2 ?? Google_Jacquard_Protocol_CapacitiveTouchpadChar()}
    set {_uniqueStorage()._capTouchpad2 = newValue}
  }
  /// Returns true if `capTouchpad2` has been explicitly set.
  var hasCapTouchpad2: Bool {return _storage._capTouchpad2 != nil}
  /// Clears the value of `capTouchpad2`. Subsequent reads from it will return its default value.
  mutating func clearCapTouchpad2() {_uniqueStorage()._capTouchpad2 = nil}

  var ledArray1: Google_Jacquard_Protocol_LedsArrayChar {
    get {return _storage._ledArray1 ?? Google_Jacquard_Protocol_LedsArrayChar()}
    set {_uniqueStorage()._ledArray1 = newValue}
  }
  /// Returns true if `ledArray1` has been explicitly set.
  var hasLedArray1: Bool {return _storage._ledArray1 != nil}
  /// Clears the value of `ledArray1`. Subsequent reads from it will return its default value.
  mutating func clearLedArray1() {_uniqueStorage()._ledArray1 = nil}

  var ledArray2: Google_Jacquard_Protocol_LedsArrayChar {
    get {return _storage._ledArray2 ?? Google_Jacquard_Protocol_LedsArrayChar()}
    set {_uniqueStorage()._ledArray2 = newValue}
  }
  /// Returns true if `ledArray2` has been explicitly set.
  var hasLedArray2: Bool {return _storage._ledArray2 != nil}
  /// Clears the value of `ledArray2`. Subsequent reads from it will return its default value.
  mutating func clearLedArray2() {_uniqueStorage()._ledArray2 = nil}

  var connectorType: Google_Jacquard_Protocol_ConnectorType {
    get {return _storage._connectorType ?? .cClip}
    set {_uniqueStorage()._connectorType = newValue}
  }
  /// Returns true if `connectorType` has been explicitly set.
  var hasConnectorType: Bool {return _storage._connectorType != nil}
  /// Clears the value of `connectorType`. Subsequent reads from it will return its default value.
  mutating func clearConnectorType() {_uniqueStorage()._connectorType = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Google_Jacquard_Protocol_HelloResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var protocolMin: UInt32 {
    get {return _protocolMin ?? 0}
    set {_protocolMin = newValue}
  }
  /// Returns true if `protocolMin` has been explicitly set.
  var hasProtocolMin: Bool {return self._protocolMin != nil}
  /// Clears the value of `protocolMin`. Subsequent reads from it will return its default value.
  mutating func clearProtocolMin() {self._protocolMin = nil}

  var protocolMax: UInt32 {
    get {return _protocolMax ?? 0}
    set {_protocolMax = newValue}
  }
  /// Returns true if `protocolMax` has been explicitly set.
  var hasProtocolMax: Bool {return self._protocolMax != nil}
  /// Clears the value of `protocolMax`. Subsequent reads from it will return its default value.
  mutating func clearProtocolMax() {self._protocolMax = nil}

  var vendor: String {
    get {return _vendor ?? String()}
    set {_vendor = newValue}
  }
  /// Returns true if `vendor` has been explicitly set.
  var hasVendor: Bool {return self._vendor != nil}
  /// Clears the value of `vendor`. Subsequent reads from it will return its default value.
  mutating func clearVendor() {self._vendor = nil}

  var model: String {
    get {return _model ?? String()}
    set {_model = newValue}
  }
  /// Returns true if `model` has been explicitly set.
  var hasModel: Bool {return self._model != nil}
  /// Clears the value of `model`. Subsequent reads from it will return its default value.
  mutating func clearModel() {self._model = nil}

  var authChallenge: Data {
    get {return _authChallenge ?? Data()}
    set {_authChallenge = newValue}
  }
  /// Returns true if `authChallenge` has been explicitly set.
  var hasAuthChallenge: Bool {return self._authChallenge != nil}
  /// Clears the value of `authChallenge`. Subsequent reads from it will return its default value.
  mutating func clearAuthChallenge() {self._authChallenge = nil}

  var vendorID: UInt32 {
    get {return _vendorID ?? 0}
    set {_vendorID = newValue}
  }
  /// Returns true if `vendorID` has been explicitly set.
  var hasVendorID: Bool {return self._vendorID != nil}
  /// Clears the value of `vendorID`. Subsequent reads from it will return its default value.
  mutating func clearVendorID() {self._vendorID = nil}

  var productID: UInt32 {
    get {return _productID ?? 0}
    set {_productID = newValue}
  }
  /// Returns true if `productID` has been explicitly set.
  var hasProductID: Bool {return self._productID != nil}
  /// Clears the value of `productID`. Subsequent reads from it will return its default value.
  mutating func clearProductID() {self._productID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _protocolMin: UInt32? = nil
  fileprivate var _protocolMax: UInt32? = nil
  fileprivate var _vendor: String? = nil
  fileprivate var _model: String? = nil
  fileprivate var _authChallenge: Data? = nil
  fileprivate var _vendorID: UInt32? = nil
  fileprivate var _productID: UInt32? = nil
}

struct Google_Jacquard_Protocol_BeginRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var `protocol`: UInt32 {
    get {return _protocol ?? 0}
    set {_protocol = newValue}
  }
  /// Returns true if ``protocol`` has been explicitly set.
  var hasProtocol: Bool {return self._protocol != nil}
  /// Clears the value of ``protocol``. Subsequent reads from it will return its default value.
  mutating func clearProtocol() {self._protocol = nil}

  var authChallenge: Data {
    get {return _authChallenge ?? Data()}
    set {_authChallenge = newValue}
  }
  /// Returns true if `authChallenge` has been explicitly set.
  var hasAuthChallenge: Bool {return self._authChallenge != nil}
  /// Clears the value of `authChallenge`. Subsequent reads from it will return its default value.
  mutating func clearAuthChallenge() {self._authChallenge = nil}

  var authResponse: Data {
    get {return _authResponse ?? Data()}
    set {_authResponse = newValue}
  }
  /// Returns true if `authResponse` has been explicitly set.
  var hasAuthResponse: Bool {return self._authResponse != nil}
  /// Clears the value of `authResponse`. Subsequent reads from it will return its default value.
  mutating func clearAuthResponse() {self._authResponse = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _protocol: UInt32? = nil
  fileprivate var _authChallenge: Data? = nil
  fileprivate var _authResponse: Data? = nil
}

struct Google_Jacquard_Protocol_BeginResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var authResponse: Data {
    get {return _authResponse ?? Data()}
    set {_authResponse = newValue}
  }
  /// Returns true if `authResponse` has been explicitly set.
  var hasAuthResponse: Bool {return self._authResponse != nil}
  /// Clears the value of `authResponse`. Subsequent reads from it will return its default value.
  mutating func clearAuthResponse() {self._authResponse = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _authResponse: Data? = nil
}

struct Google_Jacquard_Protocol_DisconnectNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var reconnect: Bool {
    get {return _reconnect ?? false}
    set {_reconnect = newValue}
  }
  /// Returns true if `reconnect` has been explicitly set.
  var hasReconnect: Bool {return self._reconnect != nil}
  /// Clears the value of `reconnect`. Subsequent reads from it will return its default value.
  mutating func clearReconnect() {self._reconnect = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _reconnect: Bool? = nil
}

struct Google_Jacquard_Protocol_AttachedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var attachState: Bool {
    get {return _attachState ?? false}
    set {_attachState = newValue}
  }
  /// Returns true if `attachState` has been explicitly set.
  var hasAttachState: Bool {return self._attachState != nil}
  /// Clears the value of `attachState`. Subsequent reads from it will return its default value.
  mutating func clearAttachState() {self._attachState = nil}

  var vendorID: UInt32 {
    get {return _vendorID ?? 0}
    set {_vendorID = newValue}
  }
  /// Returns true if `vendorID` has been explicitly set.
  var hasVendorID: Bool {return self._vendorID != nil}
  /// Clears the value of `vendorID`. Subsequent reads from it will return its default value.
  mutating func clearVendorID() {self._vendorID = nil}

  var productID: UInt32 {
    get {return _productID ?? 0}
    set {_productID = newValue}
  }
  /// Returns true if `productID` has been explicitly set.
  var hasProductID: Bool {return self._productID != nil}
  /// Clears the value of `productID`. Subsequent reads from it will return its default value.
  mutating func clearProductID() {self._productID = nil}

  var componentID: UInt32 {
    get {return _componentID ?? 0}
    set {_componentID = newValue}
  }
  /// Returns true if `componentID` has been explicitly set.
  var hasComponentID: Bool {return self._componentID != nil}
  /// Clears the value of `componentID`. Subsequent reads from it will return its default value.
  mutating func clearComponentID() {self._componentID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _attachState: Bool? = nil
  fileprivate var _vendorID: UInt32? = nil
  fileprivate var _productID: UInt32? = nil
  fileprivate var _componentID: UInt32? = nil
}

struct Google_Jacquard_Protocol_ErrorNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var device: UInt32 {
    get {return _device ?? 0}
    set {_device = newValue}
  }
  /// Returns true if `device` has been explicitly set.
  var hasDevice: Bool {return self._device != nil}
  /// Clears the value of `device`. Subsequent reads from it will return its default value.
  mutating func clearDevice() {self._device = nil}

  var subsystem: UInt32 {
    get {return _subsystem ?? 0}
    set {_subsystem = newValue}
  }
  /// Returns true if `subsystem` has been explicitly set.
  var hasSubsystem: Bool {return self._subsystem != nil}
  /// Clears the value of `subsystem`. Subsequent reads from it will return its default value.
  mutating func clearSubsystem() {self._subsystem = nil}

  var errorcode: UInt32 {
    get {return _errorcode ?? 0}
    set {_errorcode = newValue}
  }
  /// Returns true if `errorcode` has been explicitly set.
  var hasErrorcode: Bool {return self._errorcode != nil}
  /// Clears the value of `errorcode`. Subsequent reads from it will return its default value.
  mutating func clearErrorcode() {self._errorcode = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _device: UInt32? = nil
  fileprivate var _subsystem: UInt32? = nil
  fileprivate var _errorcode: UInt32? = nil
}

struct Google_Jacquard_Protocol_DFUStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var vendorID: UInt32 {
    get {return _vendorID ?? 0}
    set {_vendorID = newValue}
  }
  /// Returns true if `vendorID` has been explicitly set.
  var hasVendorID: Bool {return self._vendorID != nil}
  /// Clears the value of `vendorID`. Subsequent reads from it will return its default value.
  mutating func clearVendorID() {self._vendorID = nil}

  var productID: UInt32 {
    get {return _productID ?? 0}
    set {_productID = newValue}
  }
  /// Returns true if `productID` has been explicitly set.
  var hasProductID: Bool {return self._productID != nil}
  /// Clears the value of `productID`. Subsequent reads from it will return its default value.
  mutating func clearProductID() {self._productID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _vendorID: UInt32? = nil
  fileprivate var _productID: UInt32? = nil
}

struct Google_Jacquard_Protocol_DFUStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var component: UInt32 {
    get {return _component ?? 0}
    set {_component = newValue}
  }
  /// Returns true if `component` has been explicitly set.
  var hasComponent: Bool {return self._component != nil}
  /// Clears the value of `component`. Subsequent reads from it will return its default value.
  mutating func clearComponent() {self._component = nil}

  var finalSize: UInt32 {
    get {return _finalSize ?? 0}
    set {_finalSize = newValue}
  }
  /// Returns true if `finalSize` has been explicitly set.
  var hasFinalSize: Bool {return self._finalSize != nil}
  /// Clears the value of `finalSize`. Subsequent reads from it will return its default value.
  mutating func clearFinalSize() {self._finalSize = nil}

  var finalCrc: UInt32 {
    get {return _finalCrc ?? 0}
    set {_finalCrc = newValue}
  }
  /// Returns true if `finalCrc` has been explicitly set.
  var hasFinalCrc: Bool {return self._finalCrc != nil}
  /// Clears the value of `finalCrc`. Subsequent reads from it will return its default value.
  mutating func clearFinalCrc() {self._finalCrc = nil}

  var currentSize: UInt32 {
    get {return _currentSize ?? 0}
    set {_currentSize = newValue}
  }
  /// Returns true if `currentSize` has been explicitly set.
  var hasCurrentSize: Bool {return self._currentSize != nil}
  /// Clears the value of `currentSize`. Subsequent reads from it will return its default value.
  mutating func clearCurrentSize() {self._currentSize = nil}

  var currentCrc: UInt32 {
    get {return _currentCrc ?? 0}
    set {_currentCrc = newValue}
  }
  /// Returns true if `currentCrc` has been explicitly set.
  var hasCurrentCrc: Bool {return self._currentCrc != nil}
  /// Clears the value of `currentCrc`. Subsequent reads from it will return its default value.
  mutating func clearCurrentCrc() {self._currentCrc = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _component: UInt32? = nil
  fileprivate var _finalSize: UInt32? = nil
  fileprivate var _finalCrc: UInt32? = nil
  fileprivate var _currentSize: UInt32? = nil
  fileprivate var _currentCrc: UInt32? = nil
}

struct Google_Jacquard_Protocol_DFUPrepareRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var component: UInt32 {
    get {return _component ?? 0}
    set {_component = newValue}
  }
  /// Returns true if `component` has been explicitly set.
  var hasComponent: Bool {return self._component != nil}
  /// Clears the value of `component`. Subsequent reads from it will return its default value.
  mutating func clearComponent() {self._component = nil}

  var finalSize: UInt32 {
    get {return _finalSize ?? 0}
    set {_finalSize = newValue}
  }
  /// Returns true if `finalSize` has been explicitly set.
  var hasFinalSize: Bool {return self._finalSize != nil}
  /// Clears the value of `finalSize`. Subsequent reads from it will return its default value.
  mutating func clearFinalSize() {self._finalSize = nil}

  var finalCrc: UInt32 {
    get {return _finalCrc ?? 0}
    set {_finalCrc = newValue}
  }
  /// Returns true if `finalCrc` has been explicitly set.
  var hasFinalCrc: Bool {return self._finalCrc != nil}
  /// Clears the value of `finalCrc`. Subsequent reads from it will return its default value.
  mutating func clearFinalCrc() {self._finalCrc = nil}

  var vendorID: UInt32 {
    get {return _vendorID ?? 0}
    set {_vendorID = newValue}
  }
  /// Returns true if `vendorID` has been explicitly set.
  var hasVendorID: Bool {return self._vendorID != nil}
  /// Clears the value of `vendorID`. Subsequent reads from it will return its default value.
  mutating func clearVendorID() {self._vendorID = nil}

  var productID: UInt32 {
    get {return _productID ?? 0}
    set {_productID = newValue}
  }
  /// Returns true if `productID` has been explicitly set.
  var hasProductID: Bool {return self._productID != nil}
  /// Clears the value of `productID`. Subsequent reads from it will return its default value.
  mutating func clearProductID() {self._productID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _component: UInt32? = nil
  fileprivate var _finalSize: UInt32? = nil
  fileprivate var _finalCrc: UInt32? = nil
  fileprivate var _vendorID: UInt32? = nil
  fileprivate var _productID: UInt32? = nil
}

struct Google_Jacquard_Protocol_DFUWriteRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var offset: UInt32 {
    get {return _offset ?? 0}
    set {_offset = newValue}
  }
  /// Returns true if `offset` has been explicitly set.
  var hasOffset: Bool {return self._offset != nil}
  /// Clears the value of `offset`. Subsequent reads from it will return its default value.
  mutating func clearOffset() {self._offset = nil}

  var data: Data {
    get {return _data ?? Data()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  mutating func clearData() {self._data = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _offset: UInt32? = nil
  fileprivate var _data: Data? = nil
}

struct Google_Jacquard_Protocol_DFUWriteResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var offset: UInt32 {
    get {return _offset ?? 0}
    set {_offset = newValue}
  }
  /// Returns true if `offset` has been explicitly set.
  var hasOffset: Bool {return self._offset != nil}
  /// Clears the value of `offset`. Subsequent reads from it will return its default value.
  mutating func clearOffset() {self._offset = nil}

  var crc: UInt32 {
    get {return _crc ?? 0}
    set {_crc = newValue}
  }
  /// Returns true if `crc` has been explicitly set.
  var hasCrc: Bool {return self._crc != nil}
  /// Clears the value of `crc`. Subsequent reads from it will return its default value.
  mutating func clearCrc() {self._crc = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _offset: UInt32? = nil
  fileprivate var _crc: UInt32? = nil
}

struct Google_Jacquard_Protocol_DFUExecuteRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var vendorID: UInt32 {
    get {return _vendorID ?? 0}
    set {_vendorID = newValue}
  }
  /// Returns true if `vendorID` has been explicitly set.
  var hasVendorID: Bool {return self._vendorID != nil}
  /// Clears the value of `vendorID`. Subsequent reads from it will return its default value.
  mutating func clearVendorID() {self._vendorID = nil}

  var productID: UInt32 {
    get {return _productID ?? 0}
    set {_productID = newValue}
  }
  /// Returns true if `productID` has been explicitly set.
  var hasProductID: Bool {return self._productID != nil}
  /// Clears the value of `productID`. Subsequent reads from it will return its default value.
  mutating func clearProductID() {self._productID = nil}

  var updateSched: Google_Jacquard_Protocol_UpdateSchedule {
    get {return _updateSched ?? .updateNow}
    set {_updateSched = newValue}
  }
  /// Returns true if `updateSched` has been explicitly set.
  var hasUpdateSched: Bool {return self._updateSched != nil}
  /// Clears the value of `updateSched`. Subsequent reads from it will return its default value.
  mutating func clearUpdateSched() {self._updateSched = nil}

  var keepFwBinary: Bool {
    get {return _keepFwBinary ?? false}
    set {_keepFwBinary = newValue}
  }
  /// Returns true if `keepFwBinary` has been explicitly set.
  var hasKeepFwBinary: Bool {return self._keepFwBinary != nil}
  /// Clears the value of `keepFwBinary`. Subsequent reads from it will return its default value.
  mutating func clearKeepFwBinary() {self._keepFwBinary = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _vendorID: UInt32? = nil
  fileprivate var _productID: UInt32? = nil
  fileprivate var _updateSched: Google_Jacquard_Protocol_UpdateSchedule? = nil
  fileprivate var _keepFwBinary: Bool? = nil
}

struct Google_Jacquard_Protocol_DFUExecuteUpdateNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var vendorID: UInt32 {
    get {return _vendorID ?? 0}
    set {_vendorID = newValue}
  }
  /// Returns true if `vendorID` has been explicitly set.
  var hasVendorID: Bool {return self._vendorID != nil}
  /// Clears the value of `vendorID`. Subsequent reads from it will return its default value.
  mutating func clearVendorID() {self._vendorID = nil}

  var productID: UInt32 {
    get {return _productID ?? 0}
    set {_productID = newValue}
  }
  /// Returns true if `productID` has been explicitly set.
  var hasProductID: Bool {return self._productID != nil}
  /// Clears the value of `productID`. Subsequent reads from it will return its default value.
  mutating func clearProductID() {self._productID = nil}

  var firmwareMajor: UInt32 {
    get {return _firmwareMajor ?? 0}
    set {_firmwareMajor = newValue}
  }
  /// Returns true if `firmwareMajor` has been explicitly set.
  var hasFirmwareMajor: Bool {return self._firmwareMajor != nil}
  /// Clears the value of `firmwareMajor`. Subsequent reads from it will return its default value.
  mutating func clearFirmwareMajor() {self._firmwareMajor = nil}

  var firmwareMinor: UInt32 {
    get {return _firmwareMinor ?? 0}
    set {_firmwareMinor = newValue}
  }
  /// Returns true if `firmwareMinor` has been explicitly set.
  var hasFirmwareMinor: Bool {return self._firmwareMinor != nil}
  /// Clears the value of `firmwareMinor`. Subsequent reads from it will return its default value.
  mutating func clearFirmwareMinor() {self._firmwareMinor = nil}

  var firmwarePoint: UInt32 {
    get {return _firmwarePoint ?? 0}
    set {_firmwarePoint = newValue}
  }
  /// Returns true if `firmwarePoint` has been explicitly set.
  var hasFirmwarePoint: Bool {return self._firmwarePoint != nil}
  /// Clears the value of `firmwarePoint`. Subsequent reads from it will return its default value.
  mutating func clearFirmwarePoint() {self._firmwarePoint = nil}

  var status: Google_Jacquard_Protocol_Status {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _vendorID: UInt32? = nil
  fileprivate var _productID: UInt32? = nil
  fileprivate var _firmwareMajor: UInt32? = nil
  fileprivate var _firmwareMinor: UInt32? = nil
  fileprivate var _firmwarePoint: UInt32? = nil
  fileprivate var _status: Google_Jacquard_Protocol_Status? = nil
}

struct Google_Jacquard_Protocol_GenericBlobMessagePayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var msgType: Google_Jacquard_Protocol_GenericBlobMsgType {
    get {return _msgType ?? .genericMsgtypeAncsDs}
    set {_msgType = newValue}
  }
  /// Returns true if `msgType` has been explicitly set.
  var hasMsgType: Bool {return self._msgType != nil}
  /// Clears the value of `msgType`. Subsequent reads from it will return its default value.
  mutating func clearMsgType() {self._msgType = nil}

  var block: Data {
    get {return _block ?? Data()}
    set {_block = newValue}
  }
  /// Returns true if `block` has been explicitly set.
  var hasBlock: Bool {return self._block != nil}
  /// Clears the value of `block`. Subsequent reads from it will return its default value.
  mutating func clearBlock() {self._block = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _msgType: Google_Jacquard_Protocol_GenericBlobMsgType? = nil
  fileprivate var _block: Data? = nil
}

struct Google_Jacquard_Protocol_GenericEncryptedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var blockVector: Data {
    get {return _blockVector ?? Data()}
    set {_blockVector = newValue}
  }
  /// Returns true if `blockVector` has been explicitly set.
  var hasBlockVector: Bool {return self._blockVector != nil}
  /// Clears the value of `blockVector`. Subsequent reads from it will return its default value.
  mutating func clearBlockVector() {self._blockVector = nil}

  var encryptedBlock: Data {
    get {return _encryptedBlock ?? Data()}
    set {_encryptedBlock = newValue}
  }
  /// Returns true if `encryptedBlock` has been explicitly set.
  var hasEncryptedBlock: Bool {return self._encryptedBlock != nil}
  /// Clears the value of `encryptedBlock`. Subsequent reads from it will return its default value.
  mutating func clearEncryptedBlock() {self._encryptedBlock = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _blockVector: Data? = nil
  fileprivate var _encryptedBlock: Data? = nil
}

struct Google_Jacquard_Protocol_GenericPlainNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var plainBlock: Data {
    get {return _plainBlock ?? Data()}
    set {_plainBlock = newValue}
  }
  /// Returns true if `plainBlock` has been explicitly set.
  var hasPlainBlock: Bool {return self._plainBlock != nil}
  /// Clears the value of `plainBlock`. Subsequent reads from it will return its default value.
  mutating func clearPlainBlock() {self._plainBlock = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _plainBlock: Data? = nil
}

struct Google_Jacquard_Protocol_OtaDfuMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var finalSize: UInt32 {
    get {return _finalSize ?? 0}
    set {_finalSize = newValue}
  }
  /// Returns true if `finalSize` has been explicitly set.
  var hasFinalSize: Bool {return self._finalSize != nil}
  /// Clears the value of `finalSize`. Subsequent reads from it will return its default value.
  mutating func clearFinalSize() {self._finalSize = nil}

  var finalCrc: UInt32 {
    get {return _finalCrc ?? 0}
    set {_finalCrc = newValue}
  }
  /// Returns true if `finalCrc` has been explicitly set.
  var hasFinalCrc: Bool {return self._finalCrc != nil}
  /// Clears the value of `finalCrc`. Subsequent reads from it will return its default value.
  mutating func clearFinalCrc() {self._finalCrc = nil}

  var currentSize: UInt32 {
    get {return _currentSize ?? 0}
    set {_currentSize = newValue}
  }
  /// Returns true if `currentSize` has been explicitly set.
  var hasCurrentSize: Bool {return self._currentSize != nil}
  /// Clears the value of `currentSize`. Subsequent reads from it will return its default value.
  mutating func clearCurrentSize() {self._currentSize = nil}

  var currentCrc: UInt32 {
    get {return _currentCrc ?? 0}
    set {_currentCrc = newValue}
  }
  /// Returns true if `currentCrc` has been explicitly set.
  var hasCurrentCrc: Bool {return self._currentCrc != nil}
  /// Clears the value of `currentCrc`. Subsequent reads from it will return its default value.
  mutating func clearCurrentCrc() {self._currentCrc = nil}

  var finalImageSize: UInt32 {
    get {return _finalImageSize ?? 0}
    set {_finalImageSize = newValue}
  }
  /// Returns true if `finalImageSize` has been explicitly set.
  var hasFinalImageSize: Bool {return self._finalImageSize != nil}
  /// Clears the value of `finalImageSize`. Subsequent reads from it will return its default value.
  mutating func clearFinalImageSize() {self._finalImageSize = nil}

  var finalImageCrc: UInt32 {
    get {return _finalImageCrc ?? 0}
    set {_finalImageCrc = newValue}
  }
  /// Returns true if `finalImageCrc` has been explicitly set.
  var hasFinalImageCrc: Bool {return self._finalImageCrc != nil}
  /// Clears the value of `finalImageCrc`. Subsequent reads from it will return its default value.
  mutating func clearFinalImageCrc() {self._finalImageCrc = nil}

  var currentImageSize: UInt32 {
    get {return _currentImageSize ?? 0}
    set {_currentImageSize = newValue}
  }
  /// Returns true if `currentImageSize` has been explicitly set.
  var hasCurrentImageSize: Bool {return self._currentImageSize != nil}
  /// Clears the value of `currentImageSize`. Subsequent reads from it will return its default value.
  mutating func clearCurrentImageSize() {self._currentImageSize = nil}

  var currentImageCrc: UInt32 {
    get {return _currentImageCrc ?? 0}
    set {_currentImageCrc = newValue}
  }
  /// Returns true if `currentImageCrc` has been explicitly set.
  var hasCurrentImageCrc: Bool {return self._currentImageCrc != nil}
  /// Clears the value of `currentImageCrc`. Subsequent reads from it will return its default value.
  mutating func clearCurrentImageCrc() {self._currentImageCrc = nil}

  var writeAddr: UInt32 {
    get {return _writeAddr ?? 0}
    set {_writeAddr = newValue}
  }
  /// Returns true if `writeAddr` has been explicitly set.
  var hasWriteAddr: Bool {return self._writeAddr != nil}
  /// Clears the value of `writeAddr`. Subsequent reads from it will return its default value.
  mutating func clearWriteAddr() {self._writeAddr = nil}

  var signedHash: [UInt32] = []

  var hashContext: [UInt32] = []

  var isSigned: Bool {
    get {return _isSigned ?? false}
    set {_isSigned = newValue}
  }
  /// Returns true if `isSigned` has been explicitly set.
  var hasIsSigned: Bool {return self._isSigned != nil}
  /// Clears the value of `isSigned`. Subsequent reads from it will return its default value.
  mutating func clearIsSigned() {self._isSigned = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _finalSize: UInt32? = nil
  fileprivate var _finalCrc: UInt32? = nil
  fileprivate var _currentSize: UInt32? = nil
  fileprivate var _currentCrc: UInt32? = nil
  fileprivate var _finalImageSize: UInt32? = nil
  fileprivate var _finalImageCrc: UInt32? = nil
  fileprivate var _currentImageSize: UInt32? = nil
  fileprivate var _currentImageCrc: UInt32? = nil
  fileprivate var _writeAddr: UInt32? = nil
  fileprivate var _isSigned: Bool? = nil
}

struct Google_Jacquard_Protocol_ImuConfiguration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sensorID: UInt32 {
    get {return _sensorID ?? 0}
    set {_sensorID = newValue}
  }
  /// Returns true if `sensorID` has been explicitly set.
  var hasSensorID: Bool {return self._sensorID != nil}
  /// Clears the value of `sensorID`. Subsequent reads from it will return its default value.
  mutating func clearSensorID() {self._sensorID = nil}

  var accelLowPowerMode: Bool {
    get {return _accelLowPowerMode ?? false}
    set {_accelLowPowerMode = newValue}
  }
  /// Returns true if `accelLowPowerMode` has been explicitly set.
  var hasAccelLowPowerMode: Bool {return self._accelLowPowerMode != nil}
  /// Clears the value of `accelLowPowerMode`. Subsequent reads from it will return its default value.
  mutating func clearAccelLowPowerMode() {self._accelLowPowerMode = nil}

  var accelFilterMode: Google_Jacquard_Protocol_ImuFilterMode {
    get {return _accelFilterMode ?? .imuFilterOsr4}
    set {_accelFilterMode = newValue}
  }
  /// Returns true if `accelFilterMode` has been explicitly set.
  var hasAccelFilterMode: Bool {return self._accelFilterMode != nil}
  /// Clears the value of `accelFilterMode`. Subsequent reads from it will return its default value.
  mutating func clearAccelFilterMode() {self._accelFilterMode = nil}

  var accelSampleRate: Google_Jacquard_Protocol_ImuAccelSampleRate {
    get {return _accelSampleRate ?? .accelOdr078Hz}
    set {_accelSampleRate = newValue}
  }
  /// Returns true if `accelSampleRate` has been explicitly set.
  var hasAccelSampleRate: Bool {return self._accelSampleRate != nil}
  /// Clears the value of `accelSampleRate`. Subsequent reads from it will return its default value.
  mutating func clearAccelSampleRate() {self._accelSampleRate = nil}

  var accelRange: Google_Jacquard_Protocol_ImuAccelRange {
    get {return _accelRange ?? .imuAccelRange2G}
    set {_accelRange = newValue}
  }
  /// Returns true if `accelRange` has been explicitly set.
  var hasAccelRange: Bool {return self._accelRange != nil}
  /// Clears the value of `accelRange`. Subsequent reads from it will return its default value.
  mutating func clearAccelRange() {self._accelRange = nil}

  var gyroLowPowerMode: Bool {
    get {return _gyroLowPowerMode ?? false}
    set {_gyroLowPowerMode = newValue}
  }
  /// Returns true if `gyroLowPowerMode` has been explicitly set.
  var hasGyroLowPowerMode: Bool {return self._gyroLowPowerMode != nil}
  /// Clears the value of `gyroLowPowerMode`. Subsequent reads from it will return its default value.
  mutating func clearGyroLowPowerMode() {self._gyroLowPowerMode = nil}

  var gyroFilterMode: Google_Jacquard_Protocol_ImuFilterMode {
    get {return _gyroFilterMode ?? .imuFilterOsr4}
    set {_gyroFilterMode = newValue}
  }
  /// Returns true if `gyroFilterMode` has been explicitly set.
  var hasGyroFilterMode: Bool {return self._gyroFilterMode != nil}
  /// Clears the value of `gyroFilterMode`. Subsequent reads from it will return its default value.
  mutating func clearGyroFilterMode() {self._gyroFilterMode = nil}

  var gyroSampleRate: Google_Jacquard_Protocol_ImuGyroSampleRate {
    get {return _gyroSampleRate ?? .gyroOdr25Hz}
    set {_gyroSampleRate = newValue}
  }
  /// Returns true if `gyroSampleRate` has been explicitly set.
  var hasGyroSampleRate: Bool {return self._gyroSampleRate != nil}
  /// Clears the value of `gyroSampleRate`. Subsequent reads from it will return its default value.
  mutating func clearGyroSampleRate() {self._gyroSampleRate = nil}

  var gyroRange: Google_Jacquard_Protocol_ImuGyroRange {
    get {return _gyroRange ?? .imuGyroRange125Dps}
    set {_gyroRange = newValue}
  }
  /// Returns true if `gyroRange` has been explicitly set.
  var hasGyroRange: Bool {return self._gyroRange != nil}
  /// Clears the value of `gyroRange`. Subsequent reads from it will return its default value.
  mutating func clearGyroRange() {self._gyroRange = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sensorID: UInt32? = nil
  fileprivate var _accelLowPowerMode: Bool? = nil
  fileprivate var _accelFilterMode: Google_Jacquard_Protocol_ImuFilterMode? = nil
  fileprivate var _accelSampleRate: Google_Jacquard_Protocol_ImuAccelSampleRate? = nil
  fileprivate var _accelRange: Google_Jacquard_Protocol_ImuAccelRange? = nil
  fileprivate var _gyroLowPowerMode: Bool? = nil
  fileprivate var _gyroFilterMode: Google_Jacquard_Protocol_ImuFilterMode? = nil
  fileprivate var _gyroSampleRate: Google_Jacquard_Protocol_ImuGyroSampleRate? = nil
  fileprivate var _gyroRange: Google_Jacquard_Protocol_ImuGyroRange? = nil
}

struct Google_Jacquard_Protocol_BleConfiguration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var customAdvName: String {
    get {return _customAdvName ?? String()}
    set {_customAdvName = newValue}
  }
  /// Returns true if `customAdvName` has been explicitly set.
  var hasCustomAdvName: Bool {return self._customAdvName != nil}
  /// Clears the value of `customAdvName`. Subsequent reads from it will return its default value.
  mutating func clearCustomAdvName() {self._customAdvName = nil}

  var txPowerDefault: Int32 {
    get {return _txPowerDefault ?? 0}
    set {_txPowerDefault = newValue}
  }
  /// Returns true if `txPowerDefault` has been explicitly set.
  var hasTxPowerDefault: Bool {return self._txPowerDefault != nil}
  /// Clears the value of `txPowerDefault`. Subsequent reads from it will return its default value.
  mutating func clearTxPowerDefault() {self._txPowerDefault = nil}

  var txPowerMax: Int32 {
    get {return _txPowerMax ?? 0}
    set {_txPowerMax = newValue}
  }
  /// Returns true if `txPowerMax` has been explicitly set.
  var hasTxPowerMax: Bool {return self._txPowerMax != nil}
  /// Clears the value of `txPowerMax`. Subsequent reads from it will return its default value.
  mutating func clearTxPowerMax() {self._txPowerMax = nil}

  var fastAdvIntervalMs: Float {
    get {return _fastAdvIntervalMs ?? 0}
    set {_fastAdvIntervalMs = newValue}
  }
  /// Returns true if `fastAdvIntervalMs` has been explicitly set.
  var hasFastAdvIntervalMs: Bool {return self._fastAdvIntervalMs != nil}
  /// Clears the value of `fastAdvIntervalMs`. Subsequent reads from it will return its default value.
  mutating func clearFastAdvIntervalMs() {self._fastAdvIntervalMs = nil}

  var fastAdvDurationSec: UInt32 {
    get {return _fastAdvDurationSec ?? 60}
    set {_fastAdvDurationSec = newValue}
  }
  /// Returns true if `fastAdvDurationSec` has been explicitly set.
  var hasFastAdvDurationSec: Bool {return self._fastAdvDurationSec != nil}
  /// Clears the value of `fastAdvDurationSec`. Subsequent reads from it will return its default value.
  mutating func clearFastAdvDurationSec() {self._fastAdvDurationSec = nil}

  var slowAdvIntervalMs: Float {
    get {return _slowAdvIntervalMs ?? 0}
    set {_slowAdvIntervalMs = newValue}
  }
  /// Returns true if `slowAdvIntervalMs` has been explicitly set.
  var hasSlowAdvIntervalMs: Bool {return self._slowAdvIntervalMs != nil}
  /// Clears the value of `slowAdvIntervalMs`. Subsequent reads from it will return its default value.
  mutating func clearSlowAdvIntervalMs() {self._slowAdvIntervalMs = nil}

  var slowAdvDurationSec: UInt32 {
    get {return _slowAdvDurationSec ?? 60}
    set {_slowAdvDurationSec = newValue}
  }
  /// Returns true if `slowAdvDurationSec` has been explicitly set.
  var hasSlowAdvDurationSec: Bool {return self._slowAdvDurationSec != nil}
  /// Clears the value of `slowAdvDurationSec`. Subsequent reads from it will return its default value.
  mutating func clearSlowAdvDurationSec() {self._slowAdvDurationSec = nil}

  var minConnInterval: UInt32 {
    get {return _minConnInterval ?? 0}
    set {_minConnInterval = newValue}
  }
  /// Returns true if `minConnInterval` has been explicitly set.
  var hasMinConnInterval: Bool {return self._minConnInterval != nil}
  /// Clears the value of `minConnInterval`. Subsequent reads from it will return its default value.
  mutating func clearMinConnInterval() {self._minConnInterval = nil}

  var maxConnInterval: UInt32 {
    get {return _maxConnInterval ?? 0}
    set {_maxConnInterval = newValue}
  }
  /// Returns true if `maxConnInterval` has been explicitly set.
  var hasMaxConnInterval: Bool {return self._maxConnInterval != nil}
  /// Clears the value of `maxConnInterval`. Subsequent reads from it will return its default value.
  mutating func clearMaxConnInterval() {self._maxConnInterval = nil}

  var notifQueueDepth: UInt32 {
    get {return _notifQueueDepth ?? 14}
    set {_notifQueueDepth = newValue}
  }
  /// Returns true if `notifQueueDepth` has been explicitly set.
  var hasNotifQueueDepth: Bool {return self._notifQueueDepth != nil}
  /// Clears the value of `notifQueueDepth`. Subsequent reads from it will return its default value.
  mutating func clearNotifQueueDepth() {self._notifQueueDepth = nil}

  var mediumAdvIntervalMs: Float {
    get {return _mediumAdvIntervalMs ?? 0}
    set {_mediumAdvIntervalMs = newValue}
  }
  /// Returns true if `mediumAdvIntervalMs` has been explicitly set.
  var hasMediumAdvIntervalMs: Bool {return self._mediumAdvIntervalMs != nil}
  /// Clears the value of `mediumAdvIntervalMs`. Subsequent reads from it will return its default value.
  mutating func clearMediumAdvIntervalMs() {self._mediumAdvIntervalMs = nil}

  var mediumAdvDurationSec: UInt32 {
    get {return _mediumAdvDurationSec ?? 60}
    set {_mediumAdvDurationSec = newValue}
  }
  /// Returns true if `mediumAdvDurationSec` has been explicitly set.
  var hasMediumAdvDurationSec: Bool {return self._mediumAdvDurationSec != nil}
  /// Clears the value of `mediumAdvDurationSec`. Subsequent reads from it will return its default value.
  mutating func clearMediumAdvDurationSec() {self._mediumAdvDurationSec = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _customAdvName: String? = nil
  fileprivate var _txPowerDefault: Int32? = nil
  fileprivate var _txPowerMax: Int32? = nil
  fileprivate var _fastAdvIntervalMs: Float? = nil
  fileprivate var _fastAdvDurationSec: UInt32? = nil
  fileprivate var _slowAdvIntervalMs: Float? = nil
  fileprivate var _slowAdvDurationSec: UInt32? = nil
  fileprivate var _minConnInterval: UInt32? = nil
  fileprivate var _maxConnInterval: UInt32? = nil
  fileprivate var _notifQueueDepth: UInt32? = nil
  fileprivate var _mediumAdvIntervalMs: Float? = nil
  fileprivate var _mediumAdvDurationSec: UInt32? = nil
}

struct Google_Jacquard_Protocol_WomConfiguration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var enable: Bool {
    get {return _enable ?? false}
    set {_enable = newValue}
  }
  /// Returns true if `enable` has been explicitly set.
  var hasEnable: Bool {return self._enable != nil}
  /// Clears the value of `enable`. Subsequent reads from it will return its default value.
  mutating func clearEnable() {self._enable = nil}

  var sensitivity: Google_Jacquard_Protocol_ImuAccelSampleRate {
    get {return _sensitivity ?? .accelOdr312Hz}
    set {_sensitivity = newValue}
  }
  /// Returns true if `sensitivity` has been explicitly set.
  var hasSensitivity: Bool {return self._sensitivity != nil}
  /// Clears the value of `sensitivity`. Subsequent reads from it will return its default value.
  mutating func clearSensitivity() {self._sensitivity = nil}

  var motionThreshold: UInt32 {
    get {return _motionThreshold ?? 20}
    set {_motionThreshold = newValue}
  }
  /// Returns true if `motionThreshold` has been explicitly set.
  var hasMotionThreshold: Bool {return self._motionThreshold != nil}
  /// Clears the value of `motionThreshold`. Subsequent reads from it will return its default value.
  mutating func clearMotionThreshold() {self._motionThreshold = nil}

  var noMotionTimeoutMs: UInt32 {
    get {return _noMotionTimeoutMs ?? 0}
    set {_noMotionTimeoutMs = newValue}
  }
  /// Returns true if `noMotionTimeoutMs` has been explicitly set.
  var hasNoMotionTimeoutMs: Bool {return self._noMotionTimeoutMs != nil}
  /// Clears the value of `noMotionTimeoutMs`. Subsequent reads from it will return its default value.
  mutating func clearNoMotionTimeoutMs() {self._noMotionTimeoutMs = nil}

  var gearPowerPolicy: Google_Jacquard_Protocol_WomGearPowerControlPolicy {
    get {return _gearPowerPolicy ?? .womMaintainGearPowerAsIs}
    set {_gearPowerPolicy = newValue}
  }
  /// Returns true if `gearPowerPolicy` has been explicitly set.
  var hasGearPowerPolicy: Bool {return self._gearPowerPolicy != nil}
  /// Clears the value of `gearPowerPolicy`. Subsequent reads from it will return its default value.
  mutating func clearGearPowerPolicy() {self._gearPowerPolicy = nil}

  var bleConnPolicy: Google_Jacquard_Protocol_WomBleConnectionPolicy {
    get {return _bleConnPolicy ?? .womMaintainBleConnectionAsIs}
    set {_bleConnPolicy = newValue}
  }
  /// Returns true if `bleConnPolicy` has been explicitly set.
  var hasBleConnPolicy: Bool {return self._bleConnPolicy != nil}
  /// Clears the value of `bleConnPolicy`. Subsequent reads from it will return its default value.
  mutating func clearBleConnPolicy() {self._bleConnPolicy = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _enable: Bool? = nil
  fileprivate var _sensitivity: Google_Jacquard_Protocol_ImuAccelSampleRate? = nil
  fileprivate var _motionThreshold: UInt32? = nil
  fileprivate var _noMotionTimeoutMs: UInt32? = nil
  fileprivate var _gearPowerPolicy: Google_Jacquard_Protocol_WomGearPowerControlPolicy? = nil
  fileprivate var _bleConnPolicy: Google_Jacquard_Protocol_WomBleConnectionPolicy? = nil
}

struct Google_Jacquard_Protocol_UJTConfigReadRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var imuConfig: Bool {
    get {return _imuConfig ?? false}
    set {_imuConfig = newValue}
  }
  /// Returns true if `imuConfig` has been explicitly set.
  var hasImuConfig: Bool {return self._imuConfig != nil}
  /// Clears the value of `imuConfig`. Subsequent reads from it will return its default value.
  mutating func clearImuConfig() {self._imuConfig = nil}

  var bleConfig: Bool {
    get {return _bleConfig ?? false}
    set {_bleConfig = newValue}
  }
  /// Returns true if `bleConfig` has been explicitly set.
  var hasBleConfig: Bool {return self._bleConfig != nil}
  /// Clears the value of `bleConfig`. Subsequent reads from it will return its default value.
  mutating func clearBleConfig() {self._bleConfig = nil}

  var womConfig: Bool {
    get {return _womConfig ?? false}
    set {_womConfig = newValue}
  }
  /// Returns true if `womConfig` has been explicitly set.
  var hasWomConfig: Bool {return self._womConfig != nil}
  /// Clears the value of `womConfig`. Subsequent reads from it will return its default value.
  mutating func clearWomConfig() {self._womConfig = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _imuConfig: Bool? = nil
  fileprivate var _bleConfig: Bool? = nil
  fileprivate var _womConfig: Bool? = nil
}

struct Google_Jacquard_Protocol_UJTConfigWriteRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var imuConfig: Google_Jacquard_Protocol_ImuConfiguration {
    get {return _storage._imuConfig ?? Google_Jacquard_Protocol_ImuConfiguration()}
    set {_uniqueStorage()._imuConfig = newValue}
  }
  /// Returns true if `imuConfig` has been explicitly set.
  var hasImuConfig: Bool {return _storage._imuConfig != nil}
  /// Clears the value of `imuConfig`. Subsequent reads from it will return its default value.
  mutating func clearImuConfig() {_uniqueStorage()._imuConfig = nil}

  var bleConfig: Google_Jacquard_Protocol_BleConfiguration {
    get {return _storage._bleConfig ?? Google_Jacquard_Protocol_BleConfiguration()}
    set {_uniqueStorage()._bleConfig = newValue}
  }
  /// Returns true if `bleConfig` has been explicitly set.
  var hasBleConfig: Bool {return _storage._bleConfig != nil}
  /// Clears the value of `bleConfig`. Subsequent reads from it will return its default value.
  mutating func clearBleConfig() {_uniqueStorage()._bleConfig = nil}

  var womConfig: Google_Jacquard_Protocol_WomConfiguration {
    get {return _storage._womConfig ?? Google_Jacquard_Protocol_WomConfiguration()}
    set {_uniqueStorage()._womConfig = newValue}
  }
  /// Returns true if `womConfig` has been explicitly set.
  var hasWomConfig: Bool {return _storage._womConfig != nil}
  /// Clears the value of `womConfig`. Subsequent reads from it will return its default value.
  mutating func clearWomConfig() {_uniqueStorage()._womConfig = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Google_Jacquard_Protocol_UJTConfigResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var imuConfig: Google_Jacquard_Protocol_ImuConfiguration {
    get {return _storage._imuConfig ?? Google_Jacquard_Protocol_ImuConfiguration()}
    set {_uniqueStorage()._imuConfig = newValue}
  }
  /// Returns true if `imuConfig` has been explicitly set.
  var hasImuConfig: Bool {return _storage._imuConfig != nil}
  /// Clears the value of `imuConfig`. Subsequent reads from it will return its default value.
  mutating func clearImuConfig() {_uniqueStorage()._imuConfig = nil}

  var bleConfig: Google_Jacquard_Protocol_BleConfiguration {
    get {return _storage._bleConfig ?? Google_Jacquard_Protocol_BleConfiguration()}
    set {_uniqueStorage()._bleConfig = newValue}
  }
  /// Returns true if `bleConfig` has been explicitly set.
  var hasBleConfig: Bool {return _storage._bleConfig != nil}
  /// Clears the value of `bleConfig`. Subsequent reads from it will return its default value.
  mutating func clearBleConfig() {_uniqueStorage()._bleConfig = nil}

  var womConfig: Google_Jacquard_Protocol_WomConfiguration {
    get {return _storage._womConfig ?? Google_Jacquard_Protocol_WomConfiguration()}
    set {_uniqueStorage()._womConfig = newValue}
  }
  /// Returns true if `womConfig` has been explicitly set.
  var hasWomConfig: Bool {return _storage._womConfig != nil}
  /// Clears the value of `womConfig`. Subsequent reads from it will return its default value.
  mutating func clearWomConfig() {_uniqueStorage()._womConfig = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Google_Jacquard_Protocol_DataCollectionMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var campaignID: String {
    get {return _campaignID ?? String()}
    set {_campaignID = newValue}
  }
  /// Returns true if `campaignID` has been explicitly set.
  var hasCampaignID: Bool {return self._campaignID != nil}
  /// Clears the value of `campaignID`. Subsequent reads from it will return its default value.
  mutating func clearCampaignID() {self._campaignID = nil}

  var sessionID: String {
    get {return _sessionID ?? String()}
    set {_sessionID = newValue}
  }
  /// Returns true if `sessionID` has been explicitly set.
  var hasSessionID: Bool {return self._sessionID != nil}
  /// Clears the value of `sessionID`. Subsequent reads from it will return its default value.
  mutating func clearSessionID() {self._sessionID = nil}

  var trialID: String {
    get {return _trialID ?? String()}
    set {_trialID = newValue}
  }
  /// Returns true if `trialID` has been explicitly set.
  var hasTrialID: Bool {return self._trialID != nil}
  /// Clears the value of `trialID`. Subsequent reads from it will return its default value.
  mutating func clearTrialID() {self._trialID = nil}

  var subjectID: String {
    get {return _subjectID ?? String()}
    set {_subjectID = newValue}
  }
  /// Returns true if `subjectID` has been explicitly set.
  var hasSubjectID: Bool {return self._subjectID != nil}
  /// Clears the value of `subjectID`. Subsequent reads from it will return its default value.
  mutating func clearSubjectID() {self._subjectID = nil}

  var mode: Google_Jacquard_Protocol_DataCollectionMode {
    get {return _mode ?? .streaming}
    set {_mode = newValue}
  }
  /// Returns true if `mode` has been explicitly set.
  var hasMode: Bool {return self._mode != nil}
  /// Clears the value of `mode`. Subsequent reads from it will return its default value.
  mutating func clearMode() {self._mode = nil}

  var actionID: UInt32 {
    get {return _actionID ?? 0}
    set {_actionID = newValue}
  }
  /// Returns true if `actionID` has been explicitly set.
  var hasActionID: Bool {return self._actionID != nil}
  /// Clears the value of `actionID`. Subsequent reads from it will return its default value.
  mutating func clearActionID() {self._actionID = nil}

  var sensorIds: [UInt32] = []

  var customData: Data {
    get {return _customData ?? Data()}
    set {_customData = newValue}
  }
  /// Returns true if `customData` has been explicitly set.
  var hasCustomData: Bool {return self._customData != nil}
  /// Clears the value of `customData`. Subsequent reads from it will return its default value.
  mutating func clearCustomData() {self._customData = nil}

  var productID: String {
    get {return _productID ?? String()}
    set {_productID = newValue}
  }
  /// Returns true if `productID` has been explicitly set.
  var hasProductID: Bool {return self._productID != nil}
  /// Clears the value of `productID`. Subsequent reads from it will return its default value.
  mutating func clearProductID() {self._productID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _campaignID: String? = nil
  fileprivate var _sessionID: String? = nil
  fileprivate var _trialID: String? = nil
  fileprivate var _subjectID: String? = nil
  fileprivate var _mode: Google_Jacquard_Protocol_DataCollectionMode? = nil
  fileprivate var _actionID: UInt32? = nil
  fileprivate var _customData: Data? = nil
  fileprivate var _productID: String? = nil
}

struct Google_Jacquard_Protocol_DataCollectionTrialSensorData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sensorID: UInt32 {
    get {return _sensorID ?? 0}
    set {_sensorID = newValue}
  }
  /// Returns true if `sensorID` has been explicitly set.
  var hasSensorID: Bool {return self._sensorID != nil}
  /// Clears the value of `sensorID`. Subsequent reads from it will return its default value.
  mutating func clearSensorID() {self._sensorID = nil}

  var formatVersion: UInt32 {
    get {return _formatVersion ?? 0}
    set {_formatVersion = newValue}
  }
  /// Returns true if `formatVersion` has been explicitly set.
  var hasFormatVersion: Bool {return self._formatVersion != nil}
  /// Clears the value of `formatVersion`. Subsequent reads from it will return its default value.
  mutating func clearFormatVersion() {self._formatVersion = nil}

  var fsize: UInt32 {
    get {return _fsize ?? 0}
    set {_fsize = newValue}
  }
  /// Returns true if `fsize` has been explicitly set.
  var hasFsize: Bool {return self._fsize != nil}
  /// Clears the value of `fsize`. Subsequent reads from it will return its default value.
  mutating func clearFsize() {self._fsize = nil}

  var crc16: UInt32 {
    get {return _crc16 ?? 0}
    set {_crc16 = newValue}
  }
  /// Returns true if `crc16` has been explicitly set.
  var hasCrc16: Bool {return self._crc16 != nil}
  /// Clears the value of `crc16`. Subsequent reads from it will return its default value.
  mutating func clearCrc16() {self._crc16 = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sensorID: UInt32? = nil
  fileprivate var _formatVersion: UInt32? = nil
  fileprivate var _fsize: UInt32? = nil
  fileprivate var _crc16: UInt32? = nil
}

struct Google_Jacquard_Protocol_DataCollectionTrialData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var subjectID: String {
    get {return _subjectID ?? String()}
    set {_subjectID = newValue}
  }
  /// Returns true if `subjectID` has been explicitly set.
  var hasSubjectID: Bool {return self._subjectID != nil}
  /// Clears the value of `subjectID`. Subsequent reads from it will return its default value.
  mutating func clearSubjectID() {self._subjectID = nil}

  var sensorData: [Google_Jacquard_Protocol_DataCollectionTrialSensorData] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _subjectID: String? = nil
}

struct Google_Jacquard_Protocol_DataCollectionTrialList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var trialID: String {
    get {return _trialID ?? String()}
    set {_trialID = newValue}
  }
  /// Returns true if `trialID` has been explicitly set.
  var hasTrialID: Bool {return self._trialID != nil}
  /// Clears the value of `trialID`. Subsequent reads from it will return its default value.
  mutating func clearTrialID() {self._trialID = nil}

  var trialData: [Google_Jacquard_Protocol_DataCollectionTrialData] = []

  var campaignID: String {
    get {return _campaignID ?? String()}
    set {_campaignID = newValue}
  }
  /// Returns true if `campaignID` has been explicitly set.
  var hasCampaignID: Bool {return self._campaignID != nil}
  /// Clears the value of `campaignID`. Subsequent reads from it will return its default value.
  mutating func clearCampaignID() {self._campaignID = nil}

  var sessionID: String {
    get {return _sessionID ?? String()}
    set {_sessionID = newValue}
  }
  /// Returns true if `sessionID` has been explicitly set.
  var hasSessionID: Bool {return self._sessionID != nil}
  /// Clears the value of `sessionID`. Subsequent reads from it will return its default value.
  mutating func clearSessionID() {self._sessionID = nil}

  var productID: String {
    get {return _productID ?? String()}
    set {_productID = newValue}
  }
  /// Returns true if `productID` has been explicitly set.
  var hasProductID: Bool {return self._productID != nil}
  /// Clears the value of `productID`. Subsequent reads from it will return its default value.
  mutating func clearProductID() {self._productID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _trialID: String? = nil
  fileprivate var _campaignID: String? = nil
  fileprivate var _sessionID: String? = nil
  fileprivate var _productID: String? = nil
}

struct Google_Jacquard_Protocol_DataCollectionStartRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var metadata: Google_Jacquard_Protocol_DataCollectionMetadata {
    get {return _metadata ?? Google_Jacquard_Protocol_DataCollectionMetadata()}
    set {_metadata = newValue}
  }
  /// Returns true if `metadata` has been explicitly set.
  var hasMetadata: Bool {return self._metadata != nil}
  /// Clears the value of `metadata`. Subsequent reads from it will return its default value.
  mutating func clearMetadata() {self._metadata = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _metadata: Google_Jacquard_Protocol_DataCollectionMetadata? = nil
}

struct Google_Jacquard_Protocol_DataCollectionStartResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dcStatus: Google_Jacquard_Protocol_DataCollectionStatus {
    get {return _dcStatus ?? .dataCollectionIdle}
    set {_dcStatus = newValue}
  }
  /// Returns true if `dcStatus` has been explicitly set.
  var hasDcStatus: Bool {return self._dcStatus != nil}
  /// Clears the value of `dcStatus`. Subsequent reads from it will return its default value.
  mutating func clearDcStatus() {self._dcStatus = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _dcStatus: Google_Jacquard_Protocol_DataCollectionStatus? = nil
}

struct Google_Jacquard_Protocol_DataCollectionStopRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var isError: Bool {
    get {return _isError ?? false}
    set {_isError = newValue}
  }
  /// Returns true if `isError` has been explicitly set.
  var hasIsError: Bool {return self._isError != nil}
  /// Clears the value of `isError`. Subsequent reads from it will return its default value.
  mutating func clearIsError() {self._isError = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _isError: Bool? = nil
}

struct Google_Jacquard_Protocol_DataCollectionStopResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timestamp: UInt32 {
    get {return _timestamp ?? 0}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {self._timestamp = nil}

  var dcStatus: Google_Jacquard_Protocol_DataCollectionStatus {
    get {return _dcStatus ?? .dataCollectionIdle}
    set {_dcStatus = newValue}
  }
  /// Returns true if `dcStatus` has been explicitly set.
  var hasDcStatus: Bool {return self._dcStatus != nil}
  /// Clears the value of `dcStatus`. Subsequent reads from it will return its default value.
  mutating func clearDcStatus() {self._dcStatus = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timestamp: UInt32? = nil
  fileprivate var _dcStatus: Google_Jacquard_Protocol_DataCollectionStatus? = nil
}

struct Google_Jacquard_Protocol_DataCollectionStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Google_Jacquard_Protocol_DataCollectionStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dcStatus: Google_Jacquard_Protocol_DataCollectionStatus {
    get {return _dcStatus ?? .dataCollectionIdle}
    set {_dcStatus = newValue}
  }
  /// Returns true if `dcStatus` has been explicitly set.
  var hasDcStatus: Bool {return self._dcStatus != nil}
  /// Clears the value of `dcStatus`. Subsequent reads from it will return its default value.
  mutating func clearDcStatus() {self._dcStatus = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _dcStatus: Google_Jacquard_Protocol_DataCollectionStatus? = nil
}

struct Google_Jacquard_Protocol_DataCollectionTrialListRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var campaignID: String {
    get {return _campaignID ?? String()}
    set {_campaignID = newValue}
  }
  /// Returns true if `campaignID` has been explicitly set.
  var hasCampaignID: Bool {return self._campaignID != nil}
  /// Clears the value of `campaignID`. Subsequent reads from it will return its default value.
  mutating func clearCampaignID() {self._campaignID = nil}

  var sessionID: String {
    get {return _sessionID ?? String()}
    set {_sessionID = newValue}
  }
  /// Returns true if `sessionID` has been explicitly set.
  var hasSessionID: Bool {return self._sessionID != nil}
  /// Clears the value of `sessionID`. Subsequent reads from it will return its default value.
  mutating func clearSessionID() {self._sessionID = nil}

  var productID: String {
    get {return _productID ?? String()}
    set {_productID = newValue}
  }
  /// Returns true if `productID` has been explicitly set.
  var hasProductID: Bool {return self._productID != nil}
  /// Clears the value of `productID`. Subsequent reads from it will return its default value.
  mutating func clearProductID() {self._productID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _campaignID: String? = nil
  fileprivate var _sessionID: String? = nil
  fileprivate var _productID: String? = nil
}

struct Google_Jacquard_Protocol_DataCollectionTrialListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dcStatus: Google_Jacquard_Protocol_DataCollectionStatus {
    get {return _dcStatus ?? .dataCollectionIdle}
    set {_dcStatus = newValue}
  }
  /// Returns true if `dcStatus` has been explicitly set.
  var hasDcStatus: Bool {return self._dcStatus != nil}
  /// Clears the value of `dcStatus`. Subsequent reads from it will return its default value.
  mutating func clearDcStatus() {self._dcStatus = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _dcStatus: Google_Jacquard_Protocol_DataCollectionStatus? = nil
}

struct Google_Jacquard_Protocol_DataCollectionTrialListNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var trials: [Google_Jacquard_Protocol_DataCollectionTrialList] = []

  var trial: Google_Jacquard_Protocol_DataCollectionTrialList {
    get {return _trial ?? Google_Jacquard_Protocol_DataCollectionTrialList()}
    set {_trial = newValue}
  }
  /// Returns true if `trial` has been explicitly set.
  var hasTrial: Bool {return self._trial != nil}
  /// Clears the value of `trial`. Subsequent reads from it will return its default value.
  mutating func clearTrial() {self._trial = nil}

  var totalTrials: UInt32 {
    get {return _totalTrials ?? 0}
    set {_totalTrials = newValue}
  }
  /// Returns true if `totalTrials` has been explicitly set.
  var hasTotalTrials: Bool {return self._totalTrials != nil}
  /// Clears the value of `totalTrials`. Subsequent reads from it will return its default value.
  mutating func clearTotalTrials() {self._totalTrials = nil}

  var trialIndex: UInt32 {
    get {return _trialIndex ?? 0}
    set {_trialIndex = newValue}
  }
  /// Returns true if `trialIndex` has been explicitly set.
  var hasTrialIndex: Bool {return self._trialIndex != nil}
  /// Clears the value of `trialIndex`. Subsequent reads from it will return its default value.
  mutating func clearTrialIndex() {self._trialIndex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _trial: Google_Jacquard_Protocol_DataCollectionTrialList? = nil
  fileprivate var _totalTrials: UInt32? = nil
  fileprivate var _trialIndex: UInt32? = nil
}

struct Google_Jacquard_Protocol_DataCollectionTrialDataRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var campaignID: String {
    get {return _campaignID ?? String()}
    set {_campaignID = newValue}
  }
  /// Returns true if `campaignID` has been explicitly set.
  var hasCampaignID: Bool {return self._campaignID != nil}
  /// Clears the value of `campaignID`. Subsequent reads from it will return its default value.
  mutating func clearCampaignID() {self._campaignID = nil}

  var sessionID: String {
    get {return _sessionID ?? String()}
    set {_sessionID = newValue}
  }
  /// Returns true if `sessionID` has been explicitly set.
  var hasSessionID: Bool {return self._sessionID != nil}
  /// Clears the value of `sessionID`. Subsequent reads from it will return its default value.
  mutating func clearSessionID() {self._sessionID = nil}

  var trialID: String {
    get {return _trialID ?? String()}
    set {_trialID = newValue}
  }
  /// Returns true if `trialID` has been explicitly set.
  var hasTrialID: Bool {return self._trialID != nil}
  /// Clears the value of `trialID`. Subsequent reads from it will return its default value.
  mutating func clearTrialID() {self._trialID = nil}

  var subjectID: String {
    get {return _subjectID ?? String()}
    set {_subjectID = newValue}
  }
  /// Returns true if `subjectID` has been explicitly set.
  var hasSubjectID: Bool {return self._subjectID != nil}
  /// Clears the value of `subjectID`. Subsequent reads from it will return its default value.
  mutating func clearSubjectID() {self._subjectID = nil}

  var sensorID: UInt32 {
    get {return _sensorID ?? 0}
    set {_sensorID = newValue}
  }
  /// Returns true if `sensorID` has been explicitly set.
  var hasSensorID: Bool {return self._sensorID != nil}
  /// Clears the value of `sensorID`. Subsequent reads from it will return its default value.
  mutating func clearSensorID() {self._sensorID = nil}

  var offset: UInt32 {
    get {return _offset ?? 0}
    set {_offset = newValue}
  }
  /// Returns true if `offset` has been explicitly set.
  var hasOffset: Bool {return self._offset != nil}
  /// Clears the value of `offset`. Subsequent reads from it will return its default value.
  mutating func clearOffset() {self._offset = nil}

  var productID: String {
    get {return _productID ?? String()}
    set {_productID = newValue}
  }
  /// Returns true if `productID` has been explicitly set.
  var hasProductID: Bool {return self._productID != nil}
  /// Clears the value of `productID`. Subsequent reads from it will return its default value.
  mutating func clearProductID() {self._productID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _campaignID: String? = nil
  fileprivate var _sessionID: String? = nil
  fileprivate var _trialID: String? = nil
  fileprivate var _subjectID: String? = nil
  fileprivate var _sensorID: UInt32? = nil
  fileprivate var _offset: UInt32? = nil
  fileprivate var _productID: String? = nil
}

struct Google_Jacquard_Protocol_DataCollectionTrialDataResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dcStatus: Google_Jacquard_Protocol_DataCollectionStatus {
    get {return _dcStatus ?? .dataCollectionIdle}
    set {_dcStatus = newValue}
  }
  /// Returns true if `dcStatus` has been explicitly set.
  var hasDcStatus: Bool {return self._dcStatus != nil}
  /// Clears the value of `dcStatus`. Subsequent reads from it will return its default value.
  mutating func clearDcStatus() {self._dcStatus = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _dcStatus: Google_Jacquard_Protocol_DataCollectionStatus? = nil
}

struct Google_Jacquard_Protocol_DataCollectionEraseTrialDataRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var campaignID: String {
    get {return _campaignID ?? String()}
    set {_campaignID = newValue}
  }
  /// Returns true if `campaignID` has been explicitly set.
  var hasCampaignID: Bool {return self._campaignID != nil}
  /// Clears the value of `campaignID`. Subsequent reads from it will return its default value.
  mutating func clearCampaignID() {self._campaignID = nil}

  var sessionID: String {
    get {return _sessionID ?? String()}
    set {_sessionID = newValue}
  }
  /// Returns true if `sessionID` has been explicitly set.
  var hasSessionID: Bool {return self._sessionID != nil}
  /// Clears the value of `sessionID`. Subsequent reads from it will return its default value.
  mutating func clearSessionID() {self._sessionID = nil}

  var trialID: String {
    get {return _trialID ?? String()}
    set {_trialID = newValue}
  }
  /// Returns true if `trialID` has been explicitly set.
  var hasTrialID: Bool {return self._trialID != nil}
  /// Clears the value of `trialID`. Subsequent reads from it will return its default value.
  mutating func clearTrialID() {self._trialID = nil}

  var productID: String {
    get {return _productID ?? String()}
    set {_productID = newValue}
  }
  /// Returns true if `productID` has been explicitly set.
  var hasProductID: Bool {return self._productID != nil}
  /// Clears the value of `productID`. Subsequent reads from it will return its default value.
  mutating func clearProductID() {self._productID = nil}

  var subjectID: String {
    get {return _subjectID ?? String()}
    set {_subjectID = newValue}
  }
  /// Returns true if `subjectID` has been explicitly set.
  var hasSubjectID: Bool {return self._subjectID != nil}
  /// Clears the value of `subjectID`. Subsequent reads from it will return its default value.
  mutating func clearSubjectID() {self._subjectID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _campaignID: String? = nil
  fileprivate var _sessionID: String? = nil
  fileprivate var _trialID: String? = nil
  fileprivate var _productID: String? = nil
  fileprivate var _subjectID: String? = nil
}

struct Google_Jacquard_Protocol_DataCollectionEraseTrialDataResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dcStatus: Google_Jacquard_Protocol_DataCollectionStatus {
    get {return _dcStatus ?? .dataCollectionIdle}
    set {_dcStatus = newValue}
  }
  /// Returns true if `dcStatus` has been explicitly set.
  var hasDcStatus: Bool {return self._dcStatus != nil}
  /// Clears the value of `dcStatus`. Subsequent reads from it will return its default value.
  mutating func clearDcStatus() {self._dcStatus = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _dcStatus: Google_Jacquard_Protocol_DataCollectionStatus? = nil
}

struct Google_Jacquard_Protocol_DataCollectionEraseAllDataRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Google_Jacquard_Protocol_DataCollectionEraseAllDataResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dcStatus: Google_Jacquard_Protocol_DataCollectionStatus {
    get {return _dcStatus ?? .dataCollectionIdle}
    set {_dcStatus = newValue}
  }
  /// Returns true if `dcStatus` has been explicitly set.
  var hasDcStatus: Bool {return self._dcStatus != nil}
  /// Clears the value of `dcStatus`. Subsequent reads from it will return its default value.
  mutating func clearDcStatus() {self._dcStatus = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _dcStatus: Google_Jacquard_Protocol_DataCollectionStatus? = nil
}

struct Google_Jacquard_Protocol_DataCollectionProgressNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sensorID: UInt32 {
    get {return _sensorID ?? 0}
    set {_sensorID = newValue}
  }
  /// Returns true if `sensorID` has been explicitly set.
  var hasSensorID: Bool {return self._sensorID != nil}
  /// Clears the value of `sensorID`. Subsequent reads from it will return its default value.
  mutating func clearSensorID() {self._sensorID = nil}

  var crcProgressPct: UInt32 {
    get {return _crcProgressPct ?? 0}
    set {_crcProgressPct = newValue}
  }
  /// Returns true if `crcProgressPct` has been explicitly set.
  var hasCrcProgressPct: Bool {return self._crcProgressPct != nil}
  /// Clears the value of `crcProgressPct`. Subsequent reads from it will return its default value.
  mutating func clearCrcProgressPct() {self._crcProgressPct = nil}

  var compressionProgressPct: UInt32 {
    get {return _compressionProgressPct ?? 0}
    set {_compressionProgressPct = newValue}
  }
  /// Returns true if `compressionProgressPct` has been explicitly set.
  var hasCompressionProgressPct: Bool {return self._compressionProgressPct != nil}
  /// Clears the value of `compressionProgressPct`. Subsequent reads from it will return its default value.
  mutating func clearCompressionProgressPct() {self._compressionProgressPct = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sensorID: UInt32? = nil
  fileprivate var _crcProgressPct: UInt32? = nil
  fileprivate var _compressionProgressPct: UInt32? = nil
}

struct Google_Jacquard_Protocol_DataCollectionActionHeader {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var actionID: UInt32 {
    get {return _actionID ?? 0}
    set {_actionID = newValue}
  }
  /// Returns true if `actionID` has been explicitly set.
  var hasActionID: Bool {return self._actionID != nil}
  /// Clears the value of `actionID`. Subsequent reads from it will return its default value.
  mutating func clearActionID() {self._actionID = nil}

  var isError: Bool {
    get {return _isError ?? false}
    set {_isError = newValue}
  }
  /// Returns true if `isError` has been explicitly set.
  var hasIsError: Bool {return self._isError != nil}
  /// Clears the value of `isError`. Subsequent reads from it will return its default value.
  mutating func clearIsError() {self._isError = nil}

  var numSamples: UInt32 {
    get {return _numSamples ?? 0}
    set {_numSamples = newValue}
  }
  /// Returns true if `numSamples` has been explicitly set.
  var hasNumSamples: Bool {return self._numSamples != nil}
  /// Clears the value of `numSamples`. Subsequent reads from it will return its default value.
  mutating func clearNumSamples() {self._numSamples = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _actionID: UInt32? = nil
  fileprivate var _isError: Bool? = nil
  fileprivate var _numSamples: UInt32? = nil
}

struct Google_Jacquard_Protocol_ModuleDescriptor {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var vendorID: UInt32 {
    get {return _vendorID ?? 0}
    set {_vendorID = newValue}
  }
  /// Returns true if `vendorID` has been explicitly set.
  var hasVendorID: Bool {return self._vendorID != nil}
  /// Clears the value of `vendorID`. Subsequent reads from it will return its default value.
  mutating func clearVendorID() {self._vendorID = nil}

  var productID: UInt32 {
    get {return _productID ?? 0}
    set {_productID = newValue}
  }
  /// Returns true if `productID` has been explicitly set.
  var hasProductID: Bool {return self._productID != nil}
  /// Clears the value of `productID`. Subsequent reads from it will return its default value.
  mutating func clearProductID() {self._productID = nil}

  var moduleID: UInt32 {
    get {return _moduleID ?? 0}
    set {_moduleID = newValue}
  }
  /// Returns true if `moduleID` has been explicitly set.
  var hasModuleID: Bool {return self._moduleID != nil}
  /// Clears the value of `moduleID`. Subsequent reads from it will return its default value.
  mutating func clearModuleID() {self._moduleID = nil}

  var verMajor: UInt32 {
    get {return _verMajor ?? 0}
    set {_verMajor = newValue}
  }
  /// Returns true if `verMajor` has been explicitly set.
  var hasVerMajor: Bool {return self._verMajor != nil}
  /// Clears the value of `verMajor`. Subsequent reads from it will return its default value.
  mutating func clearVerMajor() {self._verMajor = nil}

  var verMinor: UInt32 {
    get {return _verMinor ?? 0}
    set {_verMinor = newValue}
  }
  /// Returns true if `verMinor` has been explicitly set.
  var hasVerMinor: Bool {return self._verMinor != nil}
  /// Clears the value of `verMinor`. Subsequent reads from it will return its default value.
  mutating func clearVerMinor() {self._verMinor = nil}

  var verPoint: UInt32 {
    get {return _verPoint ?? 0}
    set {_verPoint = newValue}
  }
  /// Returns true if `verPoint` has been explicitly set.
  var hasVerPoint: Bool {return self._verPoint != nil}
  /// Clears the value of `verPoint`. Subsequent reads from it will return its default value.
  mutating func clearVerPoint() {self._verPoint = nil}

  var isEnabled: Bool {
    get {return _isEnabled ?? false}
    set {_isEnabled = newValue}
  }
  /// Returns true if `isEnabled` has been explicitly set.
  var hasIsEnabled: Bool {return self._isEnabled != nil}
  /// Clears the value of `isEnabled`. Subsequent reads from it will return its default value.
  mutating func clearIsEnabled() {self._isEnabled = nil}

  var apiLevel: UInt32 {
    get {return _apiLevel ?? 0}
    set {_apiLevel = newValue}
  }
  /// Returns true if `apiLevel` has been explicitly set.
  var hasApiLevel: Bool {return self._apiLevel != nil}
  /// Clears the value of `apiLevel`. Subsequent reads from it will return its default value.
  mutating func clearApiLevel() {self._apiLevel = nil}

  var mlVersion: String {
    get {return _mlVersion ?? String()}
    set {_mlVersion = newValue}
  }
  /// Returns true if `mlVersion` has been explicitly set.
  var hasMlVersion: Bool {return self._mlVersion != nil}
  /// Clears the value of `mlVersion`. Subsequent reads from it will return its default value.
  mutating func clearMlVersion() {self._mlVersion = nil}

  var sizeBytes: UInt32 {
    get {return _sizeBytes ?? 0}
    set {_sizeBytes = newValue}
  }
  /// Returns true if `sizeBytes` has been explicitly set.
  var hasSizeBytes: Bool {return self._sizeBytes != nil}
  /// Clears the value of `sizeBytes`. Subsequent reads from it will return its default value.
  mutating func clearSizeBytes() {self._sizeBytes = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _name: String? = nil
  fileprivate var _vendorID: UInt32? = nil
  fileprivate var _productID: UInt32? = nil
  fileprivate var _moduleID: UInt32? = nil
  fileprivate var _verMajor: UInt32? = nil
  fileprivate var _verMinor: UInt32? = nil
  fileprivate var _verPoint: UInt32? = nil
  fileprivate var _isEnabled: Bool? = nil
  fileprivate var _apiLevel: UInt32? = nil
  fileprivate var _mlVersion: String? = nil
  fileprivate var _sizeBytes: UInt32? = nil
}

struct Google_Jacquard_Protocol_LoadModuleRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var module: Google_Jacquard_Protocol_ModuleDescriptor {
    get {return _module ?? Google_Jacquard_Protocol_ModuleDescriptor()}
    set {_module = newValue}
  }
  /// Returns true if `module` has been explicitly set.
  var hasModule: Bool {return self._module != nil}
  /// Clears the value of `module`. Subsequent reads from it will return its default value.
  mutating func clearModule() {self._module = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _module: Google_Jacquard_Protocol_ModuleDescriptor? = nil
}

struct Google_Jacquard_Protocol_LoadModuleNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: Google_Jacquard_Protocol_Status {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var module: Google_Jacquard_Protocol_ModuleDescriptor {
    get {return _module ?? Google_Jacquard_Protocol_ModuleDescriptor()}
    set {_module = newValue}
  }
  /// Returns true if `module` has been explicitly set.
  var hasModule: Bool {return self._module != nil}
  /// Clears the value of `module`. Subsequent reads from it will return its default value.
  mutating func clearModule() {self._module = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _status: Google_Jacquard_Protocol_Status? = nil
  fileprivate var _module: Google_Jacquard_Protocol_ModuleDescriptor? = nil
}

struct Google_Jacquard_Protocol_UnloadModuleRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var module: Google_Jacquard_Protocol_ModuleDescriptor {
    get {return _module ?? Google_Jacquard_Protocol_ModuleDescriptor()}
    set {_module = newValue}
  }
  /// Returns true if `module` has been explicitly set.
  var hasModule: Bool {return self._module != nil}
  /// Clears the value of `module`. Subsequent reads from it will return its default value.
  mutating func clearModule() {self._module = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _module: Google_Jacquard_Protocol_ModuleDescriptor? = nil
}

struct Google_Jacquard_Protocol_ListModuleResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var modules: [Google_Jacquard_Protocol_ModuleDescriptor] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Google_Jacquard_Protocol_DeleteModuleRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var module: Google_Jacquard_Protocol_ModuleDescriptor {
    get {return _module ?? Google_Jacquard_Protocol_ModuleDescriptor()}
    set {_module = newValue}
  }
  /// Returns true if `module` has been explicitly set.
  var hasModule: Bool {return self._module != nil}
  /// Clears the value of `module`. Subsequent reads from it will return its default value.
  mutating func clearModule() {self._module = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _module: Google_Jacquard_Protocol_ModuleDescriptor? = nil
}

struct Google_Jacquard_Protocol_BatteryStatusRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var readBatteryLevel: Bool {
    get {return _readBatteryLevel ?? false}
    set {_readBatteryLevel = newValue}
  }
  /// Returns true if `readBatteryLevel` has been explicitly set.
  var hasReadBatteryLevel: Bool {return self._readBatteryLevel != nil}
  /// Clears the value of `readBatteryLevel`. Subsequent reads from it will return its default value.
  mutating func clearReadBatteryLevel() {self._readBatteryLevel = nil}

  var readChargingStatus: Bool {
    get {return _readChargingStatus ?? false}
    set {_readChargingStatus = newValue}
  }
  /// Returns true if `readChargingStatus` has been explicitly set.
  var hasReadChargingStatus: Bool {return self._readChargingStatus != nil}
  /// Clears the value of `readChargingStatus`. Subsequent reads from it will return its default value.
  mutating func clearReadChargingStatus() {self._readChargingStatus = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _readBatteryLevel: Bool? = nil
  fileprivate var _readChargingStatus: Bool? = nil
}

struct Google_Jacquard_Protocol_BatteryStatusResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var batteryLevel: UInt32 {
    get {return _batteryLevel ?? 0}
    set {_batteryLevel = newValue}
  }
  /// Returns true if `batteryLevel` has been explicitly set.
  var hasBatteryLevel: Bool {return self._batteryLevel != nil}
  /// Clears the value of `batteryLevel`. Subsequent reads from it will return its default value.
  mutating func clearBatteryLevel() {self._batteryLevel = nil}

  var chargingStatus: Google_Jacquard_Protocol_ChargingStatus {
    get {return _chargingStatus ?? .charging}
    set {_chargingStatus = newValue}
  }
  /// Returns true if `chargingStatus` has been explicitly set.
  var hasChargingStatus: Bool {return self._chargingStatus != nil}
  /// Clears the value of `chargingStatus`. Subsequent reads from it will return its default value.
  mutating func clearChargingStatus() {self._chargingStatus = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _batteryLevel: UInt32? = nil
  fileprivate var _chargingStatus: Google_Jacquard_Protocol_ChargingStatus? = nil
}

struct Google_Jacquard_Protocol_BatteryStatusNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var batteryLevel: UInt32 {
    get {return _batteryLevel ?? 0}
    set {_batteryLevel = newValue}
  }
  /// Returns true if `batteryLevel` has been explicitly set.
  var hasBatteryLevel: Bool {return self._batteryLevel != nil}
  /// Clears the value of `batteryLevel`. Subsequent reads from it will return its default value.
  mutating func clearBatteryLevel() {self._batteryLevel = nil}

  var chargingStatus: Google_Jacquard_Protocol_ChargingStatus {
    get {return _chargingStatus ?? .charging}
    set {_chargingStatus = newValue}
  }
  /// Returns true if `chargingStatus` has been explicitly set.
  var hasChargingStatus: Bool {return self._chargingStatus != nil}
  /// Clears the value of `chargingStatus`. Subsequent reads from it will return its default value.
  mutating func clearChargingStatus() {self._chargingStatus = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _batteryLevel: UInt32? = nil
  fileprivate var _chargingStatus: Google_Jacquard_Protocol_ChargingStatus? = nil
}

struct Google_Jacquard_Protocol_BleDisconnectRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timeoutSecond: UInt32 {
    get {return _timeoutSecond ?? 0}
    set {_timeoutSecond = newValue}
  }
  /// Returns true if `timeoutSecond` has been explicitly set.
  var hasTimeoutSecond: Bool {return self._timeoutSecond != nil}
  /// Clears the value of `timeoutSecond`. Subsequent reads from it will return its default value.
  mutating func clearTimeoutSecond() {self._timeoutSecond = nil}

  var reconnectOnlyOnWom: Bool {
    get {return _reconnectOnlyOnWom ?? false}
    set {_reconnectOnlyOnWom = newValue}
  }
  /// Returns true if `reconnectOnlyOnWom` has been explicitly set.
  var hasReconnectOnlyOnWom: Bool {return self._reconnectOnlyOnWom != nil}
  /// Clears the value of `reconnectOnlyOnWom`. Subsequent reads from it will return its default value.
  mutating func clearReconnectOnlyOnWom() {self._reconnectOnlyOnWom = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timeoutSecond: UInt32? = nil
  fileprivate var _reconnectOnlyOnWom: Bool? = nil
}

struct Google_Jacquard_Protocol_DeviceRebootRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rebootOnlyInterposer: Bool {
    get {return _rebootOnlyInterposer ?? false}
    set {_rebootOnlyInterposer = newValue}
  }
  /// Returns true if `rebootOnlyInterposer` has been explicitly set.
  var hasRebootOnlyInterposer: Bool {return self._rebootOnlyInterposer != nil}
  /// Clears the value of `rebootOnlyInterposer`. Subsequent reads from it will return its default value.
  mutating func clearRebootOnlyInterposer() {self._rebootOnlyInterposer = nil}

  var silentReboot: Bool {
    get {return _silentReboot ?? true}
    set {_silentReboot = newValue}
  }
  /// Returns true if `silentReboot` has been explicitly set.
  var hasSilentReboot: Bool {return self._silentReboot != nil}
  /// Clears the value of `silentReboot`. Subsequent reads from it will return its default value.
  mutating func clearSilentReboot() {self._silentReboot = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rebootOnlyInterposer: Bool? = nil
  fileprivate var _silentReboot: Bool? = nil
}

struct Google_Jacquard_Protocol_FaultlogGetRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var startRecordIndex: UInt32 {
    get {return _startRecordIndex ?? 0}
    set {_startRecordIndex = newValue}
  }
  /// Returns true if `startRecordIndex` has been explicitly set.
  var hasStartRecordIndex: Bool {return self._startRecordIndex != nil}
  /// Clears the value of `startRecordIndex`. Subsequent reads from it will return its default value.
  mutating func clearStartRecordIndex() {self._startRecordIndex = nil}

  var recordsCount: UInt32 {
    get {return _recordsCount ?? 0}
    set {_recordsCount = newValue}
  }
  /// Returns true if `recordsCount` has been explicitly set.
  var hasRecordsCount: Bool {return self._recordsCount != nil}
  /// Clears the value of `recordsCount`. Subsequent reads from it will return its default value.
  mutating func clearRecordsCount() {self._recordsCount = nil}

  var getFaults: Bool {
    get {return _getFaults ?? false}
    set {_getFaults = newValue}
  }
  /// Returns true if `getFaults` has been explicitly set.
  var hasGetFaults: Bool {return self._getFaults != nil}
  /// Clears the value of `getFaults`. Subsequent reads from it will return its default value.
  mutating func clearGetFaults() {self._getFaults = nil}

  var getErrors: Bool {
    get {return _getErrors ?? false}
    set {_getErrors = newValue}
  }
  /// Returns true if `getErrors` has been explicitly set.
  var hasGetErrors: Bool {return self._getErrors != nil}
  /// Clears the value of `getErrors`. Subsequent reads from it will return its default value.
  mutating func clearGetErrors() {self._getErrors = nil}

  var getResets: Bool {
    get {return _getResets ?? false}
    set {_getResets = newValue}
  }
  /// Returns true if `getResets` has been explicitly set.
  var hasGetResets: Bool {return self._getResets != nil}
  /// Clears the value of `getResets`. Subsequent reads from it will return its default value.
  mutating func clearGetResets() {self._getResets = nil}

  var getAppErrFaults: Bool {
    get {return _getAppErrFaults ?? false}
    set {_getAppErrFaults = newValue}
  }
  /// Returns true if `getAppErrFaults` has been explicitly set.
  var hasGetAppErrFaults: Bool {return self._getAppErrFaults != nil}
  /// Clears the value of `getAppErrFaults`. Subsequent reads from it will return its default value.
  mutating func clearGetAppErrFaults() {self._getAppErrFaults = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _startRecordIndex: UInt32? = nil
  fileprivate var _recordsCount: UInt32? = nil
  fileprivate var _getFaults: Bool? = nil
  fileprivate var _getErrors: Bool? = nil
  fileprivate var _getResets: Bool? = nil
  fileprivate var _getAppErrFaults: Bool? = nil
}

struct Google_Jacquard_Protocol_AppErrFaultRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var recordID: UInt32 {
    get {return _recordID ?? 0}
    set {_recordID = newValue}
  }
  /// Returns true if `recordID` has been explicitly set.
  var hasRecordID: Bool {return self._recordID != nil}
  /// Clears the value of `recordID`. Subsequent reads from it will return its default value.
  mutating func clearRecordID() {self._recordID = nil}

  var id: UInt32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var info: UInt32 {
    get {return _info ?? 0}
    set {_info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  var hasInfo: Bool {return self._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  mutating func clearInfo() {self._info = nil}

  var pcError: UInt32 {
    get {return _pcError ?? 0}
    set {_pcError = newValue}
  }
  /// Returns true if `pcError` has been explicitly set.
  var hasPcError: Bool {return self._pcError != nil}
  /// Clears the value of `pcError`. Subsequent reads from it will return its default value.
  mutating func clearPcError() {self._pcError = nil}

  var stackTrace: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _recordID: UInt32? = nil
  fileprivate var _id: UInt32? = nil
  fileprivate var _info: UInt32? = nil
  fileprivate var _pcError: UInt32? = nil
}

struct Google_Jacquard_Protocol_FaultRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var recordID: UInt32 {
    get {return _recordID ?? 0}
    set {_recordID = newValue}
  }
  /// Returns true if `recordID` has been explicitly set.
  var hasRecordID: Bool {return self._recordID != nil}
  /// Clears the value of `recordID`. Subsequent reads from it will return its default value.
  mutating func clearRecordID() {self._recordID = nil}

  var parameter: UInt32 {
    get {return _parameter ?? 0}
    set {_parameter = newValue}
  }
  /// Returns true if `parameter` has been explicitly set.
  var hasParameter: Bool {return self._parameter != nil}
  /// Clears the value of `parameter`. Subsequent reads from it will return its default value.
  mutating func clearParameter() {self._parameter = nil}

  var pcRegister: UInt32 {
    get {return _pcRegister ?? 0}
    set {_pcRegister = newValue}
  }
  /// Returns true if `pcRegister` has been explicitly set.
  var hasPcRegister: Bool {return self._pcRegister != nil}
  /// Clears the value of `pcRegister`. Subsequent reads from it will return its default value.
  mutating func clearPcRegister() {self._pcRegister = nil}

  var lrRegister: UInt32 {
    get {return _lrRegister ?? 0}
    set {_lrRegister = newValue}
  }
  /// Returns true if `lrRegister` has been explicitly set.
  var hasLrRegister: Bool {return self._lrRegister != nil}
  /// Clears the value of `lrRegister`. Subsequent reads from it will return its default value.
  mutating func clearLrRegister() {self._lrRegister = nil}

  var stackTrace: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _recordID: UInt32? = nil
  fileprivate var _parameter: UInt32? = nil
  fileprivate var _pcRegister: UInt32? = nil
  fileprivate var _lrRegister: UInt32? = nil
}

struct Google_Jacquard_Protocol_ErrorRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var recordID: UInt32 {
    get {return _recordID ?? 0}
    set {_recordID = newValue}
  }
  /// Returns true if `recordID` has been explicitly set.
  var hasRecordID: Bool {return self._recordID != nil}
  /// Clears the value of `recordID`. Subsequent reads from it will return its default value.
  mutating func clearRecordID() {self._recordID = nil}

  var parameter: UInt32 {
    get {return _parameter ?? 0}
    set {_parameter = newValue}
  }
  /// Returns true if `parameter` has been explicitly set.
  var hasParameter: Bool {return self._parameter != nil}
  /// Clears the value of `parameter`. Subsequent reads from it will return its default value.
  mutating func clearParameter() {self._parameter = nil}

  var functionName: String {
    get {return _functionName ?? String()}
    set {_functionName = newValue}
  }
  /// Returns true if `functionName` has been explicitly set.
  var hasFunctionName: Bool {return self._functionName != nil}
  /// Clears the value of `functionName`. Subsequent reads from it will return its default value.
  mutating func clearFunctionName() {self._functionName = nil}

  var lineNumber: UInt32 {
    get {return _lineNumber ?? 0}
    set {_lineNumber = newValue}
  }
  /// Returns true if `lineNumber` has been explicitly set.
  var hasLineNumber: Bool {return self._lineNumber != nil}
  /// Clears the value of `lineNumber`. Subsequent reads from it will return its default value.
  mutating func clearLineNumber() {self._lineNumber = nil}

  var pcRegister: UInt32 {
    get {return _pcRegister ?? 0}
    set {_pcRegister = newValue}
  }
  /// Returns true if `pcRegister` has been explicitly set.
  var hasPcRegister: Bool {return self._pcRegister != nil}
  /// Clears the value of `pcRegister`. Subsequent reads from it will return its default value.
  mutating func clearPcRegister() {self._pcRegister = nil}

  var lrRegister: UInt32 {
    get {return _lrRegister ?? 0}
    set {_lrRegister = newValue}
  }
  /// Returns true if `lrRegister` has been explicitly set.
  var hasLrRegister: Bool {return self._lrRegister != nil}
  /// Clears the value of `lrRegister`. Subsequent reads from it will return its default value.
  mutating func clearLrRegister() {self._lrRegister = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _recordID: UInt32? = nil
  fileprivate var _parameter: UInt32? = nil
  fileprivate var _functionName: String? = nil
  fileprivate var _lineNumber: UInt32? = nil
  fileprivate var _pcRegister: UInt32? = nil
  fileprivate var _lrRegister: UInt32? = nil
}

struct Google_Jacquard_Protocol_ResetReasonRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var recordID: UInt32 {
    get {return _recordID ?? 0}
    set {_recordID = newValue}
  }
  /// Returns true if `recordID` has been explicitly set.
  var hasRecordID: Bool {return self._recordID != nil}
  /// Clears the value of `recordID`. Subsequent reads from it will return its default value.
  mutating func clearRecordID() {self._recordID = nil}

  var resetReason: UInt32 {
    get {return _resetReason ?? 0}
    set {_resetReason = newValue}
  }
  /// Returns true if `resetReason` has been explicitly set.
  var hasResetReason: Bool {return self._resetReason != nil}
  /// Clears the value of `resetReason`. Subsequent reads from it will return its default value.
  mutating func clearResetReason() {self._resetReason = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _recordID: UInt32? = nil
  fileprivate var _resetReason: UInt32? = nil
}

struct Google_Jacquard_Protocol_FaultlogGetResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var lastRecordIndex: UInt32 {
    get {return _lastRecordIndex ?? 0}
    set {_lastRecordIndex = newValue}
  }
  /// Returns true if `lastRecordIndex` has been explicitly set.
  var hasLastRecordIndex: Bool {return self._lastRecordIndex != nil}
  /// Clears the value of `lastRecordIndex`. Subsequent reads from it will return its default value.
  mutating func clearLastRecordIndex() {self._lastRecordIndex = nil}

  var resetReasonRecords: [Google_Jacquard_Protocol_ResetReasonRecord] = []

  var apperrfaultRecords: [Google_Jacquard_Protocol_AppErrFaultRecord] = []

  var faultRecords: [Google_Jacquard_Protocol_FaultRecord] = []

  var errorRecords: [Google_Jacquard_Protocol_ErrorRecord] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _lastRecordIndex: UInt32? = nil
}

// MARK: - Extension support defined in jacquard.proto.

// MARK: - Extension Properties

// Swift Extensions on the exteneded Messages to add easy access to the declared
// extension fields. The names are based on the extension field name from the proto
// declaration. To avoid naming collisions, the names are prefixed with the name of
// the scope where the extend directive occurs.

extension Google_Jacquard_Protocol_Notification {

  var Google_Jacquard_Protocol_LedPatternNotification_ledPatternNotif: Google_Jacquard_Protocol_LedPatternNotification {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_LedPatternNotification.Extensions.led_pattern_notif) ?? Google_Jacquard_Protocol_LedPatternNotification()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_LedPatternNotification.Extensions.led_pattern_notif, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_LedPatternNotification.Extensions.led_pattern_notif`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_LedPatternNotification_ledPatternNotif: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_LedPatternNotification.Extensions.led_pattern_notif)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_LedPatternNotification.Extensions.led_pattern_notif`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_LedPatternNotification_ledPatternNotif() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_LedPatternNotification.Extensions.led_pattern_notif)
  }

  var Google_Jacquard_Protocol_HapticNotification_haptic: Google_Jacquard_Protocol_HapticNotification {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_HapticNotification.Extensions.haptic) ?? Google_Jacquard_Protocol_HapticNotification()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_HapticNotification.Extensions.haptic, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_HapticNotification.Extensions.haptic`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_HapticNotification_haptic: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_HapticNotification.Extensions.haptic)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_HapticNotification.Extensions.haptic`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_HapticNotification_haptic() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_HapticNotification.Extensions.haptic)
  }

  var Google_Jacquard_Protocol_DataChannelNotification_data: Google_Jacquard_Protocol_DataChannelNotification {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DataChannelNotification.Extensions.data) ?? Google_Jacquard_Protocol_DataChannelNotification()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DataChannelNotification.Extensions.data, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DataChannelNotification.Extensions.data`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DataChannelNotification_data: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DataChannelNotification.Extensions.data)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DataChannelNotification.Extensions.data`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DataChannelNotification_data() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DataChannelNotification.Extensions.data)
  }

  var Google_Jacquard_Protocol_DisconnectNotification_disconnectNotification: Google_Jacquard_Protocol_DisconnectNotification {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DisconnectNotification.Extensions.disconnect_notification) ?? Google_Jacquard_Protocol_DisconnectNotification()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DisconnectNotification.Extensions.disconnect_notification, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DisconnectNotification.Extensions.disconnect_notification`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DisconnectNotification_disconnectNotification: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DisconnectNotification.Extensions.disconnect_notification)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DisconnectNotification.Extensions.disconnect_notification`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DisconnectNotification_disconnectNotification() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DisconnectNotification.Extensions.disconnect_notification)
  }

  var Google_Jacquard_Protocol_AttachedNotification_attached: Google_Jacquard_Protocol_AttachedNotification {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_AttachedNotification.Extensions.attached) ?? Google_Jacquard_Protocol_AttachedNotification()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_AttachedNotification.Extensions.attached, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_AttachedNotification.Extensions.attached`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_AttachedNotification_attached: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_AttachedNotification.Extensions.attached)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_AttachedNotification.Extensions.attached`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_AttachedNotification_attached() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_AttachedNotification.Extensions.attached)
  }

  var Google_Jacquard_Protocol_ErrorNotification_errorNotification: Google_Jacquard_Protocol_ErrorNotification {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_ErrorNotification.Extensions.error_notification) ?? Google_Jacquard_Protocol_ErrorNotification()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_ErrorNotification.Extensions.error_notification, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_ErrorNotification.Extensions.error_notification`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_ErrorNotification_errorNotification: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_ErrorNotification.Extensions.error_notification)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_ErrorNotification.Extensions.error_notification`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_ErrorNotification_errorNotification() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_ErrorNotification.Extensions.error_notification)
  }

  var Google_Jacquard_Protocol_DFUExecuteUpdateNotification_dfuExecuteUdpateNotif: Google_Jacquard_Protocol_DFUExecuteUpdateNotification {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DFUExecuteUpdateNotification.Extensions.dfu_execute_udpate_notif) ?? Google_Jacquard_Protocol_DFUExecuteUpdateNotification()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DFUExecuteUpdateNotification.Extensions.dfu_execute_udpate_notif, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DFUExecuteUpdateNotification.Extensions.dfu_execute_udpate_notif`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DFUExecuteUpdateNotification_dfuExecuteUdpateNotif: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DFUExecuteUpdateNotification.Extensions.dfu_execute_udpate_notif)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DFUExecuteUpdateNotification.Extensions.dfu_execute_udpate_notif`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DFUExecuteUpdateNotification_dfuExecuteUdpateNotif() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DFUExecuteUpdateNotification.Extensions.dfu_execute_udpate_notif)
  }

  var Google_Jacquard_Protocol_GenericEncryptedNotification_genericEncryptedNotice: Google_Jacquard_Protocol_GenericEncryptedNotification {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_GenericEncryptedNotification.Extensions.generic_encrypted_notice) ?? Google_Jacquard_Protocol_GenericEncryptedNotification()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_GenericEncryptedNotification.Extensions.generic_encrypted_notice, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_GenericEncryptedNotification.Extensions.generic_encrypted_notice`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_GenericEncryptedNotification_genericEncryptedNotice: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_GenericEncryptedNotification.Extensions.generic_encrypted_notice)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_GenericEncryptedNotification.Extensions.generic_encrypted_notice`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_GenericEncryptedNotification_genericEncryptedNotice() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_GenericEncryptedNotification.Extensions.generic_encrypted_notice)
  }

  var Google_Jacquard_Protocol_GenericPlainNotification_genericPlainNotice: Google_Jacquard_Protocol_GenericPlainNotification {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_GenericPlainNotification.Extensions.generic_plain_notice) ?? Google_Jacquard_Protocol_GenericPlainNotification()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_GenericPlainNotification.Extensions.generic_plain_notice, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_GenericPlainNotification.Extensions.generic_plain_notice`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_GenericPlainNotification_genericPlainNotice: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_GenericPlainNotification.Extensions.generic_plain_notice)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_GenericPlainNotification.Extensions.generic_plain_notice`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_GenericPlainNotification_genericPlainNotice() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_GenericPlainNotification.Extensions.generic_plain_notice)
  }

  var Google_Jacquard_Protocol_DataCollectionTrialListNotification_trialList: Google_Jacquard_Protocol_DataCollectionTrialListNotification {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionTrialListNotification.Extensions.trial_list) ?? Google_Jacquard_Protocol_DataCollectionTrialListNotification()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionTrialListNotification.Extensions.trial_list, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DataCollectionTrialListNotification.Extensions.trial_list`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DataCollectionTrialListNotification_trialList: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionTrialListNotification.Extensions.trial_list)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DataCollectionTrialListNotification.Extensions.trial_list`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DataCollectionTrialListNotification_trialList() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionTrialListNotification.Extensions.trial_list)
  }

  var Google_Jacquard_Protocol_DataCollectionProgressNotification_progress: Google_Jacquard_Protocol_DataCollectionProgressNotification {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionProgressNotification.Extensions.progress) ?? Google_Jacquard_Protocol_DataCollectionProgressNotification()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionProgressNotification.Extensions.progress, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DataCollectionProgressNotification.Extensions.progress`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DataCollectionProgressNotification_progress: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionProgressNotification.Extensions.progress)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DataCollectionProgressNotification.Extensions.progress`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DataCollectionProgressNotification_progress() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionProgressNotification.Extensions.progress)
  }

  var Google_Jacquard_Protocol_LoadModuleNotification_loadModuleNotif: Google_Jacquard_Protocol_LoadModuleNotification {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_LoadModuleNotification.Extensions.load_module_notif) ?? Google_Jacquard_Protocol_LoadModuleNotification()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_LoadModuleNotification.Extensions.load_module_notif, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_LoadModuleNotification.Extensions.load_module_notif`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_LoadModuleNotification_loadModuleNotif: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_LoadModuleNotification.Extensions.load_module_notif)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_LoadModuleNotification.Extensions.load_module_notif`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_LoadModuleNotification_loadModuleNotif() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_LoadModuleNotification.Extensions.load_module_notif)
  }

  var Google_Jacquard_Protocol_BatteryStatusNotification_batteryStatusNotification: Google_Jacquard_Protocol_BatteryStatusNotification {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_BatteryStatusNotification.Extensions.battery_status_notification) ?? Google_Jacquard_Protocol_BatteryStatusNotification()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_BatteryStatusNotification.Extensions.battery_status_notification, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_BatteryStatusNotification.Extensions.battery_status_notification`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_BatteryStatusNotification_batteryStatusNotification: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_BatteryStatusNotification.Extensions.battery_status_notification)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_BatteryStatusNotification.Extensions.battery_status_notification`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_BatteryStatusNotification_batteryStatusNotification() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_BatteryStatusNotification.Extensions.battery_status_notification)
  }
}

extension Google_Jacquard_Protocol_Request {

  var Google_Jacquard_Protocol_SupportedRequest_supported: Google_Jacquard_Protocol_SupportedRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_SupportedRequest.Extensions.supported) ?? Google_Jacquard_Protocol_SupportedRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_SupportedRequest.Extensions.supported, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_SupportedRequest.Extensions.supported`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_SupportedRequest_supported: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_SupportedRequest.Extensions.supported)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_SupportedRequest.Extensions.supported`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_SupportedRequest_supported() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_SupportedRequest.Extensions.supported)
  }

  var Google_Jacquard_Protocol_DeviceInfoRequest_deviceInfo: Google_Jacquard_Protocol_DeviceInfoRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DeviceInfoRequest.Extensions.device_info) ?? Google_Jacquard_Protocol_DeviceInfoRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DeviceInfoRequest.Extensions.device_info, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DeviceInfoRequest.Extensions.device_info`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DeviceInfoRequest_deviceInfo: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DeviceInfoRequest.Extensions.device_info)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DeviceInfoRequest.Extensions.device_info`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DeviceInfoRequest_deviceInfo() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DeviceInfoRequest.Extensions.device_info)
  }

  var Google_Jacquard_Protocol_LedPatternRequest_ledPatternRequest: Google_Jacquard_Protocol_LedPatternRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_LedPatternRequest.Extensions.led_pattern_request) ?? Google_Jacquard_Protocol_LedPatternRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_LedPatternRequest.Extensions.led_pattern_request, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_LedPatternRequest.Extensions.led_pattern_request`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_LedPatternRequest_ledPatternRequest: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_LedPatternRequest.Extensions.led_pattern_request)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_LedPatternRequest.Extensions.led_pattern_request`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_LedPatternRequest_ledPatternRequest() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_LedPatternRequest.Extensions.led_pattern_request)
  }

  var Google_Jacquard_Protocol_ConfigSetRequest_configSetRequest: Google_Jacquard_Protocol_ConfigSetRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_ConfigSetRequest.Extensions.config_set_request) ?? Google_Jacquard_Protocol_ConfigSetRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_ConfigSetRequest.Extensions.config_set_request, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_ConfigSetRequest.Extensions.config_set_request`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_ConfigSetRequest_configSetRequest: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_ConfigSetRequest.Extensions.config_set_request)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_ConfigSetRequest.Extensions.config_set_request`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_ConfigSetRequest_configSetRequest() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_ConfigSetRequest.Extensions.config_set_request)
  }

  var Google_Jacquard_Protocol_ConfigGetRequest_configGetRequest: Google_Jacquard_Protocol_ConfigGetRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_ConfigGetRequest.Extensions.config_get_request) ?? Google_Jacquard_Protocol_ConfigGetRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_ConfigGetRequest.Extensions.config_get_request, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_ConfigGetRequest.Extensions.config_get_request`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_ConfigGetRequest_configGetRequest: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_ConfigGetRequest.Extensions.config_get_request)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_ConfigGetRequest.Extensions.config_get_request`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_ConfigGetRequest_configGetRequest() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_ConfigGetRequest.Extensions.config_get_request)
  }

  var Google_Jacquard_Protocol_ConfigGetIndexRequest_configGetIndex: Google_Jacquard_Protocol_ConfigGetIndexRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_ConfigGetIndexRequest.Extensions.config_get_index) ?? Google_Jacquard_Protocol_ConfigGetIndexRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_ConfigGetIndexRequest.Extensions.config_get_index, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_ConfigGetIndexRequest.Extensions.config_get_index`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_ConfigGetIndexRequest_configGetIndex: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_ConfigGetIndexRequest.Extensions.config_get_index)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_ConfigGetIndexRequest.Extensions.config_get_index`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_ConfigGetIndexRequest_configGetIndex() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_ConfigGetIndexRequest.Extensions.config_get_index)
  }

  var Google_Jacquard_Protocol_HWGearRequest_hwGearChar: Google_Jacquard_Protocol_HWGearRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_HWGearRequest.Extensions.hw_gear_char) ?? Google_Jacquard_Protocol_HWGearRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_HWGearRequest.Extensions.hw_gear_char, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_HWGearRequest.Extensions.hw_gear_char`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_HWGearRequest_hwGearChar: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_HWGearRequest.Extensions.hw_gear_char)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_HWGearRequest.Extensions.hw_gear_char`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_HWGearRequest_hwGearChar() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_HWGearRequest.Extensions.hw_gear_char)
  }

  var Google_Jacquard_Protocol_HapticRequest_haptic: Google_Jacquard_Protocol_HapticRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_HapticRequest.Extensions.haptic) ?? Google_Jacquard_Protocol_HapticRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_HapticRequest.Extensions.haptic, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_HapticRequest.Extensions.haptic`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_HapticRequest_haptic: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_HapticRequest.Extensions.haptic)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_HapticRequest.Extensions.haptic`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_HapticRequest_haptic() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_HapticRequest.Extensions.haptic)
  }

  var Google_Jacquard_Protocol_DataChannelRequest_data: Google_Jacquard_Protocol_DataChannelRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DataChannelRequest.Extensions.data) ?? Google_Jacquard_Protocol_DataChannelRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DataChannelRequest.Extensions.data, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DataChannelRequest.Extensions.data`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DataChannelRequest_data: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DataChannelRequest.Extensions.data)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DataChannelRequest.Extensions.data`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DataChannelRequest_data() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DataChannelRequest.Extensions.data)
  }

  var Google_Jacquard_Protocol_BeginRequest_begin: Google_Jacquard_Protocol_BeginRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_BeginRequest.Extensions.begin) ?? Google_Jacquard_Protocol_BeginRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_BeginRequest.Extensions.begin, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_BeginRequest.Extensions.begin`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_BeginRequest_begin: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_BeginRequest.Extensions.begin)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_BeginRequest.Extensions.begin`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_BeginRequest_begin() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_BeginRequest.Extensions.begin)
  }

  var Google_Jacquard_Protocol_DFUStatusRequest_dfuStatus: Google_Jacquard_Protocol_DFUStatusRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DFUStatusRequest.Extensions.dfu_status) ?? Google_Jacquard_Protocol_DFUStatusRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DFUStatusRequest.Extensions.dfu_status, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DFUStatusRequest.Extensions.dfu_status`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DFUStatusRequest_dfuStatus: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DFUStatusRequest.Extensions.dfu_status)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DFUStatusRequest.Extensions.dfu_status`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DFUStatusRequest_dfuStatus() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DFUStatusRequest.Extensions.dfu_status)
  }

  var Google_Jacquard_Protocol_DFUPrepareRequest_dfuPrepare: Google_Jacquard_Protocol_DFUPrepareRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DFUPrepareRequest.Extensions.dfu_prepare) ?? Google_Jacquard_Protocol_DFUPrepareRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DFUPrepareRequest.Extensions.dfu_prepare, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DFUPrepareRequest.Extensions.dfu_prepare`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DFUPrepareRequest_dfuPrepare: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DFUPrepareRequest.Extensions.dfu_prepare)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DFUPrepareRequest.Extensions.dfu_prepare`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DFUPrepareRequest_dfuPrepare() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DFUPrepareRequest.Extensions.dfu_prepare)
  }

  var Google_Jacquard_Protocol_DFUWriteRequest_dfuWrite: Google_Jacquard_Protocol_DFUWriteRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DFUWriteRequest.Extensions.dfu_write) ?? Google_Jacquard_Protocol_DFUWriteRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DFUWriteRequest.Extensions.dfu_write, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DFUWriteRequest.Extensions.dfu_write`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DFUWriteRequest_dfuWrite: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DFUWriteRequest.Extensions.dfu_write)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DFUWriteRequest.Extensions.dfu_write`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DFUWriteRequest_dfuWrite() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DFUWriteRequest.Extensions.dfu_write)
  }

  var Google_Jacquard_Protocol_DFUExecuteRequest_dfuExecute: Google_Jacquard_Protocol_DFUExecuteRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DFUExecuteRequest.Extensions.dfu_execute) ?? Google_Jacquard_Protocol_DFUExecuteRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DFUExecuteRequest.Extensions.dfu_execute, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DFUExecuteRequest.Extensions.dfu_execute`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DFUExecuteRequest_dfuExecute: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DFUExecuteRequest.Extensions.dfu_execute)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DFUExecuteRequest.Extensions.dfu_execute`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DFUExecuteRequest_dfuExecute() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DFUExecuteRequest.Extensions.dfu_execute)
  }

  var Google_Jacquard_Protocol_UJTConfigReadRequest_configRead: Google_Jacquard_Protocol_UJTConfigReadRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_UJTConfigReadRequest.Extensions.config_read) ?? Google_Jacquard_Protocol_UJTConfigReadRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_UJTConfigReadRequest.Extensions.config_read, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_UJTConfigReadRequest.Extensions.config_read`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_UJTConfigReadRequest_configRead: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_UJTConfigReadRequest.Extensions.config_read)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_UJTConfigReadRequest.Extensions.config_read`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_UJTConfigReadRequest_configRead() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_UJTConfigReadRequest.Extensions.config_read)
  }

  var Google_Jacquard_Protocol_UJTConfigWriteRequest_configWrite: Google_Jacquard_Protocol_UJTConfigWriteRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_UJTConfigWriteRequest.Extensions.config_write) ?? Google_Jacquard_Protocol_UJTConfigWriteRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_UJTConfigWriteRequest.Extensions.config_write, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_UJTConfigWriteRequest.Extensions.config_write`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_UJTConfigWriteRequest_configWrite: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_UJTConfigWriteRequest.Extensions.config_write)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_UJTConfigWriteRequest.Extensions.config_write`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_UJTConfigWriteRequest_configWrite() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_UJTConfigWriteRequest.Extensions.config_write)
  }

  var Google_Jacquard_Protocol_DataCollectionStartRequest_start: Google_Jacquard_Protocol_DataCollectionStartRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStartRequest.Extensions.start) ?? Google_Jacquard_Protocol_DataCollectionStartRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStartRequest.Extensions.start, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DataCollectionStartRequest.Extensions.start`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DataCollectionStartRequest_start: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStartRequest.Extensions.start)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DataCollectionStartRequest.Extensions.start`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DataCollectionStartRequest_start() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStartRequest.Extensions.start)
  }

  var Google_Jacquard_Protocol_DataCollectionStopRequest_stop: Google_Jacquard_Protocol_DataCollectionStopRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStopRequest.Extensions.stop) ?? Google_Jacquard_Protocol_DataCollectionStopRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStopRequest.Extensions.stop, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DataCollectionStopRequest.Extensions.stop`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DataCollectionStopRequest_stop: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStopRequest.Extensions.stop)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DataCollectionStopRequest.Extensions.stop`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DataCollectionStopRequest_stop() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStopRequest.Extensions.stop)
  }

  var Google_Jacquard_Protocol_DataCollectionStatusRequest_status: Google_Jacquard_Protocol_DataCollectionStatusRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStatusRequest.Extensions.status) ?? Google_Jacquard_Protocol_DataCollectionStatusRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStatusRequest.Extensions.status, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DataCollectionStatusRequest.Extensions.status`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DataCollectionStatusRequest_status: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStatusRequest.Extensions.status)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DataCollectionStatusRequest.Extensions.status`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DataCollectionStatusRequest_status() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStatusRequest.Extensions.status)
  }

  var Google_Jacquard_Protocol_DataCollectionTrialListRequest_trialList: Google_Jacquard_Protocol_DataCollectionTrialListRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionTrialListRequest.Extensions.trial_list) ?? Google_Jacquard_Protocol_DataCollectionTrialListRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionTrialListRequest.Extensions.trial_list, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DataCollectionTrialListRequest.Extensions.trial_list`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DataCollectionTrialListRequest_trialList: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionTrialListRequest.Extensions.trial_list)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DataCollectionTrialListRequest.Extensions.trial_list`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DataCollectionTrialListRequest_trialList() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionTrialListRequest.Extensions.trial_list)
  }

  var Google_Jacquard_Protocol_DataCollectionTrialDataRequest_trialData: Google_Jacquard_Protocol_DataCollectionTrialDataRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionTrialDataRequest.Extensions.trial_data) ?? Google_Jacquard_Protocol_DataCollectionTrialDataRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionTrialDataRequest.Extensions.trial_data, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DataCollectionTrialDataRequest.Extensions.trial_data`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DataCollectionTrialDataRequest_trialData: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionTrialDataRequest.Extensions.trial_data)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DataCollectionTrialDataRequest.Extensions.trial_data`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DataCollectionTrialDataRequest_trialData() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionTrialDataRequest.Extensions.trial_data)
  }

  var Google_Jacquard_Protocol_DataCollectionEraseTrialDataRequest_eraseTrialData: Google_Jacquard_Protocol_DataCollectionEraseTrialDataRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionEraseTrialDataRequest.Extensions.erase_trial_data) ?? Google_Jacquard_Protocol_DataCollectionEraseTrialDataRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionEraseTrialDataRequest.Extensions.erase_trial_data, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DataCollectionEraseTrialDataRequest.Extensions.erase_trial_data`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DataCollectionEraseTrialDataRequest_eraseTrialData: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionEraseTrialDataRequest.Extensions.erase_trial_data)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DataCollectionEraseTrialDataRequest.Extensions.erase_trial_data`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DataCollectionEraseTrialDataRequest_eraseTrialData() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionEraseTrialDataRequest.Extensions.erase_trial_data)
  }

  var Google_Jacquard_Protocol_DataCollectionEraseAllDataRequest_eraseAllData: Google_Jacquard_Protocol_DataCollectionEraseAllDataRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionEraseAllDataRequest.Extensions.erase_all_data) ?? Google_Jacquard_Protocol_DataCollectionEraseAllDataRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionEraseAllDataRequest.Extensions.erase_all_data, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DataCollectionEraseAllDataRequest.Extensions.erase_all_data`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DataCollectionEraseAllDataRequest_eraseAllData: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionEraseAllDataRequest.Extensions.erase_all_data)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DataCollectionEraseAllDataRequest.Extensions.erase_all_data`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DataCollectionEraseAllDataRequest_eraseAllData() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionEraseAllDataRequest.Extensions.erase_all_data)
  }

  var Google_Jacquard_Protocol_LoadModuleRequest_loadModule: Google_Jacquard_Protocol_LoadModuleRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_LoadModuleRequest.Extensions.load_module) ?? Google_Jacquard_Protocol_LoadModuleRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_LoadModuleRequest.Extensions.load_module, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_LoadModuleRequest.Extensions.load_module`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_LoadModuleRequest_loadModule: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_LoadModuleRequest.Extensions.load_module)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_LoadModuleRequest.Extensions.load_module`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_LoadModuleRequest_loadModule() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_LoadModuleRequest.Extensions.load_module)
  }

  var Google_Jacquard_Protocol_UnloadModuleRequest_unloadModule: Google_Jacquard_Protocol_UnloadModuleRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_UnloadModuleRequest.Extensions.unload_module) ?? Google_Jacquard_Protocol_UnloadModuleRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_UnloadModuleRequest.Extensions.unload_module, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_UnloadModuleRequest.Extensions.unload_module`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_UnloadModuleRequest_unloadModule: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_UnloadModuleRequest.Extensions.unload_module)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_UnloadModuleRequest.Extensions.unload_module`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_UnloadModuleRequest_unloadModule() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_UnloadModuleRequest.Extensions.unload_module)
  }

  var Google_Jacquard_Protocol_DeleteModuleRequest_deleteModule: Google_Jacquard_Protocol_DeleteModuleRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DeleteModuleRequest.Extensions.delete_module) ?? Google_Jacquard_Protocol_DeleteModuleRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DeleteModuleRequest.Extensions.delete_module, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DeleteModuleRequest.Extensions.delete_module`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DeleteModuleRequest_deleteModule: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DeleteModuleRequest.Extensions.delete_module)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DeleteModuleRequest.Extensions.delete_module`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DeleteModuleRequest_deleteModule() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DeleteModuleRequest.Extensions.delete_module)
  }

  var Google_Jacquard_Protocol_BatteryStatusRequest_batteryStatusRequest: Google_Jacquard_Protocol_BatteryStatusRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_BatteryStatusRequest.Extensions.battery_status_request) ?? Google_Jacquard_Protocol_BatteryStatusRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_BatteryStatusRequest.Extensions.battery_status_request, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_BatteryStatusRequest.Extensions.battery_status_request`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_BatteryStatusRequest_batteryStatusRequest: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_BatteryStatusRequest.Extensions.battery_status_request)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_BatteryStatusRequest.Extensions.battery_status_request`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_BatteryStatusRequest_batteryStatusRequest() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_BatteryStatusRequest.Extensions.battery_status_request)
  }

  var Google_Jacquard_Protocol_BleDisconnectRequest_bleDisconnectRequest: Google_Jacquard_Protocol_BleDisconnectRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_BleDisconnectRequest.Extensions.ble_disconnect_request) ?? Google_Jacquard_Protocol_BleDisconnectRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_BleDisconnectRequest.Extensions.ble_disconnect_request, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_BleDisconnectRequest.Extensions.ble_disconnect_request`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_BleDisconnectRequest_bleDisconnectRequest: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_BleDisconnectRequest.Extensions.ble_disconnect_request)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_BleDisconnectRequest.Extensions.ble_disconnect_request`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_BleDisconnectRequest_bleDisconnectRequest() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_BleDisconnectRequest.Extensions.ble_disconnect_request)
  }

  var Google_Jacquard_Protocol_DeviceRebootRequest_deviceRebootRequest: Google_Jacquard_Protocol_DeviceRebootRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DeviceRebootRequest.Extensions.device_reboot_request) ?? Google_Jacquard_Protocol_DeviceRebootRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DeviceRebootRequest.Extensions.device_reboot_request, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DeviceRebootRequest.Extensions.device_reboot_request`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DeviceRebootRequest_deviceRebootRequest: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DeviceRebootRequest.Extensions.device_reboot_request)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DeviceRebootRequest.Extensions.device_reboot_request`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DeviceRebootRequest_deviceRebootRequest() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DeviceRebootRequest.Extensions.device_reboot_request)
  }

  var Google_Jacquard_Protocol_FaultlogGetRequest_faultLogGetRequest: Google_Jacquard_Protocol_FaultlogGetRequest {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_FaultlogGetRequest.Extensions.fault_log_get_request) ?? Google_Jacquard_Protocol_FaultlogGetRequest()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_FaultlogGetRequest.Extensions.fault_log_get_request, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_FaultlogGetRequest.Extensions.fault_log_get_request`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_FaultlogGetRequest_faultLogGetRequest: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_FaultlogGetRequest.Extensions.fault_log_get_request)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_FaultlogGetRequest.Extensions.fault_log_get_request`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_FaultlogGetRequest_faultLogGetRequest() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_FaultlogGetRequest.Extensions.fault_log_get_request)
  }
}

extension Google_Jacquard_Protocol_Response {

  var Google_Jacquard_Protocol_DeviceInfoResponse_deviceInfo: Google_Jacquard_Protocol_DeviceInfoResponse {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DeviceInfoResponse.Extensions.device_info) ?? Google_Jacquard_Protocol_DeviceInfoResponse()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DeviceInfoResponse.Extensions.device_info, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DeviceInfoResponse.Extensions.device_info`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DeviceInfoResponse_deviceInfo: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DeviceInfoResponse.Extensions.device_info)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DeviceInfoResponse.Extensions.device_info`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DeviceInfoResponse_deviceInfo() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DeviceInfoResponse.Extensions.device_info)
  }

  var Google_Jacquard_Protocol_ConfigGetResponse_configGetResponse: Google_Jacquard_Protocol_ConfigGetResponse {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_ConfigGetResponse.Extensions.config_get_response) ?? Google_Jacquard_Protocol_ConfigGetResponse()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_ConfigGetResponse.Extensions.config_get_response, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_ConfigGetResponse.Extensions.config_get_response`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_ConfigGetResponse_configGetResponse: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_ConfigGetResponse.Extensions.config_get_response)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_ConfigGetResponse.Extensions.config_get_response`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_ConfigGetResponse_configGetResponse() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_ConfigGetResponse.Extensions.config_get_response)
  }

  var Google_Jacquard_Protocol_HWGearResponse_hwGearChar: Google_Jacquard_Protocol_HWGearResponse {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_HWGearResponse.Extensions.hw_gear_char) ?? Google_Jacquard_Protocol_HWGearResponse()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_HWGearResponse.Extensions.hw_gear_char, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_HWGearResponse.Extensions.hw_gear_char`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_HWGearResponse_hwGearChar: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_HWGearResponse.Extensions.hw_gear_char)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_HWGearResponse.Extensions.hw_gear_char`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_HWGearResponse_hwGearChar() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_HWGearResponse.Extensions.hw_gear_char)
  }

  var Google_Jacquard_Protocol_HapticResponse_haptic: Google_Jacquard_Protocol_HapticResponse {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_HapticResponse.Extensions.haptic) ?? Google_Jacquard_Protocol_HapticResponse()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_HapticResponse.Extensions.haptic, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_HapticResponse.Extensions.haptic`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_HapticResponse_haptic: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_HapticResponse.Extensions.haptic)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_HapticResponse.Extensions.haptic`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_HapticResponse_haptic() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_HapticResponse.Extensions.haptic)
  }

  var Google_Jacquard_Protocol_DataChannelResponse_data: Google_Jacquard_Protocol_DataChannelResponse {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DataChannelResponse.Extensions.data) ?? Google_Jacquard_Protocol_DataChannelResponse()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DataChannelResponse.Extensions.data, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DataChannelResponse.Extensions.data`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DataChannelResponse_data: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DataChannelResponse.Extensions.data)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DataChannelResponse.Extensions.data`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DataChannelResponse_data() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DataChannelResponse.Extensions.data)
  }

  var Google_Jacquard_Protocol_HelloResponse_hello: Google_Jacquard_Protocol_HelloResponse {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_HelloResponse.Extensions.hello) ?? Google_Jacquard_Protocol_HelloResponse()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_HelloResponse.Extensions.hello, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_HelloResponse.Extensions.hello`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_HelloResponse_hello: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_HelloResponse.Extensions.hello)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_HelloResponse.Extensions.hello`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_HelloResponse_hello() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_HelloResponse.Extensions.hello)
  }

  var Google_Jacquard_Protocol_BeginResponse_begin: Google_Jacquard_Protocol_BeginResponse {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_BeginResponse.Extensions.begin) ?? Google_Jacquard_Protocol_BeginResponse()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_BeginResponse.Extensions.begin, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_BeginResponse.Extensions.begin`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_BeginResponse_begin: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_BeginResponse.Extensions.begin)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_BeginResponse.Extensions.begin`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_BeginResponse_begin() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_BeginResponse.Extensions.begin)
  }

  var Google_Jacquard_Protocol_DFUStatusResponse_dfuStatus: Google_Jacquard_Protocol_DFUStatusResponse {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DFUStatusResponse.Extensions.dfu_status) ?? Google_Jacquard_Protocol_DFUStatusResponse()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DFUStatusResponse.Extensions.dfu_status, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DFUStatusResponse.Extensions.dfu_status`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DFUStatusResponse_dfuStatus: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DFUStatusResponse.Extensions.dfu_status)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DFUStatusResponse.Extensions.dfu_status`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DFUStatusResponse_dfuStatus() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DFUStatusResponse.Extensions.dfu_status)
  }

  var Google_Jacquard_Protocol_DFUWriteResponse_dfuWrite: Google_Jacquard_Protocol_DFUWriteResponse {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DFUWriteResponse.Extensions.dfu_write) ?? Google_Jacquard_Protocol_DFUWriteResponse()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DFUWriteResponse.Extensions.dfu_write, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DFUWriteResponse.Extensions.dfu_write`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DFUWriteResponse_dfuWrite: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DFUWriteResponse.Extensions.dfu_write)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DFUWriteResponse.Extensions.dfu_write`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DFUWriteResponse_dfuWrite() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DFUWriteResponse.Extensions.dfu_write)
  }

  var Google_Jacquard_Protocol_UJTConfigResponse_configResponse: Google_Jacquard_Protocol_UJTConfigResponse {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_UJTConfigResponse.Extensions.config_response) ?? Google_Jacquard_Protocol_UJTConfigResponse()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_UJTConfigResponse.Extensions.config_response, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_UJTConfigResponse.Extensions.config_response`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_UJTConfigResponse_configResponse: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_UJTConfigResponse.Extensions.config_response)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_UJTConfigResponse.Extensions.config_response`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_UJTConfigResponse_configResponse() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_UJTConfigResponse.Extensions.config_response)
  }

  var Google_Jacquard_Protocol_DataCollectionStartResponse_start: Google_Jacquard_Protocol_DataCollectionStartResponse {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStartResponse.Extensions.start) ?? Google_Jacquard_Protocol_DataCollectionStartResponse()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStartResponse.Extensions.start, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DataCollectionStartResponse.Extensions.start`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DataCollectionStartResponse_start: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStartResponse.Extensions.start)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DataCollectionStartResponse.Extensions.start`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DataCollectionStartResponse_start() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStartResponse.Extensions.start)
  }

  var Google_Jacquard_Protocol_DataCollectionStopResponse_stop: Google_Jacquard_Protocol_DataCollectionStopResponse {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStopResponse.Extensions.stop) ?? Google_Jacquard_Protocol_DataCollectionStopResponse()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStopResponse.Extensions.stop, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DataCollectionStopResponse.Extensions.stop`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DataCollectionStopResponse_stop: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStopResponse.Extensions.stop)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DataCollectionStopResponse.Extensions.stop`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DataCollectionStopResponse_stop() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStopResponse.Extensions.stop)
  }

  var Google_Jacquard_Protocol_DataCollectionStatusResponse_status: Google_Jacquard_Protocol_DataCollectionStatusResponse {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStatusResponse.Extensions.status) ?? Google_Jacquard_Protocol_DataCollectionStatusResponse()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStatusResponse.Extensions.status, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DataCollectionStatusResponse.Extensions.status`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DataCollectionStatusResponse_status: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStatusResponse.Extensions.status)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DataCollectionStatusResponse.Extensions.status`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DataCollectionStatusResponse_status() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionStatusResponse.Extensions.status)
  }

  var Google_Jacquard_Protocol_DataCollectionTrialListResponse_trialList: Google_Jacquard_Protocol_DataCollectionTrialListResponse {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionTrialListResponse.Extensions.trial_list) ?? Google_Jacquard_Protocol_DataCollectionTrialListResponse()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionTrialListResponse.Extensions.trial_list, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DataCollectionTrialListResponse.Extensions.trial_list`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DataCollectionTrialListResponse_trialList: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionTrialListResponse.Extensions.trial_list)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DataCollectionTrialListResponse.Extensions.trial_list`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DataCollectionTrialListResponse_trialList() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionTrialListResponse.Extensions.trial_list)
  }

  var Google_Jacquard_Protocol_DataCollectionTrialDataResponse_trialData: Google_Jacquard_Protocol_DataCollectionTrialDataResponse {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionTrialDataResponse.Extensions.trial_data) ?? Google_Jacquard_Protocol_DataCollectionTrialDataResponse()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionTrialDataResponse.Extensions.trial_data, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DataCollectionTrialDataResponse.Extensions.trial_data`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DataCollectionTrialDataResponse_trialData: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionTrialDataResponse.Extensions.trial_data)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DataCollectionTrialDataResponse.Extensions.trial_data`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DataCollectionTrialDataResponse_trialData() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionTrialDataResponse.Extensions.trial_data)
  }

  var Google_Jacquard_Protocol_DataCollectionEraseTrialDataResponse_eraseTrialData: Google_Jacquard_Protocol_DataCollectionEraseTrialDataResponse {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionEraseTrialDataResponse.Extensions.erase_trial_data) ?? Google_Jacquard_Protocol_DataCollectionEraseTrialDataResponse()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionEraseTrialDataResponse.Extensions.erase_trial_data, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DataCollectionEraseTrialDataResponse.Extensions.erase_trial_data`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DataCollectionEraseTrialDataResponse_eraseTrialData: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionEraseTrialDataResponse.Extensions.erase_trial_data)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DataCollectionEraseTrialDataResponse.Extensions.erase_trial_data`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DataCollectionEraseTrialDataResponse_eraseTrialData() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionEraseTrialDataResponse.Extensions.erase_trial_data)
  }

  var Google_Jacquard_Protocol_DataCollectionEraseAllDataResponse_eraseAllData: Google_Jacquard_Protocol_DataCollectionEraseAllDataResponse {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionEraseAllDataResponse.Extensions.erase_all_data) ?? Google_Jacquard_Protocol_DataCollectionEraseAllDataResponse()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionEraseAllDataResponse.Extensions.erase_all_data, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_DataCollectionEraseAllDataResponse.Extensions.erase_all_data`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_DataCollectionEraseAllDataResponse_eraseAllData: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionEraseAllDataResponse.Extensions.erase_all_data)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_DataCollectionEraseAllDataResponse.Extensions.erase_all_data`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_DataCollectionEraseAllDataResponse_eraseAllData() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_DataCollectionEraseAllDataResponse.Extensions.erase_all_data)
  }

  var Google_Jacquard_Protocol_ListModuleResponse_listModules: Google_Jacquard_Protocol_ListModuleResponse {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_ListModuleResponse.Extensions.list_modules) ?? Google_Jacquard_Protocol_ListModuleResponse()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_ListModuleResponse.Extensions.list_modules, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_ListModuleResponse.Extensions.list_modules`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_ListModuleResponse_listModules: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_ListModuleResponse.Extensions.list_modules)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_ListModuleResponse.Extensions.list_modules`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_ListModuleResponse_listModules() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_ListModuleResponse.Extensions.list_modules)
  }

  var Google_Jacquard_Protocol_BatteryStatusResponse_batteryStatusResponse: Google_Jacquard_Protocol_BatteryStatusResponse {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_BatteryStatusResponse.Extensions.battery_status_response) ?? Google_Jacquard_Protocol_BatteryStatusResponse()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_BatteryStatusResponse.Extensions.battery_status_response, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_BatteryStatusResponse.Extensions.battery_status_response`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_BatteryStatusResponse_batteryStatusResponse: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_BatteryStatusResponse.Extensions.battery_status_response)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_BatteryStatusResponse.Extensions.battery_status_response`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_BatteryStatusResponse_batteryStatusResponse() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_BatteryStatusResponse.Extensions.battery_status_response)
  }

  var Google_Jacquard_Protocol_FaultlogGetResponse_faultLogGetResponse: Google_Jacquard_Protocol_FaultlogGetResponse {
    get {return getExtensionValue(ext: Google_Jacquard_Protocol_FaultlogGetResponse.Extensions.fault_log_get_response) ?? Google_Jacquard_Protocol_FaultlogGetResponse()}
    set {setExtensionValue(ext: Google_Jacquard_Protocol_FaultlogGetResponse.Extensions.fault_log_get_response, value: newValue)}
  }
  /// Returns true if extension `Google_Jacquard_Protocol_FaultlogGetResponse.Extensions.fault_log_get_response`
  /// has been explicitly set.
  var hasGoogle_Jacquard_Protocol_FaultlogGetResponse_faultLogGetResponse: Bool {
    return hasExtensionValue(ext: Google_Jacquard_Protocol_FaultlogGetResponse.Extensions.fault_log_get_response)
  }
  /// Clears the value of extension `Google_Jacquard_Protocol_FaultlogGetResponse.Extensions.fault_log_get_response`.
  /// Subsequent reads from it will return its default value.
  mutating func clearGoogle_Jacquard_Protocol_FaultlogGetResponse_faultLogGetResponse() {
    clearExtensionValue(ext: Google_Jacquard_Protocol_FaultlogGetResponse.Extensions.fault_log_get_response)
  }

}

// MARK: - File's ExtensionMap: Google_Jacquard_Protocol_Jacquard_Extensions

/// A `SwiftProtobuf.SimpleExtensionMap` that includes all of the extensions defined by
/// this .proto file. It can be used any place an `SwiftProtobuf.ExtensionMap` is needed
/// in parsing, or it can be combined with other `SwiftProtobuf.SimpleExtensionMap`s to create
/// a larger `SwiftProtobuf.SimpleExtensionMap`.
let Google_Jacquard_Protocol_Jacquard_Extensions: SwiftProtobuf.SimpleExtensionMap = [
  Google_Jacquard_Protocol_SupportedRequest.Extensions.supported,
  Google_Jacquard_Protocol_DeviceInfoRequest.Extensions.device_info,
  Google_Jacquard_Protocol_DeviceInfoResponse.Extensions.device_info,
  Google_Jacquard_Protocol_LedPatternRequest.Extensions.led_pattern_request,
  Google_Jacquard_Protocol_LedPatternNotification.Extensions.led_pattern_notif,
  Google_Jacquard_Protocol_ConfigSetRequest.Extensions.config_set_request,
  Google_Jacquard_Protocol_ConfigGetRequest.Extensions.config_get_request,
  Google_Jacquard_Protocol_ConfigGetResponse.Extensions.config_get_response,
  Google_Jacquard_Protocol_ConfigGetIndexRequest.Extensions.config_get_index,
  Google_Jacquard_Protocol_HWGearRequest.Extensions.hw_gear_char,
  Google_Jacquard_Protocol_HWGearResponse.Extensions.hw_gear_char,
  Google_Jacquard_Protocol_HapticRequest.Extensions.haptic,
  Google_Jacquard_Protocol_HapticResponse.Extensions.haptic,
  Google_Jacquard_Protocol_HapticNotification.Extensions.haptic,
  Google_Jacquard_Protocol_DataChannelRequest.Extensions.data,
  Google_Jacquard_Protocol_DataChannelResponse.Extensions.data,
  Google_Jacquard_Protocol_DataChannelNotification.Extensions.data,
  Google_Jacquard_Protocol_HelloResponse.Extensions.hello,
  Google_Jacquard_Protocol_BeginRequest.Extensions.begin,
  Google_Jacquard_Protocol_BeginResponse.Extensions.begin,
  Google_Jacquard_Protocol_DisconnectNotification.Extensions.disconnect_notification,
  Google_Jacquard_Protocol_AttachedNotification.Extensions.attached,
  Google_Jacquard_Protocol_ErrorNotification.Extensions.error_notification,
  Google_Jacquard_Protocol_DFUStatusRequest.Extensions.dfu_status,
  Google_Jacquard_Protocol_DFUStatusResponse.Extensions.dfu_status,
  Google_Jacquard_Protocol_DFUPrepareRequest.Extensions.dfu_prepare,
  Google_Jacquard_Protocol_DFUWriteRequest.Extensions.dfu_write,
  Google_Jacquard_Protocol_DFUWriteResponse.Extensions.dfu_write,
  Google_Jacquard_Protocol_DFUExecuteRequest.Extensions.dfu_execute,
  Google_Jacquard_Protocol_DFUExecuteUpdateNotification.Extensions.dfu_execute_udpate_notif,
  Google_Jacquard_Protocol_GenericEncryptedNotification.Extensions.generic_encrypted_notice,
  Google_Jacquard_Protocol_GenericPlainNotification.Extensions.generic_plain_notice,
  Google_Jacquard_Protocol_UJTConfigReadRequest.Extensions.config_read,
  Google_Jacquard_Protocol_UJTConfigWriteRequest.Extensions.config_write,
  Google_Jacquard_Protocol_UJTConfigResponse.Extensions.config_response,
  Google_Jacquard_Protocol_DataCollectionStartRequest.Extensions.start,
  Google_Jacquard_Protocol_DataCollectionStartResponse.Extensions.start,
  Google_Jacquard_Protocol_DataCollectionStopRequest.Extensions.stop,
  Google_Jacquard_Protocol_DataCollectionStopResponse.Extensions.stop,
  Google_Jacquard_Protocol_DataCollectionStatusRequest.Extensions.status,
  Google_Jacquard_Protocol_DataCollectionStatusResponse.Extensions.status,
  Google_Jacquard_Protocol_DataCollectionTrialListRequest.Extensions.trial_list,
  Google_Jacquard_Protocol_DataCollectionTrialListResponse.Extensions.trial_list,
  Google_Jacquard_Protocol_DataCollectionTrialListNotification.Extensions.trial_list,
  Google_Jacquard_Protocol_DataCollectionTrialDataRequest.Extensions.trial_data,
  Google_Jacquard_Protocol_DataCollectionTrialDataResponse.Extensions.trial_data,
  Google_Jacquard_Protocol_DataCollectionEraseTrialDataRequest.Extensions.erase_trial_data,
  Google_Jacquard_Protocol_DataCollectionEraseTrialDataResponse.Extensions.erase_trial_data,
  Google_Jacquard_Protocol_DataCollectionEraseAllDataRequest.Extensions.erase_all_data,
  Google_Jacquard_Protocol_DataCollectionEraseAllDataResponse.Extensions.erase_all_data,
  Google_Jacquard_Protocol_DataCollectionProgressNotification.Extensions.progress,
  Google_Jacquard_Protocol_LoadModuleRequest.Extensions.load_module,
  Google_Jacquard_Protocol_LoadModuleNotification.Extensions.load_module_notif,
  Google_Jacquard_Protocol_UnloadModuleRequest.Extensions.unload_module,
  Google_Jacquard_Protocol_ListModuleResponse.Extensions.list_modules,
  Google_Jacquard_Protocol_DeleteModuleRequest.Extensions.delete_module,
  Google_Jacquard_Protocol_BatteryStatusRequest.Extensions.battery_status_request,
  Google_Jacquard_Protocol_BatteryStatusResponse.Extensions.battery_status_response,
  Google_Jacquard_Protocol_BatteryStatusNotification.Extensions.battery_status_notification,
  Google_Jacquard_Protocol_BleDisconnectRequest.Extensions.ble_disconnect_request,
  Google_Jacquard_Protocol_DeviceRebootRequest.Extensions.device_reboot_request,
  Google_Jacquard_Protocol_FaultlogGetRequest.Extensions.fault_log_get_request,
  Google_Jacquard_Protocol_FaultlogGetResponse.Extensions.fault_log_get_response
]

// Extension Objects - The only reason these might be needed is when manually
// constructing a `SimpleExtensionMap`, otherwise, use the above _Extension Properties_
// accessors for the extension fields on the messages directly.

extension Google_Jacquard_Protocol_SupportedRequest {
  enum Extensions {
    static let supported = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_SupportedRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 99,
      fieldName: "google.jacquard.protocol.SupportedRequest.supported"
    )
  }
}

extension Google_Jacquard_Protocol_DeviceInfoRequest {
  enum Extensions {
    static let device_info = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DeviceInfoRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 103,
      fieldName: "google.jacquard.protocol.DeviceInfoRequest.device_info"
    )
  }
}

extension Google_Jacquard_Protocol_DeviceInfoResponse {
  enum Extensions {
    static let device_info = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DeviceInfoResponse>, Google_Jacquard_Protocol_Response>(
      _protobuf_fieldNumber: 103,
      fieldName: "google.jacquard.protocol.DeviceInfoResponse.device_info"
    )
  }
}

extension Google_Jacquard_Protocol_LedPatternRequest {
  enum Extensions {
    static let led_pattern_request = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_LedPatternRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 118,
      fieldName: "google.jacquard.protocol.LedPatternRequest.led_pattern_request"
    )
  }
}

extension Google_Jacquard_Protocol_LedPatternNotification {
  enum Extensions {
    static let led_pattern_notif = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_LedPatternNotification>, Google_Jacquard_Protocol_Notification>(
      _protobuf_fieldNumber: 118,
      fieldName: "google.jacquard.protocol.LedPatternNotification.led_pattern_notif"
    )
  }
}

extension Google_Jacquard_Protocol_ConfigSetRequest {
  enum Extensions {
    static let config_set_request = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_ConfigSetRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 122,
      fieldName: "google.jacquard.protocol.ConfigSetRequest.config_set_request"
    )
  }
}

extension Google_Jacquard_Protocol_ConfigGetRequest {
  enum Extensions {
    static let config_get_request = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_ConfigGetRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 123,
      fieldName: "google.jacquard.protocol.ConfigGetRequest.config_get_request"
    )
  }
}

extension Google_Jacquard_Protocol_ConfigGetResponse {
  enum Extensions {
    static let config_get_response = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_ConfigGetResponse>, Google_Jacquard_Protocol_Response>(
      _protobuf_fieldNumber: 123,
      fieldName: "google.jacquard.protocol.ConfigGetResponse.config_get_response"
    )
  }
}

extension Google_Jacquard_Protocol_ConfigGetIndexRequest {
  enum Extensions {
    static let config_get_index = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_ConfigGetIndexRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 124,
      fieldName: "google.jacquard.protocol.ConfigGetIndexRequest.config_get_index"
    )
  }
}

extension Google_Jacquard_Protocol_HWGearRequest {
  enum Extensions {
    static let hw_gear_char = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_HWGearRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 902,
      fieldName: "google.jacquard.protocol.HWGearRequest.hw_gear_char"
    )
  }
}

extension Google_Jacquard_Protocol_HWGearResponse {
  enum Extensions {
    static let hw_gear_char = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_HWGearResponse>, Google_Jacquard_Protocol_Response>(
      _protobuf_fieldNumber: 902,
      fieldName: "google.jacquard.protocol.HWGearResponse.hw_gear_char"
    )
  }
}

extension Google_Jacquard_Protocol_HapticRequest {
  enum Extensions {
    static let haptic = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_HapticRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 906,
      fieldName: "google.jacquard.protocol.HapticRequest.haptic"
    )
  }
}

extension Google_Jacquard_Protocol_HapticResponse {
  enum Extensions {
    static let haptic = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_HapticResponse>, Google_Jacquard_Protocol_Response>(
      _protobuf_fieldNumber: 906,
      fieldName: "google.jacquard.protocol.HapticResponse.haptic"
    )
  }
}

extension Google_Jacquard_Protocol_HapticNotification {
  enum Extensions {
    static let haptic = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_HapticNotification>, Google_Jacquard_Protocol_Notification>(
      _protobuf_fieldNumber: 916,
      fieldName: "google.jacquard.protocol.HapticNotification.haptic"
    )
  }
}

extension Google_Jacquard_Protocol_DataChannelRequest {
  enum Extensions {
    static let data = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DataChannelRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 907,
      fieldName: "google.jacquard.protocol.DataChannelRequest.data"
    )
  }
}

extension Google_Jacquard_Protocol_DataChannelResponse {
  enum Extensions {
    static let data = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DataChannelResponse>, Google_Jacquard_Protocol_Response>(
      _protobuf_fieldNumber: 907,
      fieldName: "google.jacquard.protocol.DataChannelResponse.data"
    )
  }
}

extension Google_Jacquard_Protocol_DataChannelNotification {
  enum Extensions {
    static let data = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DataChannelNotification>, Google_Jacquard_Protocol_Notification>(
      _protobuf_fieldNumber: 917,
      fieldName: "google.jacquard.protocol.DataChannelNotification.data"
    )
  }
}

extension Google_Jacquard_Protocol_HelloResponse {
  enum Extensions {
    static let hello = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_HelloResponse>, Google_Jacquard_Protocol_Response>(
      _protobuf_fieldNumber: 100,
      fieldName: "google.jacquard.protocol.HelloResponse.hello"
    )
  }
}

extension Google_Jacquard_Protocol_BeginRequest {
  enum Extensions {
    static let begin = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_BeginRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 101,
      fieldName: "google.jacquard.protocol.BeginRequest.begin"
    )
  }
}

extension Google_Jacquard_Protocol_BeginResponse {
  enum Extensions {
    static let begin = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_BeginResponse>, Google_Jacquard_Protocol_Response>(
      _protobuf_fieldNumber: 101,
      fieldName: "google.jacquard.protocol.BeginResponse.begin"
    )
  }
}

extension Google_Jacquard_Protocol_DisconnectNotification {
  enum Extensions {
    static let disconnect_notification = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DisconnectNotification>, Google_Jacquard_Protocol_Notification>(
      _protobuf_fieldNumber: 102,
      fieldName: "google.jacquard.protocol.DisconnectNotification.disconnect_notification"
    )
  }
}

extension Google_Jacquard_Protocol_AttachedNotification {
  enum Extensions {
    static let attached = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_AttachedNotification>, Google_Jacquard_Protocol_Notification>(
      _protobuf_fieldNumber: 109,
      fieldName: "google.jacquard.protocol.AttachedNotification.attached"
    )
  }
}

extension Google_Jacquard_Protocol_ErrorNotification {
  enum Extensions {
    static let error_notification = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_ErrorNotification>, Google_Jacquard_Protocol_Notification>(
      _protobuf_fieldNumber: 117,
      fieldName: "google.jacquard.protocol.ErrorNotification.error_notification"
    )
  }
}

extension Google_Jacquard_Protocol_DFUStatusRequest {
  enum Extensions {
    static let dfu_status = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DFUStatusRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 200,
      fieldName: "google.jacquard.protocol.DFUStatusRequest.dfu_status"
    )
  }
}

extension Google_Jacquard_Protocol_DFUStatusResponse {
  enum Extensions {
    static let dfu_status = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DFUStatusResponse>, Google_Jacquard_Protocol_Response>(
      _protobuf_fieldNumber: 200,
      fieldName: "google.jacquard.protocol.DFUStatusResponse.dfu_status"
    )
  }
}

extension Google_Jacquard_Protocol_DFUPrepareRequest {
  enum Extensions {
    static let dfu_prepare = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DFUPrepareRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 201,
      fieldName: "google.jacquard.protocol.DFUPrepareRequest.dfu_prepare"
    )
  }
}

extension Google_Jacquard_Protocol_DFUWriteRequest {
  enum Extensions {
    static let dfu_write = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DFUWriteRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 202,
      fieldName: "google.jacquard.protocol.DFUWriteRequest.dfu_write"
    )
  }
}

extension Google_Jacquard_Protocol_DFUWriteResponse {
  enum Extensions {
    static let dfu_write = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DFUWriteResponse>, Google_Jacquard_Protocol_Response>(
      _protobuf_fieldNumber: 202,
      fieldName: "google.jacquard.protocol.DFUWriteResponse.dfu_write"
    )
  }
}

extension Google_Jacquard_Protocol_DFUExecuteRequest {
  enum Extensions {
    static let dfu_execute = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DFUExecuteRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 203,
      fieldName: "google.jacquard.protocol.DFUExecuteRequest.dfu_execute"
    )
  }
}

extension Google_Jacquard_Protocol_DFUExecuteUpdateNotification {
  enum Extensions {
    static let dfu_execute_udpate_notif = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DFUExecuteUpdateNotification>, Google_Jacquard_Protocol_Notification>(
      _protobuf_fieldNumber: 204,
      fieldName: "google.jacquard.protocol.DFUExecuteUpdateNotification.dfu_execute_udpate_notif"
    )
  }
}

extension Google_Jacquard_Protocol_GenericEncryptedNotification {
  enum Extensions {
    static let generic_encrypted_notice = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_GenericEncryptedNotification>, Google_Jacquard_Protocol_Notification>(
      _protobuf_fieldNumber: 401,
      fieldName: "google.jacquard.protocol.GenericEncryptedNotification.generic_encrypted_notice"
    )
  }
}

extension Google_Jacquard_Protocol_GenericPlainNotification {
  enum Extensions {
    static let generic_plain_notice = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_GenericPlainNotification>, Google_Jacquard_Protocol_Notification>(
      _protobuf_fieldNumber: 402,
      fieldName: "google.jacquard.protocol.GenericPlainNotification.generic_plain_notice"
    )
  }
}

extension Google_Jacquard_Protocol_UJTConfigReadRequest {
  enum Extensions {
    static let config_read = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_UJTConfigReadRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 1100,
      fieldName: "google.jacquard.protocol.UJTConfigReadRequest.config_read"
    )
  }
}

extension Google_Jacquard_Protocol_UJTConfigWriteRequest {
  enum Extensions {
    static let config_write = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_UJTConfigWriteRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 1101,
      fieldName: "google.jacquard.protocol.UJTConfigWriteRequest.config_write"
    )
  }
}

extension Google_Jacquard_Protocol_UJTConfigResponse {
  enum Extensions {
    static let config_response = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_UJTConfigResponse>, Google_Jacquard_Protocol_Response>(
      _protobuf_fieldNumber: 1101,
      fieldName: "google.jacquard.protocol.UJTConfigResponse.config_response"
    )
  }
}

extension Google_Jacquard_Protocol_DataCollectionStartRequest {
  enum Extensions {
    static let start = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DataCollectionStartRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 1001,
      fieldName: "google.jacquard.protocol.DataCollectionStartRequest.start"
    )
  }
}

extension Google_Jacquard_Protocol_DataCollectionStartResponse {
  enum Extensions {
    static let start = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DataCollectionStartResponse>, Google_Jacquard_Protocol_Response>(
      _protobuf_fieldNumber: 1001,
      fieldName: "google.jacquard.protocol.DataCollectionStartResponse.start"
    )
  }
}

extension Google_Jacquard_Protocol_DataCollectionStopRequest {
  enum Extensions {
    static let stop = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DataCollectionStopRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 1002,
      fieldName: "google.jacquard.protocol.DataCollectionStopRequest.stop"
    )
  }
}

extension Google_Jacquard_Protocol_DataCollectionStopResponse {
  enum Extensions {
    static let stop = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DataCollectionStopResponse>, Google_Jacquard_Protocol_Response>(
      _protobuf_fieldNumber: 1002,
      fieldName: "google.jacquard.protocol.DataCollectionStopResponse.stop"
    )
  }
}

extension Google_Jacquard_Protocol_DataCollectionStatusRequest {
  enum Extensions {
    static let status = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DataCollectionStatusRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 1003,
      fieldName: "google.jacquard.protocol.DataCollectionStatusRequest.status"
    )
  }
}

extension Google_Jacquard_Protocol_DataCollectionStatusResponse {
  enum Extensions {
    static let status = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DataCollectionStatusResponse>, Google_Jacquard_Protocol_Response>(
      _protobuf_fieldNumber: 1003,
      fieldName: "google.jacquard.protocol.DataCollectionStatusResponse.status"
    )
  }
}

extension Google_Jacquard_Protocol_DataCollectionTrialListRequest {
  enum Extensions {
    static let trial_list = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DataCollectionTrialListRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 1004,
      fieldName: "google.jacquard.protocol.DataCollectionTrialListRequest.trial_list"
    )
  }
}

extension Google_Jacquard_Protocol_DataCollectionTrialListResponse {
  enum Extensions {
    static let trial_list = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DataCollectionTrialListResponse>, Google_Jacquard_Protocol_Response>(
      _protobuf_fieldNumber: 1004,
      fieldName: "google.jacquard.protocol.DataCollectionTrialListResponse.trial_list"
    )
  }
}

extension Google_Jacquard_Protocol_DataCollectionTrialListNotification {
  enum Extensions {
    static let trial_list = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DataCollectionTrialListNotification>, Google_Jacquard_Protocol_Notification>(
      _protobuf_fieldNumber: 1004,
      fieldName: "google.jacquard.protocol.DataCollectionTrialListNotification.trial_list"
    )
  }
}

extension Google_Jacquard_Protocol_DataCollectionTrialDataRequest {
  enum Extensions {
    static let trial_data = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DataCollectionTrialDataRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 1005,
      fieldName: "google.jacquard.protocol.DataCollectionTrialDataRequest.trial_data"
    )
  }
}

extension Google_Jacquard_Protocol_DataCollectionTrialDataResponse {
  enum Extensions {
    static let trial_data = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DataCollectionTrialDataResponse>, Google_Jacquard_Protocol_Response>(
      _protobuf_fieldNumber: 1005,
      fieldName: "google.jacquard.protocol.DataCollectionTrialDataResponse.trial_data"
    )
  }
}

extension Google_Jacquard_Protocol_DataCollectionEraseTrialDataRequest {
  enum Extensions {
    static let erase_trial_data = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DataCollectionEraseTrialDataRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 1007,
      fieldName: "google.jacquard.protocol.DataCollectionEraseTrialDataRequest.erase_trial_data"
    )
  }
}

extension Google_Jacquard_Protocol_DataCollectionEraseTrialDataResponse {
  enum Extensions {
    static let erase_trial_data = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DataCollectionEraseTrialDataResponse>, Google_Jacquard_Protocol_Response>(
      _protobuf_fieldNumber: 1007,
      fieldName: "google.jacquard.protocol.DataCollectionEraseTrialDataResponse.erase_trial_data"
    )
  }
}

extension Google_Jacquard_Protocol_DataCollectionEraseAllDataRequest {
  enum Extensions {
    static let erase_all_data = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DataCollectionEraseAllDataRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 1008,
      fieldName: "google.jacquard.protocol.DataCollectionEraseAllDataRequest.erase_all_data"
    )
  }
}

extension Google_Jacquard_Protocol_DataCollectionEraseAllDataResponse {
  enum Extensions {
    static let erase_all_data = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DataCollectionEraseAllDataResponse>, Google_Jacquard_Protocol_Response>(
      _protobuf_fieldNumber: 1008,
      fieldName: "google.jacquard.protocol.DataCollectionEraseAllDataResponse.erase_all_data"
    )
  }
}

extension Google_Jacquard_Protocol_DataCollectionProgressNotification {
  enum Extensions {
    static let progress = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DataCollectionProgressNotification>, Google_Jacquard_Protocol_Notification>(
      _protobuf_fieldNumber: 1009,
      fieldName: "google.jacquard.protocol.DataCollectionProgressNotification.progress"
    )
  }
}

extension Google_Jacquard_Protocol_LoadModuleRequest {
  enum Extensions {
    static let load_module = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_LoadModuleRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 1200,
      fieldName: "google.jacquard.protocol.LoadModuleRequest.load_module"
    )
  }
}

extension Google_Jacquard_Protocol_LoadModuleNotification {
  enum Extensions {
    static let load_module_notif = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_LoadModuleNotification>, Google_Jacquard_Protocol_Notification>(
      _protobuf_fieldNumber: 1200,
      fieldName: "google.jacquard.protocol.LoadModuleNotification.load_module_notif"
    )
  }
}

extension Google_Jacquard_Protocol_UnloadModuleRequest {
  enum Extensions {
    static let unload_module = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_UnloadModuleRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 1201,
      fieldName: "google.jacquard.protocol.UnloadModuleRequest.unload_module"
    )
  }
}

extension Google_Jacquard_Protocol_ListModuleResponse {
  enum Extensions {
    static let list_modules = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_ListModuleResponse>, Google_Jacquard_Protocol_Response>(
      _protobuf_fieldNumber: 1202,
      fieldName: "google.jacquard.protocol.ListModuleResponse.list_modules"
    )
  }
}

extension Google_Jacquard_Protocol_DeleteModuleRequest {
  enum Extensions {
    static let delete_module = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DeleteModuleRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 1203,
      fieldName: "google.jacquard.protocol.DeleteModuleRequest.delete_module"
    )
  }
}

extension Google_Jacquard_Protocol_BatteryStatusRequest {
  enum Extensions {
    static let battery_status_request = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_BatteryStatusRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 121,
      fieldName: "google.jacquard.protocol.BatteryStatusRequest.battery_status_request"
    )
  }
}

extension Google_Jacquard_Protocol_BatteryStatusResponse {
  enum Extensions {
    static let battery_status_response = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_BatteryStatusResponse>, Google_Jacquard_Protocol_Response>(
      _protobuf_fieldNumber: 121,
      fieldName: "google.jacquard.protocol.BatteryStatusResponse.battery_status_response"
    )
  }
}

extension Google_Jacquard_Protocol_BatteryStatusNotification {
  enum Extensions {
    static let battery_status_notification = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_BatteryStatusNotification>, Google_Jacquard_Protocol_Notification>(
      _protobuf_fieldNumber: 121,
      fieldName: "google.jacquard.protocol.BatteryStatusNotification.battery_status_notification"
    )
  }
}

extension Google_Jacquard_Protocol_BleDisconnectRequest {
  enum Extensions {
    static let ble_disconnect_request = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_BleDisconnectRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 125,
      fieldName: "google.jacquard.protocol.BleDisconnectRequest.ble_disconnect_request"
    )
  }
}

extension Google_Jacquard_Protocol_DeviceRebootRequest {
  enum Extensions {
    static let device_reboot_request = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_DeviceRebootRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 126,
      fieldName: "google.jacquard.protocol.DeviceRebootRequest.device_reboot_request"
    )
  }
}

extension Google_Jacquard_Protocol_FaultlogGetRequest {
  enum Extensions {
    static let fault_log_get_request = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_FaultlogGetRequest>, Google_Jacquard_Protocol_Request>(
      _protobuf_fieldNumber: 127,
      fieldName: "google.jacquard.protocol.FaultlogGetRequest.fault_log_get_request"
    )
  }
}

extension Google_Jacquard_Protocol_FaultlogGetResponse {
  enum Extensions {
    static let fault_log_get_response = SwiftProtobuf.MessageExtension<SwiftProtobuf.OptionalMessageExtensionField<Google_Jacquard_Protocol_FaultlogGetResponse>, Google_Jacquard_Protocol_Response>(
      _protobuf_fieldNumber: 127,
      fieldName: "google.jacquard.protocol.FaultlogGetResponse.fault_log_get_response"
    )
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.jacquard.protocol"

extension Google_Jacquard_Protocol_Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STATUS_OK"),
    1: .same(proto: "ERROR_UNSUPPORTED"),
    2: .same(proto: "ERROR_BADPARAM"),
    3: .same(proto: "ERROR_BATTERY"),
    4: .same(proto: "ERROR_HARDWARE"),
    5: .same(proto: "ERROR_AUTH"),
    6: .same(proto: "ERROR_DEVICE_TYPE_INFO"),
    7: .same(proto: "ERROR_INVALID_STATE"),
    8: .same(proto: "ERROR_FLASH_ACCESS"),
    9: .same(proto: "ERROR_CHECKSUM"),
    10: .same(proto: "ERROR_BUSY"),
    253: .same(proto: "ERROR_APP_TIMEOUT"),
    254: .same(proto: "ERROR_APP_UNKNOWN"),
    255: .same(proto: "ERROR_UNKNOWN"),
  ]
}

extension Google_Jacquard_Protocol_Domain: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BASE"),
    1: .same(proto: "DFU"),
    5: .same(proto: "BOUNCEBACK"),
    6: .same(proto: "DEVELOPER"),
    8: .same(proto: "GEAR"),
    9: .same(proto: "DATA_COLLECTION"),
    10: .same(proto: "MODULE"),
  ]
}

extension Google_Jacquard_Protocol_PatternType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PATTERN_TYPE_NONE"),
    1: .same(proto: "PATTERN_TYPE_SOLID"),
    2: .same(proto: "PATTERN_TYPE_BREATHING"),
    3: .same(proto: "PATTERN_TYPE_PULSING"),
    4: .same(proto: "PATTERN_TYPE_SINGLE_BLINK"),
    5: .same(proto: "PATTERN_TYPE_DOUBLE_BLINK"),
    6: .same(proto: "PATTERN_TYPE_TRIPPLE_BLINK"),
    7: .same(proto: "PATTERN_TYPE_CUSTOM"),
  ]
}

extension Google_Jacquard_Protocol_LogLevel: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LOG_VERBOSE_LEVEL__OFF"),
    1: .same(proto: "LOG_VERBOSE_LEVEL__DEBUG"),
    2: .same(proto: "LOG_VERBOSE_LEVEL__ERROR"),
    3: .same(proto: "LOG_VERBOSE_LEVEL__IMPORTANT"),
    4: .same(proto: "LOG_VERBOSE_LEVEL__INFO"),
    5: .same(proto: "LOG_VERBOSE_LEVEL__DATA"),
    6: .same(proto: "LOG_VERBOSE_LEVEL__ALL"),
  ]
}

extension Google_Jacquard_Protocol_Opcode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SUPPORTED"),
    1: .aliased(proto: "HELLO", aliases: ["DFU_STATUS", "CONSOLE_OUTPUT", "DATA_COLLECTION_START"]),
    2: .aliased(proto: "BEGIN", aliases: ["DFU_PREPARE", "CONSOLE_INPUT", "GEAR_HWCHAR", "DATA_COLLECTION_STOP"]),
    3: .aliased(proto: "DISCONNECT", aliases: ["DFU_WRITE", "CONSOLE_OPTIONS", "GEAR_TEST", "DATA_COLLECTION_STATUS"]),
    4: .aliased(proto: "DEVICEINFO", aliases: ["DFU_EXECUTE", "GEAR_INFO", "DATA_COLLECTION_TRIAL_LIST"]),
    5: .aliased(proto: "GESTURE", aliases: ["GEAR_LED", "DATA_COLLECTION_TRIAL_DATA"]),
    6: .aliased(proto: "ACTIVITY", aliases: ["GEAR_HAPTIC", "DATA_COLLECTION_TRIAL_DATA_ERASE"]),
    7: .aliased(proto: "WEARSTATE", aliases: ["GEAR_DATA", "DATA_COLLECTION_DATA_ERASE"]),
    8: .aliased(proto: "PATTERN", aliases: ["GEAR_BUFFER"]),
    9: .aliased(proto: "ATTACHED", aliases: ["GEAR_POWER"]),
    10: .aliased(proto: "CONFIG_READ", aliases: ["GEAR_ALWAYS_TOGETHER_CONFIG"]),
    11: .same(proto: "CONFIG_WRITE"),
    14: .same(proto: "METRICS"),
    15: .same(proto: "METRICS_NOTIFY"),
    16: .same(proto: "ERROR"),
    17: .same(proto: "LED_PATTERN"),
    18: .same(proto: "LOAD_MODULE"),
    19: .same(proto: "UNLOAD_MODULE"),
    20: .same(proto: "LIST_MODULES"),
    21: .same(proto: "DELETE_MODULE"),
    23: .same(proto: "BATTERY_STATUS"),
    24: .same(proto: "CONFIG_GET"),
    25: .same(proto: "CONFIG_SET"),
    26: .same(proto: "CONFIG_GET_INDEX"),
    27: .same(proto: "REQUEST_DISCONNECT"),
    28: .same(proto: "REQUEST_REBOOT"),
    29: .same(proto: "FAULTLOG_GET"),
    30: .same(proto: "FAULTLOG_CLEAR"),
    31: .same(proto: "HID_KEY_PATTERN"),
  ]
}

extension Google_Jacquard_Protocol_PatternPlayType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PLAY"),
    1: .same(proto: "TOGGLE"),
  ]
}

extension Google_Jacquard_Protocol_HapticSymbolType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HAPTIC_SYMBOL_HALTED"),
    1: .same(proto: "HAPTIC_SYMBOL_SINE_INCREASE"),
    2: .same(proto: "HAPTIC_SYMBOL_SINE_DECREASE"),
    3: .same(proto: "HAPTIC_SYMBOL_LINEAR_INCREASE"),
    4: .same(proto: "HAPTIC_SYMBOL_LINEAR_DECREASE"),
    5: .same(proto: "HAPTIC_SYMBOL_PARABOLIC_INCREASE"),
    6: .same(proto: "HAPTIC_SYMBOL_PARABOLIC_DECREASE"),
    7: .same(proto: "HAPTIC_SYMBOL_CONST_ON"),
  ]
}

extension Google_Jacquard_Protocol_DataStreamState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DATA_STREAM_DISABLE"),
    1: .same(proto: "DATA_STREAM_ENABLE"),
    2: .same(proto: "DATA_STREAM_NOT_SUPPORTED"),
    3: .same(proto: "DATA_STREAM_ENABLE_DETAILED"),
  ]
}

extension Google_Jacquard_Protocol_SKUMaterial: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SKUMaterial_Ribbon"),
    1: .same(proto: "SKUMaterial_Ripstop"),
    2: .same(proto: "SKUMaterial_Thread"),
  ]
}

extension Google_Jacquard_Protocol_LEDType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LEDType_RGB"),
    1: .same(proto: "LEDType_SingleColor"),
  ]
}

extension Google_Jacquard_Protocol_LEDGeometry: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LEDGeometry_Linear"),
    2: .same(proto: "LEDGeometry_Circular"),
    3: .same(proto: "LEDGeometry_Ring_And_Center"),
  ]
}

extension Google_Jacquard_Protocol_ConnectorType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ConnectorType_C_Clip"),
    1: .same(proto: "ConnectorType_O_Tub"),
    2: .same(proto: "ConnectorType_Y_Tub"),
  ]
}

extension Google_Jacquard_Protocol_OrientationType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OrientationType_Normal"),
    1: .same(proto: "OrientationType_Flipped"),
  ]
}

extension Google_Jacquard_Protocol_HapticType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HapticType_HALTED"),
    1: .same(proto: "HapticType_SINE_INCREASE"),
    2: .same(proto: "HapticType_SINE_DECREASE"),
    3: .same(proto: "HapticType_LINEAR_INCREASE"),
    4: .same(proto: "HapticType_LINEAR_DECREASE"),
    5: .same(proto: "HapticType_PARABOLIC_INCREASE"),
    6: .same(proto: "HapticType_PARABOLIC_DECREASE"),
    7: .same(proto: "HapticType_CONST_ON"),
  ]
}

extension Google_Jacquard_Protocol_UpdateSchedule: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UPDATE_NOW"),
    1: .same(proto: "UPDATE_LATER"),
    2: .same(proto: "UPDATE_WHEN_ATTACHED"),
  ]
}

extension Google_Jacquard_Protocol_GenericBlobMsgType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GENERIC_MSGTYPE_ANCS_DS"),
    1: .same(proto: "GENERIC_MSGTYPE_ANCS_NS"),
    2: .same(proto: "GENERIC_MSGTYPE_AMS_EU"),
    3: .same(proto: "GENERIC_MSGTYPE_AMS_EA"),
  ]
}

extension Google_Jacquard_Protocol_DataCollectionStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DATA_COLLECTION_IDLE"),
    1: .same(proto: "DATA_COLLECTION_LOGGING"),
    2: .same(proto: "DATA_COLLECTION_XFER_DATA"),
    3: .same(proto: "DATA_COLLECTION_ERASING_DATA"),
    4: .same(proto: "DATA_COLLECTION_ERROR_STATE"),
    5: .same(proto: "DATA_COLLECTION_INVALID_STATE"),
    6: .same(proto: "DATA_COLLECTION_LOW_STORAGE"),
    7: .same(proto: "DATA_COLLECTION_LOW_BATTERY"),
    8: .same(proto: "DATA_COLLECTION_IMU_CONFIG_READ_ERROR"),
    9: .same(proto: "DATA_COLLECTION_IMU_CONFIG_WRITE_ERROR"),
    10: .same(proto: "DATA_COLLECTION_IMU_SET_CALLBACK_ERROR"),
    11: .same(proto: "DATA_COLLECTION_IMU_ON_ERROR"),
    12: .same(proto: "DATA_COLLECTION_IMU_OFF_ERROR"),
    13: .same(proto: "DATA_COLLECTION_MKDIR_ERROR"),
    14: .same(proto: "DATA_COLLECTION_CHDIR_ERROR"),
    15: .same(proto: "DATA_COLLECTION_OPENDIR_ERROR"),
    16: .same(proto: "DATA_COLLECTION_READDIR_ERROR"),
    17: .same(proto: "DATA_COLLECTION_GETCWD_ERROR"),
    18: .same(proto: "DATA_COLLECTION_FOPEN_ERROR"),
    19: .same(proto: "DATA_COLLECTION_FWRITE_ERROR"),
    20: .same(proto: "DATA_COLLECTION_FREAD_ERROR"),
    21: .same(proto: "DATA_COLLECTION_FSEEK_ERROR"),
    22: .same(proto: "DATA_COLLECTION_FUNLINK_ERROR"),
    23: .same(proto: "DATA_COLLECTION_FGETFREE_ERROR"),
    24: .same(proto: "DATA_COLLECTION_BAD_FILE_FORMAT"),
    25: .same(proto: "DATA_COLLECTION_PBENCODE_ERROR"),
    26: .same(proto: "DATA_COLLECTION_PBDECODE_ERROR"),
    27: .same(proto: "DATA_COLLECTION_RAW_TX_ERROR"),
    28: .same(proto: "DATA_COLLECTION_GEAR_SET_CALLBACK_ERROR"),
    29: .same(proto: "DATA_COLLECTION_APP_SCHED_EVENT"),
    30: .same(proto: "DATA_COLLECTION_UNKNOWN"),
  ]
}

extension Google_Jacquard_Protocol_DataCollectionMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DATA_COLLECTION_MODE_STREAMING"),
    1: .same(proto: "DATA_COLLECTION_MODE_STORE"),
    2: .same(proto: "DATA_COLLECTION_MODE_STORE_FORWARD"),
  ]
}

extension Google_Jacquard_Protocol_ImuFilterMode: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "IMU_FILTER_OSR4"),
    1: .same(proto: "IMU_FILTER_OSR2"),
    2: .same(proto: "IMU_FILTER_NORMAL"),
  ]
}

extension Google_Jacquard_Protocol_ImuAccelSampleRate: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ACCEL_ODR_0_78_HZ"),
    1: .same(proto: "ACCEL_ODR_1_56_HZ"),
    2: .same(proto: "ACCEL_ODR_3_12_HZ"),
    3: .same(proto: "ACCEL_ODR_6_25_HZ"),
    4: .same(proto: "ACCEL_ODR_12_5_HZ"),
    5: .same(proto: "ACCEL_ODR_25_HZ"),
    6: .same(proto: "ACCEL_ODR_50_HZ"),
    7: .same(proto: "ACCEL_ODR_100_HZ"),
    8: .same(proto: "ACCEL_ODR_200_HZ"),
    9: .same(proto: "ACCEL_ODR_400_HZ"),
    10: .same(proto: "ACCEL_ODR_800_HZ"),
    11: .same(proto: "ACCEL_ODR_1600_HZ"),
  ]
}

extension Google_Jacquard_Protocol_ImuGyroSampleRate: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GYRO_ODR_25_HZ"),
    1: .same(proto: "GYRO_ODR_50_HZ"),
    2: .same(proto: "GYRO_ODR_100_HZ"),
    3: .same(proto: "GYRO_ODR_200_HZ"),
    4: .same(proto: "GYRO_ODR_400_HZ"),
    5: .same(proto: "GYRO_ODR_800_HZ"),
    6: .same(proto: "GYRO_ODR_1600_HZ"),
    7: .same(proto: "GYRO_ODR_3200_HZ"),
  ]
}

extension Google_Jacquard_Protocol_ImuAccelRange: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "IMU_ACCEL_RANGE_2G"),
    1: .same(proto: "IMU_ACCEL_RANGE_4G"),
    2: .same(proto: "IMU_ACCEL_RANGE_8G"),
    3: .same(proto: "IMU_ACCEL_RANGE_16G"),
  ]
}

extension Google_Jacquard_Protocol_ImuGyroRange: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "IMU_GYRO_RANGE_125DPS"),
    1: .same(proto: "IMU_GYRO_RANGE_250DPS"),
    2: .same(proto: "IMU_GYRO_RANGE_500DPS"),
    3: .same(proto: "IMU_GYRO_RANGE_1000DPS"),
    4: .same(proto: "IMU_GYRO_RANGE_2000DPS"),
  ]
}

extension Google_Jacquard_Protocol_WomGearPowerControlPolicy: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WOM_MAINTAIN_GEAR_POWER_AS_IS"),
    1: .same(proto: "WOM_MAINTAIN_GEAR_POWER_AT_LOW_POWER_MODE"),
    2: .same(proto: "WOM_TURN_OFF_GEAR_POWER_COMPLETELY"),
  ]
}

extension Google_Jacquard_Protocol_WomBleConnectionPolicy: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WOM_MAINTAIN_BLE_CONNECTION_AS_IS"),
    1: .same(proto: "WOM_MAINTAIN_BLE_CONNECTION_AT_LOW_POWER_MODE"),
    2: .same(proto: "WOM_TURN_OFF_BLE_COMPLETELY"),
  ]
}

extension Google_Jacquard_Protocol_ChargingStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "CHARGING"),
    2: .same(proto: "NOT_CHARGING"),
  ]
}

extension Google_Jacquard_Protocol_Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "domain"),
    2: .same(proto: "opcode"),
    3: .same(proto: "id"),
    4: .standard(proto: "component_id"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if self._domain == nil {return false}
    if self._opcode == nil {return false}
    if self._id == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._domain) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._opcode) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._id) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._componentID) }()
      case 99..<536870912:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Google_Jacquard_Protocol_Request.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._domain {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._opcode {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._id {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._componentID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 99, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_Request, rhs: Google_Jacquard_Protocol_Request) -> Bool {
    if lhs._domain != rhs._domain {return false}
    if lhs._opcode != rhs._opcode {return false}
    if lhs._id != rhs._id {return false}
    if lhs._componentID != rhs._componentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "status"),
    3: .standard(proto: "component_id"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if self._id == nil {return false}
    if self._status == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._componentID) }()
      case 99..<536870912:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Google_Jacquard_Protocol_Response.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._componentID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 99, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_Response, rhs: Google_Jacquard_Protocol_Response) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._status != rhs._status {return false}
    if lhs._componentID != rhs._componentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_Notification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Notification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "domain"),
    2: .same(proto: "opcode"),
    3: .standard(proto: "component_id"),
  ]

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    if self._domain == nil {return false}
    if self._opcode == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._domain) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._opcode) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._componentID) }()
      case 99..<536870912:
        try { try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Google_Jacquard_Protocol_Notification.self, fieldNumber: fieldNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._domain {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._opcode {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._componentID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 99, end: 536870912)
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_Notification, rhs: Google_Jacquard_Protocol_Notification) -> Bool {
    if lhs._domain != rhs._domain {return false}
    if lhs._opcode != rhs._opcode {return false}
    if lhs._componentID != rhs._componentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_SupportedRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SupportedRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "opcode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._opcode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._opcode {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_SupportedRequest, rhs: Google_Jacquard_Protocol_SupportedRequest) -> Bool {
    if lhs._opcode != rhs._opcode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DeviceInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceInfoRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "component"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._component) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._component {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DeviceInfoRequest, rhs: Google_Jacquard_Protocol_DeviceInfoRequest) -> Bool {
    if lhs._component != rhs._component {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DeviceInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vendor"),
    2: .same(proto: "model"),
    3: .same(proto: "revision"),
    4: .same(proto: "uuid"),
    5: .standard(proto: "firmware_major"),
    6: .standard(proto: "firmware_minor"),
    7: .standard(proto: "firmware_point"),
    8: .standard(proto: "bootloader_major"),
    9: .standard(proto: "bootloader_minor"),
    10: .standard(proto: "bootloader_point"),
    11: .standard(proto: "vendor_id"),
    12: .standard(proto: "product_id"),
    13: .standard(proto: "gear_id"),
    14: .standard(proto: "sku_id"),
    15: .standard(proto: "ml_version"),
  ]

  public var isInitialized: Bool {
    if self._vendor == nil {return false}
    if self._model == nil {return false}
    if self._revision == nil {return false}
    if self._uuid == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._vendor) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._model) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._revision) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._uuid) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._firmwareMajor) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self._firmwareMinor) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._firmwarePoint) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self._bootloaderMajor) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self._bootloaderMinor) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self._bootloaderPoint) }()
      case 11: try { try decoder.decodeSingularUInt32Field(value: &self._vendorID) }()
      case 12: try { try decoder.decodeSingularUInt32Field(value: &self._productID) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self._gearID) }()
      case 14: try { try decoder.decodeSingularStringField(value: &self._skuID) }()
      case 15: try { try decoder.decodeSingularStringField(value: &self._mlVersion) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._vendor {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._model {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._revision {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._uuid {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._firmwareMajor {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._firmwareMinor {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._firmwarePoint {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    }
    if let v = self._bootloaderMajor {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
    }
    if let v = self._bootloaderMinor {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
    }
    if let v = self._bootloaderPoint {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
    }
    if let v = self._vendorID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 11)
    }
    if let v = self._productID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 12)
    }
    if let v = self._gearID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 13)
    }
    if let v = self._skuID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 14)
    }
    if let v = self._mlVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DeviceInfoResponse, rhs: Google_Jacquard_Protocol_DeviceInfoResponse) -> Bool {
    if lhs._vendor != rhs._vendor {return false}
    if lhs._model != rhs._model {return false}
    if lhs._revision != rhs._revision {return false}
    if lhs._uuid != rhs._uuid {return false}
    if lhs._firmwareMajor != rhs._firmwareMajor {return false}
    if lhs._firmwareMinor != rhs._firmwareMinor {return false}
    if lhs._firmwarePoint != rhs._firmwarePoint {return false}
    if lhs._bootloaderMajor != rhs._bootloaderMajor {return false}
    if lhs._bootloaderMinor != rhs._bootloaderMinor {return false}
    if lhs._bootloaderPoint != rhs._bootloaderPoint {return false}
    if lhs._vendorID != rhs._vendorID {return false}
    if lhs._productID != rhs._productID {return false}
    if lhs._gearID != rhs._gearID {return false}
    if lhs._skuID != rhs._skuID {return false}
    if lhs._mlVersion != rhs._mlVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_Color: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Color"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "red"),
    2: .same(proto: "green"),
    3: .same(proto: "blue"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._red) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._green) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._blue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._red {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._green {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._blue {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_Color, rhs: Google_Jacquard_Protocol_Color) -> Bool {
    if lhs._red != rhs._red {return false}
    if lhs._green != rhs._green {return false}
    if lhs._blue != rhs._blue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_LedPatternFrames: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LedPatternFrames"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "color"),
    2: .standard(proto: "length_ms"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._color) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._lengthMs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._color {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._lengthMs {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_LedPatternFrames, rhs: Google_Jacquard_Protocol_LedPatternFrames) -> Bool {
    if lhs._color != rhs._color {return false}
    if lhs._lengthMs != rhs._lengthMs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_LedPatternRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LedPatternRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pattern_uid"),
    2: .standard(proto: "pattern_type"),
    3: .same(proto: "frames"),
    4: .standard(proto: "pause_between_cycles_ms"),
    5: .standard(proto: "duration_ms"),
    6: .standard(proto: "intensity_level"),
    7: .standard(proto: "priority_level"),
    8: .standard(proto: "play_pause_toggle"),
    9: .same(proto: "resumable"),
    10: .standard(proto: "halt_all"),
    11: .standard(proto: "number_of_cycles"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._patternUid) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._patternType) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.frames) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._pauseBetweenCyclesMs) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._durationMs) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self._intensityLevel) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._priorityLevel) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self._playPauseToggle) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self._resumable) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self._haltAll) }()
      case 11: try { try decoder.decodeSingularUInt32Field(value: &self._numberOfCycles) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._patternUid {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._patternType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if !self.frames.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.frames, fieldNumber: 3)
    }
    if let v = self._pauseBetweenCyclesMs {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._durationMs {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._intensityLevel {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._priorityLevel {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    }
    if let v = self._playPauseToggle {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 8)
    }
    if let v = self._resumable {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }
    if let v = self._haltAll {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
    }
    if let v = self._numberOfCycles {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_LedPatternRequest, rhs: Google_Jacquard_Protocol_LedPatternRequest) -> Bool {
    if lhs._patternUid != rhs._patternUid {return false}
    if lhs._patternType != rhs._patternType {return false}
    if lhs.frames != rhs.frames {return false}
    if lhs._pauseBetweenCyclesMs != rhs._pauseBetweenCyclesMs {return false}
    if lhs._durationMs != rhs._durationMs {return false}
    if lhs._intensityLevel != rhs._intensityLevel {return false}
    if lhs._priorityLevel != rhs._priorityLevel {return false}
    if lhs._playPauseToggle != rhs._playPauseToggle {return false}
    if lhs._resumable != rhs._resumable {return false}
    if lhs._haltAll != rhs._haltAll {return false}
    if lhs._numberOfCycles != rhs._numberOfCycles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_LedPatternNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LedPatternNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pattern_uid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._patternUid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._patternUid {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_LedPatternNotification, rhs: Google_Jacquard_Protocol_LedPatternNotification) -> Bool {
    if lhs._patternUid != rhs._patternUid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_ConfigElement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfigElement"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .standard(proto: "bool_val"),
    3: .standard(proto: "uint32_val"),
    4: .standard(proto: "uint64_val"),
    5: .standard(proto: "int32_val"),
    6: .standard(proto: "int64_val"),
    7: .standard(proto: "float_val"),
    8: .standard(proto: "double_val"),
    9: .standard(proto: "string_val"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._key) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._boolVal) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._uint32Val) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self._uint64Val) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self._int32Val) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self._int64Val) }()
      case 7: try { try decoder.decodeSingularFloatField(value: &self._floatVal) }()
      case 8: try { try decoder.decodeSingularDoubleField(value: &self._doubleVal) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self._stringVal) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._key {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._boolVal {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._uint32Val {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._uint64Val {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
    }
    if let v = self._int32Val {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._int64Val {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 6)
    }
    if let v = self._floatVal {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 7)
    }
    if let v = self._doubleVal {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
    }
    if let v = self._stringVal {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_ConfigElement, rhs: Google_Jacquard_Protocol_ConfigElement) -> Bool {
    if lhs._key != rhs._key {return false}
    if lhs._boolVal != rhs._boolVal {return false}
    if lhs._uint32Val != rhs._uint32Val {return false}
    if lhs._uint64Val != rhs._uint64Val {return false}
    if lhs._int32Val != rhs._int32Val {return false}
    if lhs._int64Val != rhs._int64Val {return false}
    if lhs._floatVal != rhs._floatVal {return false}
    if lhs._doubleVal != rhs._doubleVal {return false}
    if lhs._stringVal != rhs._stringVal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_ConfigSetRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfigSetRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vid"),
    2: .same(proto: "pid"),
    3: .same(proto: "config"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._vid) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._pid) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._config) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._vid {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._pid {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._config {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_ConfigSetRequest, rhs: Google_Jacquard_Protocol_ConfigSetRequest) -> Bool {
    if lhs._vid != rhs._vid {return false}
    if lhs._pid != rhs._pid {return false}
    if lhs._config != rhs._config {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_ConfigGetRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfigGetRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vid"),
    2: .same(proto: "pid"),
    3: .same(proto: "key"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._vid) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._pid) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._key) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._vid {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._pid {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._key {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_ConfigGetRequest, rhs: Google_Jacquard_Protocol_ConfigGetRequest) -> Bool {
    if lhs._vid != rhs._vid {return false}
    if lhs._pid != rhs._pid {return false}
    if lhs._key != rhs._key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_ConfigGetResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfigGetResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "config"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._config) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._config {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_ConfigGetResponse, rhs: Google_Jacquard_Protocol_ConfigGetResponse) -> Bool {
    if lhs._config != rhs._config {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_ConfigGetIndexRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfigGetIndexRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "vid"),
    2: .same(proto: "pid"),
    3: .same(proto: "index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._vid) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._pid) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._index) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._vid {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._pid {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._index {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_ConfigGetIndexRequest, rhs: Google_Jacquard_Protocol_ConfigGetIndexRequest) -> Bool {
    if lhs._vid != rhs._vid {return false}
    if lhs._pid != rhs._pid {return false}
    if lhs._index != rhs._index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_HapticSymbol: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HapticSymbol"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "on_ms"),
    2: .standard(proto: "off_ms"),
    3: .same(proto: "pattern"),
    4: .standard(proto: "max_amplitude_percent"),
    5: .standard(proto: "repeat_n_minus_one"),
  ]

  public var isInitialized: Bool {
    if self._onMs == nil {return false}
    if self._offMs == nil {return false}
    if self._pattern == nil {return false}
    if self._maxAmplitudePercent == nil {return false}
    if self._repeatNMinusOne == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._onMs) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._offMs) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._pattern) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._maxAmplitudePercent) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._repeatNMinusOne) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._onMs {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._offMs {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._pattern {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    if let v = self._maxAmplitudePercent {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._repeatNMinusOne {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_HapticSymbol, rhs: Google_Jacquard_Protocol_HapticSymbol) -> Bool {
    if lhs._onMs != rhs._onMs {return false}
    if lhs._offMs != rhs._offMs {return false}
    if lhs._pattern != rhs._pattern {return false}
    if lhs._maxAmplitudePercent != rhs._maxAmplitudePercent {return false}
    if lhs._repeatNMinusOne != rhs._repeatNMinusOne {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_InferenceData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InferenceData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "event"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._event) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._event {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_InferenceData, rhs: Google_Jacquard_Protocol_InferenceData) -> Bool {
    if lhs._event != rhs._event {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_TouchData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TouchData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "diff_proximity"),
    2: .standard(proto: "diff_touch"),
    3: .standard(proto: "inference_result"),
    4: .same(proto: "sequence"),
    5: .same(proto: "crc16"),
    6: .standard(proto: "confidence_array"),
    7: .standard(proto: "diff_data_scaled"),
    8: .standard(proto: "raw_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._diffProximity) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._diffTouch) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._inferenceResult) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._sequence) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._crc16) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self._confidenceArray) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self._diffDataScaled) }()
      case 8: try { try decoder.decodeSingularBytesField(value: &self._rawData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._diffProximity {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._diffTouch {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    if let v = self._inferenceResult {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._sequence {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._crc16 {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._confidenceArray {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 6)
    }
    if let v = self._diffDataScaled {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 7)
    }
    if let v = self._rawData {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_TouchData, rhs: Google_Jacquard_Protocol_TouchData) -> Bool {
    if lhs._diffProximity != rhs._diffProximity {return false}
    if lhs._diffTouch != rhs._diffTouch {return false}
    if lhs._inferenceResult != rhs._inferenceResult {return false}
    if lhs._sequence != rhs._sequence {return false}
    if lhs._crc16 != rhs._crc16 {return false}
    if lhs._confidenceArray != rhs._confidenceArray {return false}
    if lhs._diffDataScaled != rhs._diffDataScaled {return false}
    if lhs._rawData != rhs._rawData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_TouchWidgetConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TouchWidgetConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "resolution"),
    2: .standard(proto: "sensor_clk_freq_divisor"),
    3: .standard(proto: "idac_mod_value"),
  ]

  public var isInitialized: Bool {
    if self._resolution == nil {return false}
    if self._sensorClkFreqDivisor == nil {return false}
    if self._idacModValue == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._resolution) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._sensorClkFreqDivisor) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._idacModValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._resolution {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._sensorClkFreqDivisor {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._idacModValue {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_TouchWidgetConfig, rhs: Google_Jacquard_Protocol_TouchWidgetConfig) -> Bool {
    if lhs._resolution != rhs._resolution {return false}
    if lhs._sensorClkFreqDivisor != rhs._sensorClkFreqDivisor {return false}
    if lhs._idacModValue != rhs._idacModValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_TouchConfigData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TouchConfigData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "config"),
    2: .standard(proto: "compensation_idac_values"),
    3: .standard(proto: "mod_csd_clk_divisor"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.config) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.config) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._compensationIdacValues) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._modCsdClkDivisor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.config.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.config, fieldNumber: 1)
    }
    if let v = self._compensationIdacValues {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    if let v = self._modCsdClkDivisor {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_TouchConfigData, rhs: Google_Jacquard_Protocol_TouchConfigData) -> Bool {
    if lhs.config != rhs.config {return false}
    if lhs._compensationIdacValues != rhs._compensationIdacValues {return false}
    if lhs._modCsdClkDivisor != rhs._modCsdClkDivisor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_HWGearRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HWGearRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_HWGearRequest, rhs: Google_Jacquard_Protocol_HWGearRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_HWGearResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HWGearResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "characteristics"),
  ]

  public var isInitialized: Bool {
    if let v = self._characteristics, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._characteristics) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._characteristics {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_HWGearResponse, rhs: Google_Jacquard_Protocol_HWGearResponse) -> Bool {
    if lhs._characteristics != rhs._characteristics {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_HapticRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HapticRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "frames"),
    2: .standard(proto: "pause_between_cycles_ms"),
    3: .standard(proto: "Repeat_full_pattern"),
    4: .standard(proto: "intensity_level"),
  ]

  public var isInitialized: Bool {
    if let v = self._frames, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._frames) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._pauseBetweenCyclesMs) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._repeatFullPattern) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._intensityLevel) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._frames {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._pauseBetweenCyclesMs {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._repeatFullPattern {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._intensityLevel {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_HapticRequest, rhs: Google_Jacquard_Protocol_HapticRequest) -> Bool {
    if lhs._frames != rhs._frames {return false}
    if lhs._pauseBetweenCyclesMs != rhs._pauseBetweenCyclesMs {return false}
    if lhs._repeatFullPattern != rhs._repeatFullPattern {return false}
    if lhs._intensityLevel != rhs._intensityLevel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_HapticResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HapticResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_HapticResponse, rhs: Google_Jacquard_Protocol_HapticResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_HapticNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HapticNotification"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_HapticNotification, rhs: Google_Jacquard_Protocol_HapticNotification) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataChannelRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataChannelRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inference"),
    2: .same(proto: "touch"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._inference) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._touch) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._inference {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._touch {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataChannelRequest, rhs: Google_Jacquard_Protocol_DataChannelRequest) -> Bool {
    if lhs._inference != rhs._inference {return false}
    if lhs._touch != rhs._touch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataChannelResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataChannelResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inference"),
    2: .same(proto: "touch"),
    3: .standard(proto: "touch_config"),
  ]

  public var isInitialized: Bool {
    if let v = self._touchConfig, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._inference) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._touch) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._touchConfig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._inference {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._touch {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._touchConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataChannelResponse, rhs: Google_Jacquard_Protocol_DataChannelResponse) -> Bool {
    if lhs._inference != rhs._inference {return false}
    if lhs._touch != rhs._touch {return false}
    if lhs._touchConfig != rhs._touchConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataChannelNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataChannelNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "inference_data"),
    2: .standard(proto: "touch_data"),
    3: .standard(proto: "timestamp_ticks"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._inferenceData) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._touchData) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._timestampTicks) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._inferenceData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._touchData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._timestampTicks {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataChannelNotification, rhs: Google_Jacquard_Protocol_DataChannelNotification) -> Bool {
    if lhs._inferenceData != rhs._inferenceData {return false}
    if lhs._touchData != rhs._touchData {return false}
    if lhs._timestampTicks != rhs._timestampTicks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_HapticNotificationDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HapticNotificationDetails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "haptic_type"),
    2: .standard(proto: "strength_percent"),
    3: .standard(proto: "symbol_duration_ms"),
  ]

  public var isInitialized: Bool {
    if self._hapticType == nil {return false}
    if self._strengthPercent == nil {return false}
    if self._symbolDurationMs == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._hapticType) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._strengthPercent) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._symbolDurationMs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._hapticType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._strengthPercent {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._symbolDurationMs {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_HapticNotificationDetails, rhs: Google_Jacquard_Protocol_HapticNotificationDetails) -> Bool {
    if lhs._hapticType != rhs._hapticType {return false}
    if lhs._strengthPercent != rhs._strengthPercent {return false}
    if lhs._symbolDurationMs != rhs._symbolDurationMs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_VibeMotorChar: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VibeMotorChar"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "motor_num"),
    2: .standard(proto: "attach_notification"),
    3: .standard(proto: "gesture_recognition_notification"),
  ]

  public var isInitialized: Bool {
    if self._motorNum == nil {return false}
    if let v = self._attachNotification, !v.isInitialized {return false}
    if let v = self._gestureRecognitionNotification, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._motorNum) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._attachNotification) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._gestureRecognitionNotification) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._motorNum {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._attachNotification {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._gestureRecognitionNotification {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_VibeMotorChar, rhs: Google_Jacquard_Protocol_VibeMotorChar) -> Bool {
    if lhs._motorNum != rhs._motorNum {return false}
    if lhs._attachNotification != rhs._attachNotification {return false}
    if lhs._gestureRecognitionNotification != rhs._gestureRecognitionNotification {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_CapacitiveTouchpadChar: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CapacitiveTouchpadChar"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "material"),
    2: .standard(proto: "pitch_mm"),
    3: .standard(proto: "electrode_lines_num"),
    4: .standard(proto: "electrode_lines_length_cm"),
    5: .standard(proto: "pitch_um"),
  ]

  public var isInitialized: Bool {
    if self._material == nil {return false}
    if self._pitchMm == nil {return false}
    if self._electrodeLinesNum == nil {return false}
    if self._electrodeLinesLengthCm == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._material) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._pitchMm) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._electrodeLinesNum) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._electrodeLinesLengthCm) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._pitchUm) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._material {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._pitchMm {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._electrodeLinesNum {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._electrodeLinesLengthCm {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._pitchUm {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_CapacitiveTouchpadChar, rhs: Google_Jacquard_Protocol_CapacitiveTouchpadChar) -> Bool {
    if lhs._material != rhs._material {return false}
    if lhs._pitchMm != rhs._pitchMm {return false}
    if lhs._electrodeLinesNum != rhs._electrodeLinesNum {return false}
    if lhs._electrodeLinesLengthCm != rhs._electrodeLinesLengthCm {return false}
    if lhs._pitchUm != rhs._pitchUm {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_LedsArrayChar: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LedsArrayChar"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "led_num"),
    3: .same(proto: "format"),
  ]

  public var isInitialized: Bool {
    if self._type == nil {return false}
    if self._ledNum == nil {return false}
    if self._format == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._ledNum) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._format) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._ledNum {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._format {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_LedsArrayChar, rhs: Google_Jacquard_Protocol_LedsArrayChar) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._ledNum != rhs._ledNum {return false}
    if lhs._format != rhs._format {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_GearChar: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GearChar"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    4: .standard(proto: "motor_1"),
    5: .standard(proto: "motor_2"),
    6: .standard(proto: "cap_touchpad_1"),
    7: .standard(proto: "cap_touchpad_2"),
    8: .standard(proto: "led_array_1"),
    9: .standard(proto: "led_array_2"),
    10: .standard(proto: "connector_type"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt32? = nil
    var _motor1: Google_Jacquard_Protocol_VibeMotorChar? = nil
    var _motor2: Google_Jacquard_Protocol_VibeMotorChar? = nil
    var _capTouchpad1: Google_Jacquard_Protocol_CapacitiveTouchpadChar? = nil
    var _capTouchpad2: Google_Jacquard_Protocol_CapacitiveTouchpadChar? = nil
    var _ledArray1: Google_Jacquard_Protocol_LedsArrayChar? = nil
    var _ledArray2: Google_Jacquard_Protocol_LedsArrayChar? = nil
    var _connectorType: Google_Jacquard_Protocol_ConnectorType? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _motor1 = source._motor1
      _motor2 = source._motor2
      _capTouchpad1 = source._capTouchpad1
      _capTouchpad2 = source._capTouchpad2
      _ledArray1 = source._ledArray1
      _ledArray2 = source._ledArray2
      _connectorType = source._connectorType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id == nil {return false}
      if let v = _storage._motor1, !v.isInitialized {return false}
      if let v = _storage._motor2, !v.isInitialized {return false}
      if let v = _storage._capTouchpad1, !v.isInitialized {return false}
      if let v = _storage._capTouchpad2, !v.isInitialized {return false}
      if let v = _storage._ledArray1, !v.isInitialized {return false}
      if let v = _storage._ledArray2, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt32Field(value: &_storage._id) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._motor1) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._motor2) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._capTouchpad1) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._capTouchpad2) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._ledArray1) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._ledArray2) }()
        case 10: try { try decoder.decodeSingularEnumField(value: &_storage._connectorType) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._motor1 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._motor2 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._capTouchpad1 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._capTouchpad2 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._ledArray1 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._ledArray2 {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._connectorType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_GearChar, rhs: Google_Jacquard_Protocol_GearChar) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._motor1 != rhs_storage._motor1 {return false}
        if _storage._motor2 != rhs_storage._motor2 {return false}
        if _storage._capTouchpad1 != rhs_storage._capTouchpad1 {return false}
        if _storage._capTouchpad2 != rhs_storage._capTouchpad2 {return false}
        if _storage._ledArray1 != rhs_storage._ledArray1 {return false}
        if _storage._ledArray2 != rhs_storage._ledArray2 {return false}
        if _storage._connectorType != rhs_storage._connectorType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_HelloResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HelloResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "protocol_min"),
    2: .standard(proto: "protocol_max"),
    3: .same(proto: "vendor"),
    4: .same(proto: "model"),
    5: .standard(proto: "auth_challenge"),
    6: .standard(proto: "vendor_id"),
    7: .standard(proto: "product_id"),
  ]

  public var isInitialized: Bool {
    if self._protocolMin == nil {return false}
    if self._protocolMax == nil {return false}
    if self._vendor == nil {return false}
    if self._model == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._protocolMin) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._protocolMax) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._vendor) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._model) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self._authChallenge) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self._vendorID) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._productID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._protocolMin {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._protocolMax {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._vendor {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._model {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._authChallenge {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
    }
    if let v = self._vendorID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._productID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_HelloResponse, rhs: Google_Jacquard_Protocol_HelloResponse) -> Bool {
    if lhs._protocolMin != rhs._protocolMin {return false}
    if lhs._protocolMax != rhs._protocolMax {return false}
    if lhs._vendor != rhs._vendor {return false}
    if lhs._model != rhs._model {return false}
    if lhs._authChallenge != rhs._authChallenge {return false}
    if lhs._vendorID != rhs._vendorID {return false}
    if lhs._productID != rhs._productID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_BeginRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BeginRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "protocol"),
    2: .standard(proto: "auth_challenge"),
    3: .standard(proto: "auth_response"),
  ]

  public var isInitialized: Bool {
    if self._protocol == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._protocol) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._authChallenge) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self._authResponse) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._protocol {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._authChallenge {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    if let v = self._authResponse {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_BeginRequest, rhs: Google_Jacquard_Protocol_BeginRequest) -> Bool {
    if lhs._protocol != rhs._protocol {return false}
    if lhs._authChallenge != rhs._authChallenge {return false}
    if lhs._authResponse != rhs._authResponse {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_BeginResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BeginResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "auth_response"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self._authResponse) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._authResponse {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_BeginResponse, rhs: Google_Jacquard_Protocol_BeginResponse) -> Bool {
    if lhs._authResponse != rhs._authResponse {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DisconnectNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DisconnectNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reconnect"),
  ]

  public var isInitialized: Bool {
    if self._reconnect == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._reconnect) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._reconnect {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DisconnectNotification, rhs: Google_Jacquard_Protocol_DisconnectNotification) -> Bool {
    if lhs._reconnect != rhs._reconnect {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_AttachedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AttachedNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "attach_state"),
    2: .standard(proto: "vendor_id"),
    3: .standard(proto: "product_id"),
    4: .standard(proto: "component_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._attachState) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._vendorID) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._productID) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._componentID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._attachState {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._vendorID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._productID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._componentID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_AttachedNotification, rhs: Google_Jacquard_Protocol_AttachedNotification) -> Bool {
    if lhs._attachState != rhs._attachState {return false}
    if lhs._vendorID != rhs._vendorID {return false}
    if lhs._productID != rhs._productID {return false}
    if lhs._componentID != rhs._componentID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_ErrorNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ErrorNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "device"),
    2: .same(proto: "subsystem"),
    3: .same(proto: "errorcode"),
  ]

  public var isInitialized: Bool {
    if self._subsystem == nil {return false}
    if self._errorcode == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._device) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._subsystem) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._errorcode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._device {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._subsystem {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._errorcode {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_ErrorNotification, rhs: Google_Jacquard_Protocol_ErrorNotification) -> Bool {
    if lhs._device != rhs._device {return false}
    if lhs._subsystem != rhs._subsystem {return false}
    if lhs._errorcode != rhs._errorcode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DFUStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DFUStatusRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vendor_id"),
    2: .standard(proto: "product_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._vendorID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._productID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._vendorID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._productID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DFUStatusRequest, rhs: Google_Jacquard_Protocol_DFUStatusRequest) -> Bool {
    if lhs._vendorID != rhs._vendorID {return false}
    if lhs._productID != rhs._productID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DFUStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DFUStatusResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "component"),
    2: .standard(proto: "final_size"),
    3: .standard(proto: "final_crc"),
    4: .standard(proto: "current_size"),
    5: .standard(proto: "current_crc"),
  ]

  public var isInitialized: Bool {
    if self._finalSize == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._component) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._finalSize) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._finalCrc) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._currentSize) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._currentCrc) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._component {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._finalSize {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._finalCrc {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._currentSize {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._currentCrc {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DFUStatusResponse, rhs: Google_Jacquard_Protocol_DFUStatusResponse) -> Bool {
    if lhs._component != rhs._component {return false}
    if lhs._finalSize != rhs._finalSize {return false}
    if lhs._finalCrc != rhs._finalCrc {return false}
    if lhs._currentSize != rhs._currentSize {return false}
    if lhs._currentCrc != rhs._currentCrc {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DFUPrepareRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DFUPrepareRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "component"),
    2: .standard(proto: "final_size"),
    3: .standard(proto: "final_crc"),
    4: .standard(proto: "vendor_id"),
    5: .standard(proto: "product_id"),
  ]

  public var isInitialized: Bool {
    if self._component == nil {return false}
    if self._finalSize == nil {return false}
    if self._finalCrc == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._component) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._finalSize) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._finalCrc) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._vendorID) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._productID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._component {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._finalSize {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._finalCrc {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._vendorID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._productID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DFUPrepareRequest, rhs: Google_Jacquard_Protocol_DFUPrepareRequest) -> Bool {
    if lhs._component != rhs._component {return false}
    if lhs._finalSize != rhs._finalSize {return false}
    if lhs._finalCrc != rhs._finalCrc {return false}
    if lhs._vendorID != rhs._vendorID {return false}
    if lhs._productID != rhs._productID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DFUWriteRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DFUWriteRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "offset"),
    2: .same(proto: "data"),
  ]

  public var isInitialized: Bool {
    if self._offset == nil {return false}
    if self._data == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._offset) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._offset {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._data {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DFUWriteRequest, rhs: Google_Jacquard_Protocol_DFUWriteRequest) -> Bool {
    if lhs._offset != rhs._offset {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DFUWriteResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DFUWriteResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "offset"),
    2: .same(proto: "crc"),
  ]

  public var isInitialized: Bool {
    if self._offset == nil {return false}
    if self._crc == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._offset) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._crc) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._offset {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._crc {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DFUWriteResponse, rhs: Google_Jacquard_Protocol_DFUWriteResponse) -> Bool {
    if lhs._offset != rhs._offset {return false}
    if lhs._crc != rhs._crc {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DFUExecuteRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DFUExecuteRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vendor_id"),
    2: .standard(proto: "product_id"),
    3: .standard(proto: "update_sched"),
    4: .standard(proto: "keep_fw_binary"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._vendorID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._productID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._updateSched) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._keepFwBinary) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._vendorID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._productID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._updateSched {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    if let v = self._keepFwBinary {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DFUExecuteRequest, rhs: Google_Jacquard_Protocol_DFUExecuteRequest) -> Bool {
    if lhs._vendorID != rhs._vendorID {return false}
    if lhs._productID != rhs._productID {return false}
    if lhs._updateSched != rhs._updateSched {return false}
    if lhs._keepFwBinary != rhs._keepFwBinary {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DFUExecuteUpdateNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DFUExecuteUpdateNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vendor_id"),
    2: .standard(proto: "product_id"),
    3: .standard(proto: "firmware_major"),
    4: .standard(proto: "firmware_minor"),
    5: .standard(proto: "firmware_point"),
    6: .same(proto: "status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._vendorID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._productID) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._firmwareMajor) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._firmwareMinor) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._firmwarePoint) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._vendorID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._productID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._firmwareMajor {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._firmwareMinor {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._firmwarePoint {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DFUExecuteUpdateNotification, rhs: Google_Jacquard_Protocol_DFUExecuteUpdateNotification) -> Bool {
    if lhs._vendorID != rhs._vendorID {return false}
    if lhs._productID != rhs._productID {return false}
    if lhs._firmwareMajor != rhs._firmwareMajor {return false}
    if lhs._firmwareMinor != rhs._firmwareMinor {return false}
    if lhs._firmwarePoint != rhs._firmwarePoint {return false}
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_GenericBlobMessagePayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenericBlobMessagePayload"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "msg_type"),
    2: .same(proto: "block"),
  ]

  public var isInitialized: Bool {
    if self._msgType == nil {return false}
    if self._block == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._msgType) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._block) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._msgType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._block {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_GenericBlobMessagePayload, rhs: Google_Jacquard_Protocol_GenericBlobMessagePayload) -> Bool {
    if lhs._msgType != rhs._msgType {return false}
    if lhs._block != rhs._block {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_GenericEncryptedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenericEncryptedNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_vector"),
    2: .standard(proto: "encrypted_block"),
  ]

  public var isInitialized: Bool {
    if self._blockVector == nil {return false}
    if self._encryptedBlock == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self._blockVector) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._encryptedBlock) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._blockVector {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    if let v = self._encryptedBlock {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_GenericEncryptedNotification, rhs: Google_Jacquard_Protocol_GenericEncryptedNotification) -> Bool {
    if lhs._blockVector != rhs._blockVector {return false}
    if lhs._encryptedBlock != rhs._encryptedBlock {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_GenericPlainNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenericPlainNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "plain_block"),
  ]

  public var isInitialized: Bool {
    if self._plainBlock == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self._plainBlock) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._plainBlock {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_GenericPlainNotification, rhs: Google_Jacquard_Protocol_GenericPlainNotification) -> Bool {
    if lhs._plainBlock != rhs._plainBlock {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_OtaDfuMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".OtaDfuMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "final_size"),
    2: .standard(proto: "final_crc"),
    3: .standard(proto: "current_size"),
    4: .standard(proto: "current_crc"),
    5: .standard(proto: "final_image_size"),
    6: .standard(proto: "final_image_crc"),
    7: .standard(proto: "current_image_size"),
    8: .standard(proto: "current_image_crc"),
    9: .standard(proto: "write_addr"),
    10: .standard(proto: "signed_hash"),
    11: .standard(proto: "hash_context"),
    12: .standard(proto: "is_signed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._finalSize) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._finalCrc) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._currentSize) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._currentCrc) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._finalImageSize) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self._finalImageCrc) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._currentImageSize) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self._currentImageCrc) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self._writeAddr) }()
      case 10: try { try decoder.decodeRepeatedUInt32Field(value: &self.signedHash) }()
      case 11: try { try decoder.decodeRepeatedUInt32Field(value: &self.hashContext) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self._isSigned) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._finalSize {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._finalCrc {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._currentSize {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._currentCrc {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._finalImageSize {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._finalImageCrc {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._currentImageSize {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    }
    if let v = self._currentImageCrc {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
    }
    if let v = self._writeAddr {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
    }
    if !self.signedHash.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.signedHash, fieldNumber: 10)
    }
    if !self.hashContext.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.hashContext, fieldNumber: 11)
    }
    if let v = self._isSigned {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_OtaDfuMetadata, rhs: Google_Jacquard_Protocol_OtaDfuMetadata) -> Bool {
    if lhs._finalSize != rhs._finalSize {return false}
    if lhs._finalCrc != rhs._finalCrc {return false}
    if lhs._currentSize != rhs._currentSize {return false}
    if lhs._currentCrc != rhs._currentCrc {return false}
    if lhs._finalImageSize != rhs._finalImageSize {return false}
    if lhs._finalImageCrc != rhs._finalImageCrc {return false}
    if lhs._currentImageSize != rhs._currentImageSize {return false}
    if lhs._currentImageCrc != rhs._currentImageCrc {return false}
    if lhs._writeAddr != rhs._writeAddr {return false}
    if lhs.signedHash != rhs.signedHash {return false}
    if lhs.hashContext != rhs.hashContext {return false}
    if lhs._isSigned != rhs._isSigned {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_ImuConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ImuConfiguration"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sensor_id"),
    2: .standard(proto: "accel_low_power_mode"),
    3: .standard(proto: "accel_filter_mode"),
    4: .standard(proto: "accel_sample_rate"),
    5: .standard(proto: "accel_range"),
    6: .standard(proto: "gyro_low_power_mode"),
    7: .standard(proto: "gyro_filter_mode"),
    8: .standard(proto: "gyro_sample_rate"),
    9: .standard(proto: "gyro_range"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._sensorID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._accelLowPowerMode) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._accelFilterMode) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self._accelSampleRate) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self._accelRange) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._gyroLowPowerMode) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self._gyroFilterMode) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self._gyroSampleRate) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self._gyroRange) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._sensorID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._accelLowPowerMode {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._accelFilterMode {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    if let v = self._accelSampleRate {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    if let v = self._accelRange {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    }
    if let v = self._gyroLowPowerMode {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._gyroFilterMode {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
    }
    if let v = self._gyroSampleRate {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 8)
    }
    if let v = self._gyroRange {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_ImuConfiguration, rhs: Google_Jacquard_Protocol_ImuConfiguration) -> Bool {
    if lhs._sensorID != rhs._sensorID {return false}
    if lhs._accelLowPowerMode != rhs._accelLowPowerMode {return false}
    if lhs._accelFilterMode != rhs._accelFilterMode {return false}
    if lhs._accelSampleRate != rhs._accelSampleRate {return false}
    if lhs._accelRange != rhs._accelRange {return false}
    if lhs._gyroLowPowerMode != rhs._gyroLowPowerMode {return false}
    if lhs._gyroFilterMode != rhs._gyroFilterMode {return false}
    if lhs._gyroSampleRate != rhs._gyroSampleRate {return false}
    if lhs._gyroRange != rhs._gyroRange {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_BleConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BleConfiguration"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "custom_adv_name"),
    2: .standard(proto: "tx_power_default"),
    3: .standard(proto: "tx_power_max"),
    4: .standard(proto: "fast_adv_interval_ms"),
    5: .standard(proto: "fast_adv_duration_sec"),
    6: .standard(proto: "slow_adv_interval_ms"),
    7: .standard(proto: "slow_adv_duration_sec"),
    8: .standard(proto: "min_conn_interval"),
    9: .standard(proto: "max_conn_interval"),
    10: .standard(proto: "notif_queue_depth"),
    11: .standard(proto: "medium_adv_interval_ms"),
    12: .standard(proto: "medium_adv_duration_sec"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._customAdvName) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self._txPowerDefault) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self._txPowerMax) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self._fastAdvIntervalMs) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._fastAdvDurationSec) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self._slowAdvIntervalMs) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._slowAdvDurationSec) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self._minConnInterval) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self._maxConnInterval) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self._notifQueueDepth) }()
      case 11: try { try decoder.decodeSingularFloatField(value: &self._mediumAdvIntervalMs) }()
      case 12: try { try decoder.decodeSingularUInt32Field(value: &self._mediumAdvDurationSec) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._customAdvName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._txPowerDefault {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._txPowerMax {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._fastAdvIntervalMs {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    }
    if let v = self._fastAdvDurationSec {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._slowAdvIntervalMs {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 6)
    }
    if let v = self._slowAdvDurationSec {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    }
    if let v = self._minConnInterval {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
    }
    if let v = self._maxConnInterval {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
    }
    if let v = self._notifQueueDepth {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
    }
    if let v = self._mediumAdvIntervalMs {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 11)
    }
    if let v = self._mediumAdvDurationSec {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_BleConfiguration, rhs: Google_Jacquard_Protocol_BleConfiguration) -> Bool {
    if lhs._customAdvName != rhs._customAdvName {return false}
    if lhs._txPowerDefault != rhs._txPowerDefault {return false}
    if lhs._txPowerMax != rhs._txPowerMax {return false}
    if lhs._fastAdvIntervalMs != rhs._fastAdvIntervalMs {return false}
    if lhs._fastAdvDurationSec != rhs._fastAdvDurationSec {return false}
    if lhs._slowAdvIntervalMs != rhs._slowAdvIntervalMs {return false}
    if lhs._slowAdvDurationSec != rhs._slowAdvDurationSec {return false}
    if lhs._minConnInterval != rhs._minConnInterval {return false}
    if lhs._maxConnInterval != rhs._maxConnInterval {return false}
    if lhs._notifQueueDepth != rhs._notifQueueDepth {return false}
    if lhs._mediumAdvIntervalMs != rhs._mediumAdvIntervalMs {return false}
    if lhs._mediumAdvDurationSec != rhs._mediumAdvDurationSec {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_WomConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".WomConfiguration"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enable"),
    2: .same(proto: "sensitivity"),
    3: .standard(proto: "motion_threshold"),
    4: .standard(proto: "no_motion_timeout_ms"),
    5: .standard(proto: "gear_power_policy"),
    6: .standard(proto: "ble_conn_policy"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._enable) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._sensitivity) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._motionThreshold) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._noMotionTimeoutMs) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self._gearPowerPolicy) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self._bleConnPolicy) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._enable {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._sensitivity {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._motionThreshold {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._noMotionTimeoutMs {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._gearPowerPolicy {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    }
    if let v = self._bleConnPolicy {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_WomConfiguration, rhs: Google_Jacquard_Protocol_WomConfiguration) -> Bool {
    if lhs._enable != rhs._enable {return false}
    if lhs._sensitivity != rhs._sensitivity {return false}
    if lhs._motionThreshold != rhs._motionThreshold {return false}
    if lhs._noMotionTimeoutMs != rhs._noMotionTimeoutMs {return false}
    if lhs._gearPowerPolicy != rhs._gearPowerPolicy {return false}
    if lhs._bleConnPolicy != rhs._bleConnPolicy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_UJTConfigReadRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UJTConfigReadRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "imu_config"),
    2: .standard(proto: "ble_config"),
    3: .standard(proto: "wom_config"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._imuConfig) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._bleConfig) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._womConfig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._imuConfig {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._bleConfig {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._womConfig {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_UJTConfigReadRequest, rhs: Google_Jacquard_Protocol_UJTConfigReadRequest) -> Bool {
    if lhs._imuConfig != rhs._imuConfig {return false}
    if lhs._bleConfig != rhs._bleConfig {return false}
    if lhs._womConfig != rhs._womConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_UJTConfigWriteRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UJTConfigWriteRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "imu_config"),
    2: .standard(proto: "ble_config"),
    3: .standard(proto: "wom_config"),
  ]

  fileprivate class _StorageClass {
    var _imuConfig: Google_Jacquard_Protocol_ImuConfiguration? = nil
    var _bleConfig: Google_Jacquard_Protocol_BleConfiguration? = nil
    var _womConfig: Google_Jacquard_Protocol_WomConfiguration? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _imuConfig = source._imuConfig
      _bleConfig = source._bleConfig
      _womConfig = source._womConfig
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._imuConfig) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._bleConfig) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._womConfig) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._imuConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._bleConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._womConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_UJTConfigWriteRequest, rhs: Google_Jacquard_Protocol_UJTConfigWriteRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._imuConfig != rhs_storage._imuConfig {return false}
        if _storage._bleConfig != rhs_storage._bleConfig {return false}
        if _storage._womConfig != rhs_storage._womConfig {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_UJTConfigResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UJTConfigResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "imu_config"),
    2: .standard(proto: "ble_config"),
    3: .standard(proto: "wom_config"),
  ]

  fileprivate class _StorageClass {
    var _imuConfig: Google_Jacquard_Protocol_ImuConfiguration? = nil
    var _bleConfig: Google_Jacquard_Protocol_BleConfiguration? = nil
    var _womConfig: Google_Jacquard_Protocol_WomConfiguration? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _imuConfig = source._imuConfig
      _bleConfig = source._bleConfig
      _womConfig = source._womConfig
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._imuConfig) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._bleConfig) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._womConfig) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._imuConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._bleConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._womConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_UJTConfigResponse, rhs: Google_Jacquard_Protocol_UJTConfigResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._imuConfig != rhs_storage._imuConfig {return false}
        if _storage._bleConfig != rhs_storage._bleConfig {return false}
        if _storage._womConfig != rhs_storage._womConfig {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataCollectionMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataCollectionMetadata"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "campaign_id"),
    2: .standard(proto: "session_id"),
    3: .standard(proto: "trial_id"),
    4: .standard(proto: "subject_id"),
    5: .same(proto: "mode"),
    6: .standard(proto: "action_id"),
    7: .standard(proto: "sensor_ids"),
    8: .standard(proto: "custom_data"),
    9: .standard(proto: "product_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._campaignID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._sessionID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._trialID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._subjectID) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self._mode) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self._actionID) }()
      case 7: try { try decoder.decodeRepeatedUInt32Field(value: &self.sensorIds) }()
      case 8: try { try decoder.decodeSingularBytesField(value: &self._customData) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self._productID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._campaignID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._sessionID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._trialID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._subjectID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._mode {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    }
    if let v = self._actionID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if !self.sensorIds.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.sensorIds, fieldNumber: 7)
    }
    if let v = self._customData {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 8)
    }
    if let v = self._productID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataCollectionMetadata, rhs: Google_Jacquard_Protocol_DataCollectionMetadata) -> Bool {
    if lhs._campaignID != rhs._campaignID {return false}
    if lhs._sessionID != rhs._sessionID {return false}
    if lhs._trialID != rhs._trialID {return false}
    if lhs._subjectID != rhs._subjectID {return false}
    if lhs._mode != rhs._mode {return false}
    if lhs._actionID != rhs._actionID {return false}
    if lhs.sensorIds != rhs.sensorIds {return false}
    if lhs._customData != rhs._customData {return false}
    if lhs._productID != rhs._productID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataCollectionTrialSensorData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataCollectionTrialSensorData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sensor_id"),
    2: .standard(proto: "format_version"),
    3: .same(proto: "fsize"),
    4: .same(proto: "crc16"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._sensorID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._formatVersion) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._fsize) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._crc16) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._sensorID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._formatVersion {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._fsize {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._crc16 {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataCollectionTrialSensorData, rhs: Google_Jacquard_Protocol_DataCollectionTrialSensorData) -> Bool {
    if lhs._sensorID != rhs._sensorID {return false}
    if lhs._formatVersion != rhs._formatVersion {return false}
    if lhs._fsize != rhs._fsize {return false}
    if lhs._crc16 != rhs._crc16 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataCollectionTrialData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataCollectionTrialData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subject_id"),
    2: .standard(proto: "sensor_data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._subjectID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.sensorData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._subjectID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if !self.sensorData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sensorData, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataCollectionTrialData, rhs: Google_Jacquard_Protocol_DataCollectionTrialData) -> Bool {
    if lhs._subjectID != rhs._subjectID {return false}
    if lhs.sensorData != rhs.sensorData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataCollectionTrialList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataCollectionTrialList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "trial_id"),
    2: .standard(proto: "trial_data"),
    3: .standard(proto: "campaign_id"),
    4: .standard(proto: "session_id"),
    5: .standard(proto: "product_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._trialID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.trialData) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._campaignID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._sessionID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._productID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._trialID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if !self.trialData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.trialData, fieldNumber: 2)
    }
    if let v = self._campaignID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._sessionID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._productID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataCollectionTrialList, rhs: Google_Jacquard_Protocol_DataCollectionTrialList) -> Bool {
    if lhs._trialID != rhs._trialID {return false}
    if lhs.trialData != rhs.trialData {return false}
    if lhs._campaignID != rhs._campaignID {return false}
    if lhs._sessionID != rhs._sessionID {return false}
    if lhs._productID != rhs._productID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataCollectionStartRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataCollectionStartRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metadata"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._metadata) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._metadata {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataCollectionStartRequest, rhs: Google_Jacquard_Protocol_DataCollectionStartRequest) -> Bool {
    if lhs._metadata != rhs._metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataCollectionStartResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataCollectionStartResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dc_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._dcStatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._dcStatus {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataCollectionStartResponse, rhs: Google_Jacquard_Protocol_DataCollectionStartResponse) -> Bool {
    if lhs._dcStatus != rhs._dcStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataCollectionStopRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataCollectionStopRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._isError) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._isError {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataCollectionStopRequest, rhs: Google_Jacquard_Protocol_DataCollectionStopRequest) -> Bool {
    if lhs._isError != rhs._isError {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataCollectionStopResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataCollectionStopResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .standard(proto: "dc_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._timestamp) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._dcStatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._timestamp {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._dcStatus {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataCollectionStopResponse, rhs: Google_Jacquard_Protocol_DataCollectionStopResponse) -> Bool {
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs._dcStatus != rhs._dcStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataCollectionStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataCollectionStatusRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataCollectionStatusRequest, rhs: Google_Jacquard_Protocol_DataCollectionStatusRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataCollectionStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataCollectionStatusResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dc_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._dcStatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._dcStatus {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataCollectionStatusResponse, rhs: Google_Jacquard_Protocol_DataCollectionStatusResponse) -> Bool {
    if lhs._dcStatus != rhs._dcStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataCollectionTrialListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataCollectionTrialListRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "campaign_id"),
    2: .standard(proto: "session_id"),
    3: .standard(proto: "product_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._campaignID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._sessionID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._productID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._campaignID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._sessionID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._productID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataCollectionTrialListRequest, rhs: Google_Jacquard_Protocol_DataCollectionTrialListRequest) -> Bool {
    if lhs._campaignID != rhs._campaignID {return false}
    if lhs._sessionID != rhs._sessionID {return false}
    if lhs._productID != rhs._productID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataCollectionTrialListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataCollectionTrialListResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dc_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._dcStatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._dcStatus {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataCollectionTrialListResponse, rhs: Google_Jacquard_Protocol_DataCollectionTrialListResponse) -> Bool {
    if lhs._dcStatus != rhs._dcStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataCollectionTrialListNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataCollectionTrialListNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "trials"),
    2: .same(proto: "trial"),
    3: .standard(proto: "total_trials"),
    4: .standard(proto: "trial_index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.trials) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._trial) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._totalTrials) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._trialIndex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.trials.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.trials, fieldNumber: 1)
    }
    if let v = self._trial {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._totalTrials {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._trialIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataCollectionTrialListNotification, rhs: Google_Jacquard_Protocol_DataCollectionTrialListNotification) -> Bool {
    if lhs.trials != rhs.trials {return false}
    if lhs._trial != rhs._trial {return false}
    if lhs._totalTrials != rhs._totalTrials {return false}
    if lhs._trialIndex != rhs._trialIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataCollectionTrialDataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataCollectionTrialDataRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "campaign_id"),
    2: .standard(proto: "session_id"),
    3: .standard(proto: "trial_id"),
    4: .standard(proto: "subject_id"),
    5: .standard(proto: "sensor_id"),
    6: .same(proto: "offset"),
    7: .standard(proto: "product_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._campaignID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._sessionID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._trialID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._subjectID) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._sensorID) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self._offset) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._productID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._campaignID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._sessionID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._trialID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._subjectID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._sensorID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._offset {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._productID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataCollectionTrialDataRequest, rhs: Google_Jacquard_Protocol_DataCollectionTrialDataRequest) -> Bool {
    if lhs._campaignID != rhs._campaignID {return false}
    if lhs._sessionID != rhs._sessionID {return false}
    if lhs._trialID != rhs._trialID {return false}
    if lhs._subjectID != rhs._subjectID {return false}
    if lhs._sensorID != rhs._sensorID {return false}
    if lhs._offset != rhs._offset {return false}
    if lhs._productID != rhs._productID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataCollectionTrialDataResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataCollectionTrialDataResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .standard(proto: "dc_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 4: try { try decoder.decodeSingularEnumField(value: &self._dcStatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._dcStatus {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataCollectionTrialDataResponse, rhs: Google_Jacquard_Protocol_DataCollectionTrialDataResponse) -> Bool {
    if lhs._dcStatus != rhs._dcStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataCollectionEraseTrialDataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataCollectionEraseTrialDataRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "campaign_id"),
    2: .standard(proto: "session_id"),
    3: .standard(proto: "trial_id"),
    4: .standard(proto: "product_id"),
    5: .standard(proto: "subject_id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._campaignID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._sessionID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._trialID) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._productID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._subjectID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._campaignID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._sessionID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._trialID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._productID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._subjectID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataCollectionEraseTrialDataRequest, rhs: Google_Jacquard_Protocol_DataCollectionEraseTrialDataRequest) -> Bool {
    if lhs._campaignID != rhs._campaignID {return false}
    if lhs._sessionID != rhs._sessionID {return false}
    if lhs._trialID != rhs._trialID {return false}
    if lhs._productID != rhs._productID {return false}
    if lhs._subjectID != rhs._subjectID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataCollectionEraseTrialDataResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataCollectionEraseTrialDataResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dc_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._dcStatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._dcStatus {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataCollectionEraseTrialDataResponse, rhs: Google_Jacquard_Protocol_DataCollectionEraseTrialDataResponse) -> Bool {
    if lhs._dcStatus != rhs._dcStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataCollectionEraseAllDataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataCollectionEraseAllDataRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataCollectionEraseAllDataRequest, rhs: Google_Jacquard_Protocol_DataCollectionEraseAllDataRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataCollectionEraseAllDataResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataCollectionEraseAllDataResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dc_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._dcStatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._dcStatus {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataCollectionEraseAllDataResponse, rhs: Google_Jacquard_Protocol_DataCollectionEraseAllDataResponse) -> Bool {
    if lhs._dcStatus != rhs._dcStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataCollectionProgressNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataCollectionProgressNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sensor_id"),
    2: .standard(proto: "crc_progress_pct"),
    3: .standard(proto: "compression_progress_pct"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._sensorID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._crcProgressPct) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._compressionProgressPct) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._sensorID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._crcProgressPct {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._compressionProgressPct {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataCollectionProgressNotification, rhs: Google_Jacquard_Protocol_DataCollectionProgressNotification) -> Bool {
    if lhs._sensorID != rhs._sensorID {return false}
    if lhs._crcProgressPct != rhs._crcProgressPct {return false}
    if lhs._compressionProgressPct != rhs._compressionProgressPct {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DataCollectionActionHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DataCollectionActionHeader"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "action_id"),
    2: .standard(proto: "is_error"),
    3: .standard(proto: "num_samples"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._actionID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._isError) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._numSamples) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._actionID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._isError {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._numSamples {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DataCollectionActionHeader, rhs: Google_Jacquard_Protocol_DataCollectionActionHeader) -> Bool {
    if lhs._actionID != rhs._actionID {return false}
    if lhs._isError != rhs._isError {return false}
    if lhs._numSamples != rhs._numSamples {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_ModuleDescriptor: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ModuleDescriptor"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "vendor_id"),
    3: .standard(proto: "product_id"),
    4: .standard(proto: "module_id"),
    5: .standard(proto: "ver_major"),
    6: .standard(proto: "ver_minor"),
    7: .standard(proto: "ver_point"),
    8: .standard(proto: "is_enabled"),
    9: .standard(proto: "api_level"),
    10: .standard(proto: "ml_version"),
    11: .standard(proto: "size_bytes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._vendorID) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._productID) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._moduleID) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._verMajor) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self._verMinor) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._verPoint) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self._isEnabled) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self._apiLevel) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self._mlVersion) }()
      case 11: try { try decoder.decodeSingularUInt32Field(value: &self._sizeBytes) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._vendorID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._productID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._moduleID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._verMajor {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._verMinor {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._verPoint {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    }
    if let v = self._isEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    if let v = self._apiLevel {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
    }
    if let v = self._mlVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    }
    if let v = self._sizeBytes {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_ModuleDescriptor, rhs: Google_Jacquard_Protocol_ModuleDescriptor) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._vendorID != rhs._vendorID {return false}
    if lhs._productID != rhs._productID {return false}
    if lhs._moduleID != rhs._moduleID {return false}
    if lhs._verMajor != rhs._verMajor {return false}
    if lhs._verMinor != rhs._verMinor {return false}
    if lhs._verPoint != rhs._verPoint {return false}
    if lhs._isEnabled != rhs._isEnabled {return false}
    if lhs._apiLevel != rhs._apiLevel {return false}
    if lhs._mlVersion != rhs._mlVersion {return false}
    if lhs._sizeBytes != rhs._sizeBytes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_LoadModuleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LoadModuleRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "module"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._module) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._module {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_LoadModuleRequest, rhs: Google_Jacquard_Protocol_LoadModuleRequest) -> Bool {
    if lhs._module != rhs._module {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_LoadModuleNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LoadModuleNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "module"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._module) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._module {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_LoadModuleNotification, rhs: Google_Jacquard_Protocol_LoadModuleNotification) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._module != rhs._module {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_UnloadModuleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UnloadModuleRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "module"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._module) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._module {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_UnloadModuleRequest, rhs: Google_Jacquard_Protocol_UnloadModuleRequest) -> Bool {
    if lhs._module != rhs._module {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_ListModuleResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ListModuleResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "modules"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.modules) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.modules.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.modules, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_ListModuleResponse, rhs: Google_Jacquard_Protocol_ListModuleResponse) -> Bool {
    if lhs.modules != rhs.modules {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DeleteModuleRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteModuleRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "module"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._module) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._module {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DeleteModuleRequest, rhs: Google_Jacquard_Protocol_DeleteModuleRequest) -> Bool {
    if lhs._module != rhs._module {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_BatteryStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BatteryStatusRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "read_battery_level"),
    2: .standard(proto: "read_charging_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._readBatteryLevel) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._readChargingStatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._readBatteryLevel {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._readChargingStatus {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_BatteryStatusRequest, rhs: Google_Jacquard_Protocol_BatteryStatusRequest) -> Bool {
    if lhs._readBatteryLevel != rhs._readBatteryLevel {return false}
    if lhs._readChargingStatus != rhs._readChargingStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_BatteryStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BatteryStatusResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "battery_level"),
    2: .standard(proto: "charging_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._batteryLevel) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._chargingStatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._batteryLevel {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._chargingStatus {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_BatteryStatusResponse, rhs: Google_Jacquard_Protocol_BatteryStatusResponse) -> Bool {
    if lhs._batteryLevel != rhs._batteryLevel {return false}
    if lhs._chargingStatus != rhs._chargingStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_BatteryStatusNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BatteryStatusNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "battery_level"),
    2: .standard(proto: "charging_status"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._batteryLevel) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._chargingStatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._batteryLevel {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._chargingStatus {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_BatteryStatusNotification, rhs: Google_Jacquard_Protocol_BatteryStatusNotification) -> Bool {
    if lhs._batteryLevel != rhs._batteryLevel {return false}
    if lhs._chargingStatus != rhs._chargingStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_BleDisconnectRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BleDisconnectRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "timeout_second"),
    2: .standard(proto: "reconnect_only_on_wom"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._timeoutSecond) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._reconnectOnlyOnWom) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._timeoutSecond {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._reconnectOnlyOnWom {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_BleDisconnectRequest, rhs: Google_Jacquard_Protocol_BleDisconnectRequest) -> Bool {
    if lhs._timeoutSecond != rhs._timeoutSecond {return false}
    if lhs._reconnectOnlyOnWom != rhs._reconnectOnlyOnWom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_DeviceRebootRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceRebootRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "reboot_only_interposer"),
    2: .standard(proto: "silent_reboot"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._rebootOnlyInterposer) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._silentReboot) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._rebootOnlyInterposer {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._silentReboot {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_DeviceRebootRequest, rhs: Google_Jacquard_Protocol_DeviceRebootRequest) -> Bool {
    if lhs._rebootOnlyInterposer != rhs._rebootOnlyInterposer {return false}
    if lhs._silentReboot != rhs._silentReboot {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_FaultlogGetRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FaultlogGetRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_record_index"),
    2: .standard(proto: "records_count"),
    3: .standard(proto: "get_faults"),
    4: .standard(proto: "get_errors"),
    5: .standard(proto: "get_resets"),
    6: .standard(proto: "get_app_err_faults"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._startRecordIndex) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._recordsCount) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._getFaults) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._getErrors) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._getResets) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._getAppErrFaults) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._startRecordIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._recordsCount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._getFaults {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._getErrors {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._getResets {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._getAppErrFaults {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_FaultlogGetRequest, rhs: Google_Jacquard_Protocol_FaultlogGetRequest) -> Bool {
    if lhs._startRecordIndex != rhs._startRecordIndex {return false}
    if lhs._recordsCount != rhs._recordsCount {return false}
    if lhs._getFaults != rhs._getFaults {return false}
    if lhs._getErrors != rhs._getErrors {return false}
    if lhs._getResets != rhs._getResets {return false}
    if lhs._getAppErrFaults != rhs._getAppErrFaults {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_AppErrFaultRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppErrFaultRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "record_id"),
    2: .same(proto: "id"),
    3: .same(proto: "info"),
    4: .standard(proto: "pc_error"),
    5: .standard(proto: "stack_trace"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._recordID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._id) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._info) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._pcError) }()
      case 5: try { try decoder.decodeRepeatedUInt32Field(value: &self.stackTrace) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._recordID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._id {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._info {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._pcError {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if !self.stackTrace.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.stackTrace, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_AppErrFaultRecord, rhs: Google_Jacquard_Protocol_AppErrFaultRecord) -> Bool {
    if lhs._recordID != rhs._recordID {return false}
    if lhs._id != rhs._id {return false}
    if lhs._info != rhs._info {return false}
    if lhs._pcError != rhs._pcError {return false}
    if lhs.stackTrace != rhs.stackTrace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_FaultRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FaultRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "record_id"),
    2: .same(proto: "parameter"),
    3: .standard(proto: "pc_register"),
    4: .standard(proto: "lr_register"),
    5: .standard(proto: "stack_trace"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._recordID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._parameter) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._pcRegister) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._lrRegister) }()
      case 5: try { try decoder.decodeRepeatedUInt32Field(value: &self.stackTrace) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._recordID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._parameter {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._pcRegister {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._lrRegister {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if !self.stackTrace.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.stackTrace, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_FaultRecord, rhs: Google_Jacquard_Protocol_FaultRecord) -> Bool {
    if lhs._recordID != rhs._recordID {return false}
    if lhs._parameter != rhs._parameter {return false}
    if lhs._pcRegister != rhs._pcRegister {return false}
    if lhs._lrRegister != rhs._lrRegister {return false}
    if lhs.stackTrace != rhs.stackTrace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_ErrorRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ErrorRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "record_id"),
    2: .same(proto: "parameter"),
    3: .standard(proto: "function_name"),
    4: .standard(proto: "line_number"),
    5: .standard(proto: "pc_register"),
    6: .standard(proto: "lr_register"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._recordID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._parameter) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._functionName) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._lineNumber) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._pcRegister) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self._lrRegister) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._recordID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._parameter {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._functionName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._lineNumber {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._pcRegister {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._lrRegister {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_ErrorRecord, rhs: Google_Jacquard_Protocol_ErrorRecord) -> Bool {
    if lhs._recordID != rhs._recordID {return false}
    if lhs._parameter != rhs._parameter {return false}
    if lhs._functionName != rhs._functionName {return false}
    if lhs._lineNumber != rhs._lineNumber {return false}
    if lhs._pcRegister != rhs._pcRegister {return false}
    if lhs._lrRegister != rhs._lrRegister {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_ResetReasonRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResetReasonRecord"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "record_id"),
    2: .standard(proto: "reset_reason"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._recordID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._resetReason) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._recordID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._resetReason {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_ResetReasonRecord, rhs: Google_Jacquard_Protocol_ResetReasonRecord) -> Bool {
    if lhs._recordID != rhs._recordID {return false}
    if lhs._resetReason != rhs._resetReason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Jacquard_Protocol_FaultlogGetResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FaultlogGetResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "last_record_index"),
    2: .standard(proto: "reset_reason_records"),
    3: .standard(proto: "apperrfault_records"),
    4: .standard(proto: "fault_records"),
    5: .standard(proto: "error_records"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._lastRecordIndex) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.resetReasonRecords) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.apperrfaultRecords) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.faultRecords) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.errorRecords) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._lastRecordIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if !self.resetReasonRecords.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.resetReasonRecords, fieldNumber: 2)
    }
    if !self.apperrfaultRecords.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.apperrfaultRecords, fieldNumber: 3)
    }
    if !self.faultRecords.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.faultRecords, fieldNumber: 4)
    }
    if !self.errorRecords.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.errorRecords, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Google_Jacquard_Protocol_FaultlogGetResponse, rhs: Google_Jacquard_Protocol_FaultlogGetResponse) -> Bool {
    if lhs._lastRecordIndex != rhs._lastRecordIndex {return false}
    if lhs.resetReasonRecords != rhs.resetReasonRecords {return false}
    if lhs.apperrfaultRecords != rhs.apperrfaultRecords {return false}
    if lhs.faultRecords != rhs.faultRecords {return false}
    if lhs.errorRecords != rhs.errorRecords {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
